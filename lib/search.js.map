{"version":3,"sources":["../src/search.js"],"names":["queryString","require","utils","Search","dao","_dao","QueryOptions","sourceid","startrow","rowlimit","selectedproperties","refiners","refinementfilters","hiddenconstraints","sortlist","convertRowsToObjects","itemRows","items","i","length","row","item","j","Cells","results","Key","Value","push","SearchResults","queryResponse","elapsedTime","ElapsedTime","suggestion","SpellingSuggestion","resultsCount","PrimaryQueryResult","RelevantResults","RowCount","totalResults","TotalRows","totalResultsIncludingDuplicates","TotalRowsIncludingDuplicates","Table","Rows","mapRefiners","RefinementResults","refinementResults","Refiners","map","RefinerName","r","Name","RefinerOptions","Entries","prototype","query","queryText","queryOptions","optionsQueryString","fromObj","url","get","then","validateODataV2","resp","Error","people","options","module","exports"],"mappings":"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","file":"search.js","sourcesContent":["var queryString = require('./queryString');\r\nvar utils = require('./utils')\r\n\r\n/**\r\n * Allows you to perform queries agains the SP Search Service. You shouldn't ever be new'ing this class up up yourself, instead you'll get it from your dao as shown in first example.\r\n * @class\r\n * @param {IBaseDao} dao - Data access object used to make requests.\r\n * @example <caption>You access this Search class using the 'search' property of the dao</caption>\r\n * var dao = new SPScript.RestDao(_spPageContextInfo.webAbsoluteUrl);\r\n * dao.search.query('andrew').then(function(result) { console.log(result.items) });\r\n */\r\nvar Search = function(dao) {\r\n\tthis._dao = dao;\r\n};\r\n\r\n/**\r\n * Represents the response sent back from the Search Service after a query\r\n * @typedef {Object} QueryOptions\r\n * @property {string} sourceid - Special id that allows filter of types\r\n * @property {int} startrow - \r\n * @property {int} rowlimit - How many items to bring back\r\n * @property {Array<string>} selectedproperties - An array of the property names to bring back\r\n * @property {Array<string>} refiners - An array of the refiners to bring back\r\n * @property {?} hiddenconstraints - \r\n * @property {?} sortlist - \r\n */\r\nSearch.QueryOptions = function() {\r\n\tthis.sourceid = null;\r\n\tthis.startrow = null;\r\n\tthis.rowlimit = 30;\r\n\tthis.selectedproperties = null;\r\n\tthis.refiners = null;\r\n\tthis.refinementfilters = null;\r\n\tthis.hiddenconstraints = null;\r\n\tthis.sortlist = null;\r\n};\r\n\r\nvar convertRowsToObjects = function(itemRows) {\r\n\tvar items = [];\r\n\r\n\tfor (var i = 0; i < itemRows.length; i++) {\r\n\t\tvar row = itemRows[i],\r\n\t\t\titem = {};\r\n\t\tfor (var j = 0; j < row.Cells.results.length; j++) {\r\n\t\t\titem[row.Cells.results[j].Key] = row.Cells.results[j].Value;\r\n\t\t}\r\n\r\n\t\titems.push(item);\r\n\t}\r\n\r\n\treturn items;\r\n};\r\n\r\n/**\r\n * Represents the response sent back from the Search Service after a query\r\n * @typedef {Object} SearchResults\r\n * @property {string} elapsedTime - How long the query took\r\n * @property {object} suggestion - Spelling suggestion\r\n * @property {int} resultsCount - Number of results in this batch\r\n * @property {int} totalResults - Total number of results that could be returned\r\n * @property {int} totalResultsIncludingDuplicates - Total number of results that could be returned including duplicates\r\n * @property {Array} items - An array of search result items.  Properties will depend of the item type.\r\n * @property {?Array<Refiner>} refiners - An array of refiners. Can be null.\r\n */\r\nvar SearchResults = function(queryResponse) {\r\n\tthis.elapsedTime = queryResponse.ElapsedTime;\r\n\tthis.suggestion = queryResponse.SpellingSuggestion;\r\n\tthis.resultsCount = queryResponse.PrimaryQueryResult.RelevantResults.RowCount;\r\n\tthis.totalResults = queryResponse.PrimaryQueryResult.RelevantResults.TotalRows;\r\n\tthis.totalResultsIncludingDuplicates = queryResponse.PrimaryQueryResult.RelevantResults.TotalRowsIncludingDuplicates;\r\n\tthis.items = convertRowsToObjects(queryResponse.PrimaryQueryResult.RelevantResults.Table.Rows.results);\r\n\tthis.refiners = mapRefiners(queryResponse.PrimaryQueryResult.RefinementResults);\r\n};\r\n\r\n/**\r\n * Represents the response sent back from the Search Service after a query\r\n * @typedef {Object} Refiner\r\n * @property {string} RefinerName - How long the query took\r\n * @property {Array} RefinerOptions - An array of valid refiner values\r\n */\r\n\r\nvar mapRefiners = function(refinementResults) {\r\n\tvar refiners = [];\r\n\r\n\tif (refinementResults && refinementResults.Refiners && refinementResults.Refiners.results) {\r\n\t\trefiners = refinementResults.Refiners.results.map(r => {\r\n\t\t\treturn {\r\n\t\t\t\tRefinerName: r.Name,\r\n\t\t\t\tRefinerOptions: r.Entries.results\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n\treturn refiners;\r\n};\r\n\r\n/**\r\n * Performs a query using the search service\r\n * @param {string} queryText - The query text to send to the Search Service\r\n * @param {QueryOptions} [[queryOptions]] - Override the default query options\r\n * @returns {Promise<SearchResults>} - A Promise that resolves to a SearchResults object\r\n * @example\r\n * dao.search.query('audit').then(function(result) { console.log(result.items) });\r\n */\r\nSearch.prototype.query = function(queryText, queryOptions) {\r\n\tvar optionsQueryString = queryOptions != null ? \"&\" + queryString.fromObj(queryOptions, true) : \"\";\r\n\r\n\tvar url = \"/search/query?querytext='\" + queryText + \"'\" + optionsQueryString;\r\n\treturn this._dao.get(url)\r\n\t\t.then(utils.validateODataV2)\r\n\t\t.then(resp => {\r\n\t\t\tif (resp.query) {\r\n\t\t\t\treturn new SearchResults(resp.query);\r\n\t\t\t}\r\n\t\t\tthrow new Error(\"Invalid response back from search service\");\r\n\t\t});\r\n};\r\n\r\n/**\r\n * Performs a query using the search service\r\n * @param {string} queryText - The query text to send to the Search Service\r\n * @param {QueryOptions} [[queryOptions]] - Override the default query options\r\n * @returns {Promise<SearchResults>} - A Promise that resolves to a SearchResults object\r\n * @example\r\n * dao.search.people('andrew').then(function(result) { console.log(result.items) });\r\n */\r\nSearch.prototype.people = function(queryText, queryOptions) {\r\n\tvar options = queryOptions || {};\r\n\toptions.sourceid = 'b09a7990-05ea-4af9-81ef-edfab16c4e31';\r\n\treturn this.query(queryText, options);\r\n};\r\n\r\n\r\nmodule.exports = Search;"]}