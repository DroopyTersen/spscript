{"version":3,"sources":["../src/csr-renderers.js"],"names":[],"mappings":";;AAAA,IAAI,aAAa,QAAQ,UAAR,CAAjB;;AAEA,SAAS,sBAAT,CAAgC,YAAhC,EAA8C,MAA9C,EAAsD;AAClD,WAAO,UAAS,GAAT,EAAc;AACjB,eAAO,WAAW,MAAX,CAAkB,YAAlB,EAAgC,GAAhC,CAAP;AACH,KAFD;AAGH;;AAED,SAAS,uBAAT,CAAiC,SAAjC,EAA4C;AACxC,WAAO,UAAS,GAAT,EAAc;AACjB,YAAI,UAAU,IAAI,WAAlB;AACA,YAAI,UAAU,OAAd,EAAuB;AACnB,oBAAQ,oBAAR,CAA6B,UAAU,IAAvC,EAA6C,UAAU,OAAvD;AACH;AACD,YAAI,UAAU,QAAd,EAAwB;AACpB,oBAAQ,wBAAR,CAAiC,QAAQ,SAAzC,EAAoD,UAAU,QAAV,CAAmB,IAAnB,CAAwB,IAAxB,EAA8B,OAA9B,CAApD;AACH;;AAED,YAAI,QAAQ,kBAAZ,EAAgC;AAC5B,sBAAU,QAAV,GAAqB,UAAS,KAAT,EAAgB;AACjC,wBAAQ,kBAAR,CAA2B,UAAU,IAArC,EAA2C,KAA3C;AACH,aAFD;AAGH;;AAED,eAAO,UAAU,MAAV,CAAiB,GAAjB,CAAP;AACH,KAhBD;AAiBH;;AAED,SAAS,0BAAT,CAAoC,KAApC,EAA2C;AACvC,WAAO,UAAS,GAAT,EAAc;AACjB,YAAI,UAAU,IAAI,WAAlB;AACA,YAAG,WAAW,QAAQ,oBAAnB,IAA2C,MAAM,OAApD,EAA6D;AACzD,oBAAQ,oBAAR,CAA6B,UAAU,IAAvC,EAA6C,UAAU,OAAvD;AACH;AACD,eAAO,UAAU,MAAV,CAAiB,GAAjB,CAAP;AACH,KAND;AAOH;;AAED,IAAI,YAAY;AACZ,cAAU;AACN,gBAAQ;AADF,KADE;AAIZ,eAAY;AACR,gBAAQ;AADA,KAJA;AAOZ,kBAAc;AACV,gBAAQ;AADE;AAPF,CAAhB;;AAYA,OAAO,OAAP,GAAiB,SAAjB","file":"csr-renderers.js","sourcesContent":["var templating = require(\"mustache\");\r\n\r\nfunction createTemplateRenderer(htmlTemplate, events) {\r\n    return function(ctx) {\r\n        return templating.render(htmlTemplate, ctx);\r\n    }\r\n}\r\n\r\nfunction createFormFieldRenderer(formField) {\r\n    return function(ctx) {\r\n        var formCtx = ctx.FormContext;\r\n        if (formField.onReady) {\r\n            formCtx.registerInitCallback(formField.name, formField.onReady)\r\n        }\r\n        if (formField.getValue) {\r\n            formCtx.registerGetValueCallback(formCtx.fieldName, formField.getValue.bind(null, formCtx));\r\n        }\r\n        // tack on 'setValue' function\r\n        if (formCtx.updateControlValue) {\r\n            formField.setValue = function(value) {\r\n                formCtx.updateControlValue(formField.name, value);\r\n            }            \r\n        }\r\n\r\n        return formField.render(ctx);\r\n    }\r\n}\r\n\r\nfunction createDisplayFieldRenderer(field) {\r\n    return function(ctx) {\r\n        var formCtx = ctx.FormContext;\r\n        if(formCtx && formCtx.registerInitCallback && field.onReady) {\r\n            formCtx.registerInitCallback(formField.name, formField.onReady)\r\n        }\r\n        return formField.render(ctx);\r\n    }\r\n}\r\n\r\nvar renderers = {\r\n    template: {\r\n        create: createTemplateRender\r\n    },\r\n    formField : {\r\n        create: createFormFieldRenderer\r\n    },\r\n    displayField: {\r\n        create: createDisplayFieldRenderer\r\n    }\r\n}\r\n\r\nmodule.exports = renderers;"]}