{"version":3,"sources":["../src/csr-renderers.js"],"names":["templating","require","createTemplateRenderer","htmlTemplate","events","ctx","render","createFormFieldRenderer","field","formCtx","FormContext","onReady","registerInitCallback","name","getValue","registerGetValueCallback","bind","updateControlValue","setValue","value","createDisplayFieldRenderer","renderers","template","create","formField","displayField","module","exports"],"mappings":";;AAAA,IAAIA,aAAaC,QAAQ,UAAR,CAAjB;;AAEA,SAASC,sBAAT,CAAgCC,YAAhC,EAA8CC,MAA9C,EAAsD;AAClD,WAAO,UAASC,GAAT,EAAc;AACjB,eAAOL,WAAWM,MAAX,CAAkBH,YAAlB,EAAgCE,GAAhC,CAAP;AACH,KAFD;AAGH;;AAED,SAASE,uBAAT,CAAiCC,KAAjC,EAAwC;AACpC,WAAO,UAASH,GAAT,EAAc;AACjB,YAAII,UAAUJ,IAAIK,WAAlB;AACA,YAAIF,MAAMG,OAAV,EAAmB;AACfF,oBAAQG,oBAAR,CAA6BJ,MAAMK,IAAnC,EAAyCL,MAAMG,OAA/C;AACH;AACD,YAAIH,MAAMM,QAAV,EAAoB;AAChBL,oBAAQM,wBAAR,CAAiCP,MAAMK,IAAvC,EAA6CL,MAAMM,QAAN,CAAeE,IAAf,CAAoB,IAApB,EAA0BX,GAA1B,CAA7C;AACH;AACD;AACA,YAAII,QAAQQ,kBAAZ,EAAgC;AAC5BT,kBAAMU,QAAN,GAAiB,UAASC,KAAT,EAAgB;AAC7BV,wBAAQQ,kBAAR,CAA2BT,MAAMK,IAAjC,EAAuCM,KAAvC;AACH,aAFD;AAGH;;AAED,eAAOX,MAAMF,MAAN,CAAaD,GAAb,CAAP;AACH,KAhBD;AAiBH;;AAED,SAASe,0BAAT,CAAoCZ,KAApC,EAA2C;AACvC,WAAO,UAASH,GAAT,EAAc;AACjB,YAAII,UAAUJ,IAAIK,WAAlB;AACA,YAAGD,WAAWA,QAAQG,oBAAnB,IAA2CJ,MAAMG,OAApD,EAA6D;AACzDF,oBAAQG,oBAAR,CAA6BJ,MAAMK,IAAnC,EAAyCL,MAAMG,OAA/C;AACH;AACD,eAAOH,MAAMF,MAAN,CAAaD,GAAb,CAAP;AACH,KAND;AAOH;;AAED,IAAIgB,YAAY;AACZC,cAAU;AACNC,gBAAQrB;AADF,KADE;AAIZsB,eAAY;AACRD,gBAAQhB;AADA,KAJA;AAOZkB,kBAAc;AACVF,gBAAQH;AADE;AAPF,CAAhB;;AAYAM,OAAOC,OAAP,GAAiBN,SAAjB","file":"csr-renderers.js","sourcesContent":["var templating = require(\"mustache\");\r\n\r\nfunction createTemplateRenderer(htmlTemplate, events) {\r\n    return function(ctx) {\r\n        return templating.render(htmlTemplate, ctx);\r\n    }\r\n}\r\n\r\nfunction createFormFieldRenderer(field) {\r\n    return function(ctx) {\r\n        var formCtx = ctx.FormContext;\r\n        if (field.onReady) {\r\n            formCtx.registerInitCallback(field.name, field.onReady)\r\n        }\r\n        if (field.getValue) {\r\n            formCtx.registerGetValueCallback(field.name, field.getValue.bind(null, ctx));\r\n        }\r\n        // tack on 'setValue' function\r\n        if (formCtx.updateControlValue) {\r\n            field.setValue = function(value) {\r\n                formCtx.updateControlValue(field.name, value);\r\n            }            \r\n        }\r\n\r\n        return field.render(ctx);\r\n    }\r\n}\r\n\r\nfunction createDisplayFieldRenderer(field) {\r\n    return function(ctx) {\r\n        var formCtx = ctx.FormContext;\r\n        if(formCtx && formCtx.registerInitCallback && field.onReady) {\r\n            formCtx.registerInitCallback(field.name, field.onReady)\r\n        }\r\n        return field.render(ctx);\r\n    }\r\n}\r\n\r\nvar renderers = {\r\n    template: {\r\n        create: createTemplateRenderer\r\n    },\r\n    formField : {\r\n        create: createFormFieldRenderer\r\n    },\r\n    displayField: {\r\n        create: createDisplayFieldRenderer\r\n    }\r\n}\r\n\r\nmodule.exports = renderers;"]}