{"version":3,"sources":["../src/csr.js"],"names":[],"mappings":";;;;AAAA,IAAI,YAAY,QAAQ,SAAR,GAAoB,QAAQ,iBAAR,CAApC;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,IAAI,oBAAoB,QAAQ,iBAAR,GAA4B,UAAS,cAAT,EAAyB,IAAzB,EAA+B;AAC/E,QAAI,WAAW,UAAU,SAAV,CAAoB,MAApB,CAA2B,cAA3B,CAAf;AACA,mBAAe,SAAf,GAA2B,eAAe,SAAf,IAA4B,CAAC,SAAD,EAAY,UAAZ,CAAvD;AACA,WAAO,cAAc,cAAd,EAA8B,QAA9B,EAAwC,IAAxC,CAAP;AACH,CAJD;;;AAOA,IAAI,uBAAuB,QAAQ,oBAAR,GAA+B,UAAS,cAAT,EAAyB,IAAzB,EAA+B;AACrF,QAAI,WAAW,UAAU,YAAV,CAAuB,MAAvB,CAA8B,cAA9B,CAAf;AACA,mBAAe,SAAf,GAA2B,eAAe,SAAf,IAA4B,CAAC,MAAD,EAAS,aAAT,CAAvD;AACA,WAAO,cAAc,cAAd,EAA8B,QAA9B,EAAwC,IAAxC,CAAP;AACH,CAJD;;AAMA,IAAI,gBAAgB,QAAQ,aAAR,GAAwB,UAAS,KAAT,EAAgB,QAAhB,EAA0B,IAA1B,EAAgC;AACxE,QAAI,YAAY,EAAhB;;AAEA,UAAM,SAAN,CAAgB,OAAhB,CAAwB;AAAA,eAAK,UAAU,CAAV,IAAe,QAApB;AAAA,KAAxB;AACA,QAAI,WAAW;AACX,mBAAW;AACP,oBAAQ;AADD;AADA,KAAf;AAKA,QAAI,mBAAmB,SAAc,EAAd,EAAkB,QAAlB,EAA4B,IAA5B,CAAvB;AACA,qBAAiB,SAAjB,CAA2B,MAA3B,CAAkC,MAAM,IAAxC,IAAgD,SAAhD;AACA,sBAAkB,eAAlB,CAAkC,yBAAlC,CAA4D,gBAA5D;AACA,WAAO,KAAP;AACH,CAbD;;AAeA,IAAI,eAAe,QAAQ,YAAR,GAAuB,UAAS,SAAT,EAAoB,OAApB,EAA6B;;;AAGnE,QAAI,WAAW;;;AAGX,mBAAW;AACP,oBAAQ,kBAAW;AAAE,uBAAO,EAAP;AAAW,aADzB;AAEP,oBAAQ,kBAAW;AAAE,uBAAO,EAAP;AAAW;AAFzB;AAHA,KAAf;;AASA,QAAI,mBAAmB,SAAc,EAAd,EAAkB,QAAlB,EAA4B,OAA5B,CAAvB;AACA,qBAAiB,SAAjB,GAA6B,SAAc,EAAd,EAAkB,iBAAiB,SAAnC,EAA8C,SAA9C,CAA7B;;AAEA,sBAAkB,eAAlB,CAAkC,yBAAlC,CAA4D,gBAA5D;AACH,CAhBD","file":"csr.js","sourcesContent":["var renderers = exports.renderers = require(\"./csr-renderers\");\r\n\r\n//fieldComponent = { name, onReady, render, getValue, locations:[\"View\", \"NewForm\",\"DisplayForm\", \"EditForm\"] }\r\n// var renderColoredStatus = function(ctx) {\r\n//     // map statuses  to colors\r\n//     var colors = {\r\n//         \"Not Started\": \"orange\",\r\n//         \"In Progress\": \"yellow\",\r\n//         \"Done\": \"green\"\r\n//     };\r\n\r\n//     // Look at the item's status to get the mapped color\r\n//     // If the item has a status value that is not mapped, then use 'red'\r\n//     var color = colors[ctx.CurrentItem.Status] || \"red\";\r\n\r\n//     // return the html used to render the status field;\r\n//     return \"<h4 style='color:\" + color + \"'>\" + ctx.CurrentItem.Status + \"</h4>\";\r\n// };\r\n\r\n// var fieldOverride = {\r\n//     name:  \"Status\",\r\n//     render: renderColoredStatus\r\n// };\r\n\r\n// SPScript.CSR.registerDisplayField(fieldOverride);\r\n\r\nvar registerFormField = exports.registerFormField = function(fieldComponent, opts) {\r\n    var renderer = renderers.formField.create(fieldComponent);\r\n    fieldComponent.locations = fieldComponent.locations || [\"NewForm\", \"EditForm\"];\r\n    return registerField(fieldComponent, renderer, opts);\r\n};\r\n\r\n//{name, onReady, render, locations: [\"View\", \"DisplayForm\"]}\r\nvar registerDisplayField = exports.registerDisplayField = function(fieldComponent, opts) {\r\n    var renderer = renderers.displayField.create(fieldComponent);\r\n    fieldComponent.locations = fieldComponent.locations || [\"View\", \"DisplayForm\"];\r\n    return registerField(fieldComponent, renderer, opts);\r\n};\r\n\r\nvar registerField = exports.registerField = function(field, renderer, opts) {\r\n    var renderers = {}\r\n    //View, DisplayForm, EditForm, NewForm\r\n    field.locations.forEach(l => renderers[l] = renderer);\r\n    var defaults = {\r\n        Templates: {\r\n            Fields: {}\r\n        }\r\n    };\r\n    var templateOverride = Object.assign({}, defaults, opts);\r\n    templateOverride.Templates.Fields[field.name] = renderers;\r\n    SPClientTemplates.TemplateManager.RegisterTemplateOverrides(templateOverride);\r\n    return field;\r\n};\r\n\r\nvar registerView = exports.registerView = function(templates, options) {\r\n    // templates keys are Header, Item, Footer\r\n    //RenderFieldTemplateDefault(ctx); default renderer?\r\n    var defaults = {\r\n        //BaseViewID\r\n        //ListTemplateType\r\n        Templates: {\r\n            Header: function() { return \"\" },\r\n            Footer: function() { return \"\" }\r\n        }\r\n    }\r\n\r\n    var templateOverride = Object.assign({}, defaults, options);\r\n    templateOverride.Templates = Object.assign({}, templateOverride.Templates, templates);\r\n\r\n    SPClientTemplates.TemplateManager.RegisterTemplateOverrides(templateOverride);\r\n}\r\n"]}