{"version":3,"sources":["../src/list.js"],"names":["utils","require","Permissions","headers","List","listname","dao","baseUrl","_dao","permissions","prototype","getItems","odataQuery","get","appendOData","then","validateODataV2","getItemById","id","odata","url","info","addItem","item","requestDigest","_addItem","getRequestDigest","data","d","ListItemEntityTypeFullName","customOptions","getAddHeaders","post","updateItem","itemId","updates","_updateItem","digest","__metadata","type","getUpdateHeaders","etag","uri","deleteItem","_deleteItem","getDeleteHeaders","addAttachment","filename","content","_addAttachment","getFilestreamHeaders","deleteAttachment","_deleteAttachment","findItems","key","value","extraOData","filterValue","findItem","items","length","prefix","module","exports"],"mappings":"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","file":"list.js","sourcesContent":["var utils = require(\"./utils\");\r\nvar Permissions = require(\"./permissions\");\r\nvar headers = require(\"./requestHeaders\");\r\n\r\n/**\r\n * Represents a SharePoint list. You shouldn't ever be new'ing this class up up yourself, instead you'll get it from your dao as shown in first example.\r\n * @class\r\n * @param {IBaseDao} dao - Data access object used to make requests.\r\n * @property {Permissions} permissions - allows checking security information of the Web\r\n * @property {string} baseUrl - API relative url (value = \"/web\")\r\n * @example <caption>You access a 'List' by passing a name to the 'lists' property of the dao.</caption>\r\n * var dao = new SPScript.RestDao(_spPageContextInfo.webAbsoluteUrl);\r\n * var list = dao.lists(\"Tasks\");\r\n * list.getItemById(12).then(function(item) { console.log(item) });\r\n */\r\nvar List = function(listname, dao) {\r\n\tthis.listname = listname;\r\n\tthis.baseUrl = \"/web/lists/getbytitle('\" + listname + \"')\";\r\n\tthis._dao = dao;\r\n\tthis.permissions = new Permissions(this.baseUrl, this._dao);\r\n};\r\n\r\n/**\r\n * Retrieves items in the lists\r\n * @param {string} [odata] - OData string\r\n * @returns {Promise<Array>} - A Promise that resolves an array of list items\r\n * @example <caption>Get all items</caption>\r\n * list.getItems().then(function(items) { console.log(items) });\r\n * @example <caption>Get first 5 items by passing in optional OData.</caption>\r\n * list.getItems(\"$top=5\").then(function(items) { console.log(items) });\r\n */\r\nList.prototype.getItems = function(odataQuery) {\r\n\treturn this._dao\r\n\t\t.get(this.baseUrl + \"/items\" + appendOData(odataQuery))\r\n\t\t.then(utils.validateODataV2);\r\n};\r\n\r\n/**\r\n * Retrieves a specific item based on SharePoint ID\r\n * @param {int} id - SharePoint integer Id\r\n * @param {string} [odata] - OData string\r\n * @returns {Promise} - A Promise that resolves to a single list item\r\n * @example <caption>Get the item with ID of 5.</caption>\r\n * list.getItemById(5).then(function(item) { console.log(item) });\r\n * @example <caption>Only bring back 'Title' and 'Status' using optional OData string</caption>\r\n * list.getItemById(5, \"$select=Title,Status\").then(function(items) { console.log(items) });\r\n */\r\nList.prototype.getItemById = function(id, odata) {\r\n\tvar url = this.baseUrl + \"/items(\" + id + \")\" + appendOData(odata);\r\n\treturn this._dao.get(url).then(utils.validateODataV2);\r\n};\r\n\r\n/**\r\n * Retrieves basic information about the list\r\n * @returns {Promise<SP.Web>} - A Promise that resolves to an object containing non-deferred properties of an SP.List (https://msdn.microsoft.com/en-us/library/office/jj244873.aspx)\r\n * @example\r\n * list.info().then(function(info) { console.log(info) });\r\n */\r\nList.prototype.info = function() {\r\n\treturn this._dao.get(this.baseUrl).then(utils.validateODataV2);\r\n};\r\n\r\n/**\r\n * Creates a SharePoint list item\r\n * @param {object} item - Javascript object representing the list item\r\n * @param {string} [requestDigest] - Optional request digest token used to authorize the action. One will be automatically retrieved if not provided.\r\n * @returns {Promise} - A Promise that resolves to the inserted list item\r\n * @example <caption>Add a list item. Set Title and Status.</caption>\r\n * var newItem = {\r\n *    Title: \"Test Created Item\",\r\n *    MyStatus: \"Red\"\r\n * };\r\n * list.addItem(newItem).then(function(item) { console.log(item) });\r\n */\r\nList.prototype.addItem = function(item, requestDigest) {\r\n\tif (requestDigest) return this._addItem(item, requestDigest);\r\n\r\n\treturn this._dao.getRequestDigest().then(requestDigest => this._addItem(item, requestDigest));\r\n};\r\n\r\nList.prototype._addItem = function(item, requestDigest) {\r\n\treturn this._dao.get(this.baseUrl).then(data => {\r\n\r\n\t\t\t//decorate the item with the 'type' metadata\r\n\t\t\titem = Object.assign({}, {\r\n\t\t\t\t\"__metadata\": {\r\n\t\t\t\t\t\"type\": data.d.ListItemEntityTypeFullName\r\n\t\t\t\t}\r\n\t\t\t}, item);\r\n\r\n\t\t\tvar customOptions = {\r\n\t\t\t\theaders: headers.getAddHeaders(requestDigest)\r\n\t\t\t};\r\n\t\t\treturn this._dao.post(this.baseUrl + \"/items\", item, customOptions)\r\n\t\t})\r\n\t\t.then(utils.validateODataV2);\r\n};\r\n\r\n/**\r\n * Updates a SharePoint list item\r\n * @param {int} itemId - The SharePoint Id of the item to update\r\n * @param {object} updates - Javascript object representing columns you want to update\r\n * @param {string} [requestDigest] - Optional request digest token used to authorize the action. One will be automatically retrieved if not provided.\r\n * @returns {Promise} - A Promise\r\n * @example <caption>Update the item's Title</caption>\r\n * var updates = {\r\n *    Title: \"Updated Title\"\r\n * };\r\n * list.updateItem(12, updates).then(function() { console.log\"Success\") });\r\n */\r\nList.prototype.updateItem = function(itemId, updates, requestDigest) {\r\n\tif (requestDigest) return this._updateItem(itemId, updates, requestDigest);\r\n\r\n\treturn this._dao.getRequestDigest().then(requestDigest => this._updateItem(itemId, updates, requestDigest));\r\n};\r\n\r\nList.prototype._updateItem = function(itemId, updates, digest) {\r\n\treturn this.getItemById(itemId).then(item => {\r\n\t\t//decorate the item with the 'type' metadata\r\n\t\tupdates = Object.assign({}, {\r\n\t\t\t\"__metadata\": {\r\n\t\t\t\t\"type\": item.__metadata.type\r\n\t\t\t}\r\n\t\t}, updates);\r\n\r\n\t\tvar customOptions = {\r\n\t\t\theaders: headers.getUpdateHeaders(digest, item.__metadata.etag)\r\n\t\t};\r\n\r\n\t\treturn this._dao.post(item.__metadata.uri, updates, customOptions);\r\n\t});\r\n};\r\n\r\n/**\r\n * Updates a SharePoint list item\r\n * @param {int} itemId - The SharePoint Id of the item to update\r\n * @param {string} [requestDigest] - Optional request digest token used to authorize the action. One will be automatically retrieved if not provided.\r\n * @returns {Promise} - A Promise\r\n * @example <caption>Delete the item with an ID of 12</caption>\r\n * list.deleteItem(12).then(function() { console.log\"Success\") });\r\n */\r\nList.prototype.deleteItem = function(itemId, requestDigest) {\r\n\tif (requestDigest) return this._deleteItem(itemId, requestDigest);\r\n\r\n\treturn this._dao.getRequestDigest().then(requestDigest => this._deleteItem(itemId, requestDigest));\r\n};\r\n\r\nList.prototype._deleteItem = function(itemId, digest) {\r\n\treturn this.getItemById(itemId).then(item => {\r\n\t\tvar customOptions = {\r\n\t\t\theaders: headers.getDeleteHeaders(digest, item.__metadata.etag)\r\n\t\t};\r\n\t\treturn this._dao.post(item.__metadata.uri, \"\", customOptions);\r\n\t});\r\n};\r\n\r\n/**\r\n * Attach file to an item in the list\r\n * @param {int} itemId - The SharePoint Id of the item to update\r\n * @param {string} filename - Filename to be put in SharePoint\r\n * @param {string} content - File content\r\n * @returns {Promise} - A Promise\r\n * @example <caption>Attach 'hello.txt' with content 'Hello World' to itemId 12</caption>\r\n * list.addAttachment(12, 'hello.txt', 'Hello World').then(function() { console.log\"Success\") });\r\n */\r\nList.prototype.addAttachment = function(itemId, filename, content, requestDigest) {\r\n\tif (requestDigest) return this._addAttachment(itemId, filename, content, requestDigest);\r\n\treturn this._dao.getRequestDigest().then(requestDigest => {\r\n\t\treturn this._addAttachment(itemId, filename, content, requestDigest)\r\n\t});\r\n};\r\n\r\nList.prototype._addAttachment = function(itemId, filename, content, requestDigest) {\r\n\tvar customOptions = {\r\n\t\theaders: headers.getFilestreamHeaders(requestDigest),\r\n\t\tdata: content\r\n\t};\r\n\treturn this._dao.post(this.baseUrl + \"/items(\" + itemId + \")/AttachmentFiles/add(FileName='\" + filename + \"')\", null, customOptions)\r\n};\r\n\r\n/**\r\n * Delete attachment of an item in the list\r\n * @param {int} itemId - The SharePoint Id of the item to update\r\n * @param {string} filename - Filename to be deleted in SharePoint\r\n * @returns {Promise} - A Promise\r\n * @example <caption>Delete attachment 'hello.txt' in itemId 12</caption>\r\n * list.deleteAttachment(12, 'hello.txt').then(function() { console.log\"Success\") });\r\n */\r\nList.prototype.deleteAttachment = function(itemId, filename, requestDigest) {\r\n\tif (requestDigest) return this._deleteAttachment(itemId, filename, requestDigest);\r\n\treturn this._dao.getRequestDigest().then(requestDigest => {\r\n\t\treturn this._deleteAttachment(itemId, filename, requestDigest)\r\n\t});\r\n}\r\nList.prototype._deleteAttachment = function(itemId, filename, requestDigest) {\r\n\treturn this._dao.get(this.baseUrl).then(data => {\r\n\t\tvar customOptions = {\r\n\t\t\theaders: {\r\n\t\t\t\t'Accept': 'application/json;odata=verbose',\r\n\t\t\t\t'X-RequestDigest': requestDigest,\r\n\t\t\t\t'X-HTTP-Method': \"DELETE\"\r\n\t\t\t}\r\n\t\t};\r\n\t\treturn this._dao.post(this.baseUrl + \"/items(\" + itemId + \")/AttachmentFiles('\" + filename + \"')\", null, customOptions)\r\n\t});\r\n}\r\n\r\n/**\r\n * Retrieves items in the list based on the value of a column\r\n * @param {string} key - The column name\r\n * @param {string} value - The column value to match on\r\n * @param {string} [odata] - OData string\r\n * @returns {Promise<Array>} - A Promise that resolves an array of list items\r\n * @example <caption>Get all items whose status is \"In Progress\"</caption>\r\n * list.findItems(\"Status\", \"In Progress\").then(function(items) { console.log(items) });\r\n * @example <caption>Get first 5 items whose Yes/No field is 'Yes'</caption>\r\n * list.getItems(\"MyYesNoField\", true, \"$top=5\").then(function(items) { console.log(items) });\r\n */\r\nList.prototype.findItems = function(key, value, extraOData) {\r\n\t//if its a string, wrap in single quotes\r\n\tvar filterValue = typeof value === \"string\" ? \"'\" + value + \"'\" : value;\r\n\tvar odata = \"$filter=\" + key + \" eq \" + filterValue + appendOData(extraOData, \"&\");\r\n\r\n\treturn this.getItems(odata);\r\n};\r\n\r\n/**\r\n * Retrieves the first list item that matches the column value you pass\r\n * @param {string} key - The column name\r\n * @param {string} value - The column value to match on\r\n * @param {string} [odata] - OData string\r\n * @returns {Promise} - A Promise that resolves to a list items\r\n * @example <caption>The first item whose Title is \"TODO\"</caption>\r\n * list.findItem(\"Title\", \"TODO\").then(function(item) { console.log(item) });\r\n */\r\nList.prototype.findItem = function(key, value, odata) {\r\n\treturn this.findItems(key, value, odata).then(items => {\r\n\t\tif (items && items.length && items.length > 0) {\r\n\t\t\treturn items[0];\r\n\t\t}\r\n\t\treturn null;\r\n\t});\r\n};\r\n\r\nvar appendOData = function(odata, prefix) {\r\n\tprefix = prefix || \"?\";\r\n\tif (odata) return prefix + odata;\r\n\treturn \"\";\r\n};\r\n\r\nmodule.exports = List;"]}