{"version":3,"sources":["../src/list.js"],"names":[],"mappings":"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","file":"list.js","sourcesContent":["var utils = require(\"./utils\");\r\nvar Permissions = require(\"./permissions\");\r\nvar headers = require(\"./requestHeaders\");\r\n\r\n/**\r\n * Represents a SharePoint list. You shouldn't ever be new'ing this class up up yourself, instead you'll get it from your dao as shown in first example.\r\n * @class\r\n * @param {IBaseDao} dao - Data access object used to make requests.\r\n * @property {Permissions} permissions - allows checking security information of the Web\r\n * @property {string} baseUrl - API relative url (value = \"/web\")\r\n * @example <caption>You access a 'List' by passing a name to the 'lists' property of the dao.</caption>\r\n * var dao = new SPScript.RestDao(_spPageContextInfo.webAbsoluteUrl);\r\n * var list = dao.lists(\"Tasks\");\r\n * list.getItemById(12).then(function(item) { console.log(item) });\r\n */\r\nvar List = function(listname, dao) {\r\n\tthis.listname = listname;\r\n\tthis.baseUrl = \"/web/lists/getbytitle('\" + listname + \"')\";\r\n\tthis._dao = dao;\r\n\tthis.permissions = new Permissions(this.baseUrl, this._dao);\r\n};\r\n\r\n/**\r\n * Retrieves items in the lists\r\n * @param {string} [odata] - OData string\r\n * @returns {Promise<Array>} - A Promise that resolves an array of list items\r\n * @example <caption>Get all items</caption>\r\n * list.getItems().then(function(items) { console.log(items) });\r\n * @example <caption>Get first 5 items by passing in optional OData.</caption>\r\n * list.getItems(\"$top=5\").then(function(items) { console.log(items) });\r\n */\r\nList.prototype.getItems = function(odataQuery) {\r\n\treturn this._dao\r\n\t\t.get(this.baseUrl + \"/items\" + appendOData(odataQuery))\r\n\t\t.then(utils.validateODataV2);\r\n};\r\n\r\n/**\r\n * Retrieves a specific item based on SharePoint ID\r\n * @param {int} id - SharePoint integer Id\r\n * @param {string} [odata] - OData string\r\n * @returns {Promise} - A Promise that resolves to a single list item\r\n * @example <caption>Get the item with ID of 5.</caption>\r\n * list.getItemById(5).then(function(item) { console.log(item) });\r\n * @example <caption>Only bring back 'Title' and 'Status' using optional OData string</caption>\r\n * list.getItemById(5, \"$select=Title,Status\").then(function(items) { console.log(items) });\r\n */\r\nList.prototype.getItemById = function(id, odata) {\r\n\tvar url = this.baseUrl + \"/items(\" + id + \")\" + appendOData(odata);\r\n\treturn this._dao.get(url).then(utils.validateODataV2);\r\n};\r\n\r\n/**\r\n * Retrieves basic information about the list\r\n * @returns {Promise<SP.Web>} - A Promise that resolves to an object containing non-deferred properties of an SP.List (https://msdn.microsoft.com/en-us/library/office/jj244873.aspx)\r\n * @example\r\n * list.info().then(function(info) { console.log(info) });\r\n */\r\nList.prototype.info = function() {\r\n\treturn this._dao.get(this.baseUrl).then(utils.validateODataV2);\r\n};\r\n\r\n/**\r\n * Creates a SharePoint list item\r\n * @param {object} item - Javascript object representing the list item\r\n * @param {string} [requestDigest] - Optional request digest token used to authorize the action. One will be automatically retrieved if not provided.\r\n * @returns {Promise} - A Promise that resolves to the inserted list item\r\n * @example <caption>Add a list item. Set Title and Status.</caption>\r\n * var newItem = {\r\n *    Title: \"Test Created Item\",\r\n *    MyStatus: \"Red\"\r\n * };\r\n * list.addItem(newItem).then(function(item) { console.log(item) });\r\n */\r\n\r\nList.prototype.addItem = function(item, digest) {\r\n\treturn this._dao.ensureRequestDigest(digest).then(digest => {\r\n\t\treturn this._dao.get(this.baseUrl).then(data => {\r\n\r\n\t\t\t\t//decorate the item with the 'type' metadata\r\n\t\t\t\titem = Object.assign({}, {\r\n\t\t\t\t\t\"__metadata\": {\r\n\t\t\t\t\t\t\"type\": data.d.ListItemEntityTypeFullName\r\n\t\t\t\t\t}\r\n\t\t\t\t}, item);\r\n\r\n\t\t\t\tvar customOptions = {\r\n\t\t\t\t\theaders: headers.getAddHeaders(digest)\r\n\t\t\t\t};\r\n\t\t\t\treturn this._dao.post(this.baseUrl + \"/items\", item, customOptions)\r\n\t\t\t})\r\n\t\t\t.then(utils.validateODataV2);\r\n\t})\r\n};\r\n\r\n/**\r\n * Updates a SharePoint list item\r\n * @param {int} itemId - The SharePoint Id of the item to update\r\n * @param {object} updates - Javascript object representing columns you want to update\r\n * @param {string} [requestDigest] - Optional request digest token used to authorize the action. One will be automatically retrieved if not provided.\r\n * @returns {Promise} - A Promise\r\n * @example <caption>Update the item's Title</caption>\r\n * var updates = {\r\n *    Title: \"Updated Title\"\r\n * };\r\n * list.updateItem(12, updates).then(function() { console.log\"Success\") });\r\n */\r\nList.prototype.updateItem = function(itemId, updates, digest) {\r\n\treturn this._dao.ensureRequestDigest(digest).then(digest => {\r\n\t\treturn this.getItemById(itemId).then(item => {\r\n\t\t\t//decorate the item with the 'type' metadata\r\n\t\t\tupdates = Object.assign({}, {\r\n\t\t\t\t\"__metadata\": {\r\n\t\t\t\t\t\"type\": item.__metadata.type\r\n\t\t\t\t}\r\n\t\t\t}, updates);\r\n\r\n\t\t\tvar customOptions = {\r\n\t\t\t\theaders: headers.getUpdateHeaders(digest, item.__metadata.etag)\r\n\t\t\t};\r\n\r\n\t\t\treturn this._dao.post(item.__metadata.uri, updates, customOptions);\r\n\t\t});\r\n\t})\r\n};\r\n\r\n/**\r\n * Updates a SharePoint list item\r\n * @param {int} itemId - The SharePoint Id of the item to update\r\n * @param {string} [requestDigest] - Optional request digest token used to authorize the action. One will be automatically retrieved if not provided.\r\n * @returns {Promise} - A Promise\r\n * @example <caption>Delete the item with an ID of 12</caption>\r\n * list.deleteItem(12).then(function() { console.log\"Success\") });\r\n */\r\nList.prototype.deleteItem = function(itemId, digest) {\r\n\treturn this._dao.ensureRequestDigest(digest).then(digest => {\r\n\t\treturn this.getItemById(itemId).then(item => {\r\n\t\t\tvar customOptions = {\r\n\t\t\t\theaders: headers.getDeleteHeaders(digest, item.__metadata.etag)\r\n\t\t\t};\r\n\t\t\treturn this._dao.post(item.__metadata.uri, \"\", customOptions);\r\n\t\t});\r\n\t});\r\n};\r\n\r\n/**\r\n * Attach file to an item in the list\r\n * @param {int} itemId - The SharePoint Id of the item to update\r\n * @param {string} filename - Filename to be put in SharePoint\r\n * @param {string} content - File content\r\n * @returns {Promise} - A Promise\r\n * @example <caption>Attach 'hello.txt' with content 'Hello World' to itemId 12</caption>\r\n * list.addAttachment(12, 'hello.txt', 'Hello World').then(function() { console.log\"Success\") });\r\n */\r\nList.prototype.addAttachment = function(itemId, filename, content, requestDigest) {\r\n\tif (requestDigest) return this._addAttachment(itemId, filename, content, requestDigest);\r\n\treturn this._dao.getRequestDigest().then(requestDigest => {\r\n\t\treturn this._addAttachment(itemId, filename, content, requestDigest)\r\n\t});\r\n};\r\n\r\nList.prototype._addAttachment = function(itemId, filename, content, requestDigest) {\r\n\tvar customOptions = {\r\n\t\theaders: headers.getFilestreamHeaders(requestDigest),\r\n\t\tdata: content\r\n\t};\r\n\treturn this._dao.post(this.baseUrl + \"/items(\" + itemId + \")/AttachmentFiles/add(FileName='\" + filename + \"')\", null, customOptions)\r\n};\r\n\r\n/**\r\n * Delete attachment of an item in the list\r\n * @param {int} itemId - The SharePoint Id of the item to update\r\n * @param {string} filename - Filename to be deleted in SharePoint\r\n * @returns {Promise} - A Promise\r\n * @example <caption>Delete attachment 'hello.txt' in itemId 12</caption>\r\n * list.deleteAttachment(12, 'hello.txt').then(function() { console.log\"Success\") });\r\n */\r\nList.prototype.deleteAttachment = function(itemId, filename, requestDigest) {\r\n\tif (requestDigest) return this._deleteAttachment(itemId, filename, requestDigest);\r\n\treturn this._dao.getRequestDigest().then(requestDigest => {\r\n\t\treturn this._deleteAttachment(itemId, filename, requestDigest)\r\n\t});\r\n}\r\nList.prototype._deleteAttachment = function(itemId, filename, requestDigest) {\r\n\treturn this._dao.get(this.baseUrl).then(data => {\r\n\t\tvar customOptions = {\r\n\t\t\theaders: {\r\n\t\t\t\t'Accept': 'application/json;odata=verbose',\r\n\t\t\t\t'X-RequestDigest': requestDigest,\r\n\t\t\t\t'X-HTTP-Method': \"DELETE\"\r\n\t\t\t}\r\n\t\t};\r\n\t\treturn this._dao.post(this.baseUrl + \"/items(\" + itemId + \")/AttachmentFiles('\" + filename + \"')\", null, customOptions)\r\n\t});\r\n}\r\n\r\n/**\r\n * Retrieves items in the list based on the value of a column\r\n * @param {string} key - The column name\r\n * @param {string} value - The column value to match on\r\n * @param {string} [odata] - OData string\r\n * @returns {Promise<Array>} - A Promise that resolves an array of list items\r\n * @example <caption>Get all items whose status is \"In Progress\"</caption>\r\n * list.findItems(\"Status\", \"In Progress\").then(function(items) { console.log(items) });\r\n * @example <caption>Get first 5 items whose Yes/No field is 'Yes'</caption>\r\n * list.getItems(\"MyYesNoField\", true, \"$top=5\").then(function(items) { console.log(items) });\r\n */\r\nList.prototype.findItems = function(key, value, extraOData) {\r\n\t//if its a string, wrap in single quotes\r\n\tvar filterValue = typeof value === \"string\" ? \"'\" + value + \"'\" : value;\r\n\tvar odata = \"$filter=\" + key + \" eq \" + filterValue + appendOData(extraOData, \"&\");\r\n\r\n\treturn this.getItems(odata);\r\n};\r\n\r\n/**\r\n * Retrieves the first list item that matches the column value you pass\r\n * @param {string} key - The column name\r\n * @param {string} value - The column value to match on\r\n * @param {string} [odata] - OData string\r\n * @returns {Promise} - A Promise that resolves to a list items\r\n * @example <caption>The first item whose Title is \"TODO\"</caption>\r\n * list.findItem(\"Title\", \"TODO\").then(function(item) { console.log(item) });\r\n */\r\nList.prototype.findItem = function(key, value, odata) {\r\n\treturn this.findItems(key, value, odata).then(items => {\r\n\t\tif (items && items.length && items.length > 0) {\r\n\t\t\treturn items[0];\r\n\t\t}\r\n\t\treturn null;\r\n\t});\r\n};\r\n\r\nvar appendOData = function(odata, prefix) {\r\n\tprefix = prefix || \"?\";\r\n\tif (odata) return prefix + odata;\r\n\treturn \"\";\r\n};\r\n\r\nmodule.exports = List;"]}