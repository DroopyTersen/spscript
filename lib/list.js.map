{"version":3,"sources":["../src/list.js"],"names":["utils","require","Permissions","headers","List","listname","dao","baseUrl","_dao","permissions","prototype","getFields","odataQuery","url","appendOData","get","then","validateODataV2","getField","fieldName","fields","length","Error","updateField","updates","f","Id","__metadata","type","authorizedPost","getItems","getItemById","id","odata","info","addItem","item","digest","ensureRequestDigest","data","d","ListItemEntityTypeFullName","customOptions","getAddHeaders","post","updateItem","itemId","getUpdateHeaders","etag","uri","deleteItem","getDeleteHeaders","addAttachment","filename","content","requestDigest","_addAttachment","getRequestDigest","getFilestreamHeaders","deleteAttachment","_deleteAttachment","findItems","key","value","extraOData","filterValue","findItem","items","prefix","module","exports"],"mappings":"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","file":"list.js","sourcesContent":["var utils = require(\"./utils\");\r\nvar Permissions = require(\"./permissions\");\r\nvar headers = require(\"./requestHeaders\");\r\n\r\n/**\r\n * Represents a SharePoint list. You shouldn't ever be new'ing this class up up yourself, instead you'll get it from your dao as shown in first example.\r\n * @class\r\n * @param {IBaseDao} dao - Data access object used to make requests.\r\n * @property {Permissions} permissions - allows checking security information of the Web\r\n * @property {string} baseUrl - API relative url (value = \"/web\")\r\n * @example <caption>You access a 'List' by passing a name to the 'lists' property of the dao.</caption>\r\n * var dao = new SPScript.RestDao(_spPageContextInfo.webAbsoluteUrl);\r\n * var list = dao.lists(\"Tasks\");\r\n * list.getItemById(12).then(function(item) { console.log(item) });\r\n */\r\nvar List = function(listname, dao) {\r\n\tthis.listname = listname;\r\n\tthis.baseUrl = \"/web/lists/getbytitle('\" + listname + \"')\";\r\n\tthis._dao = dao;\r\n\tthis.permissions = new Permissions(this.baseUrl, this._dao);\r\n};\r\n\r\nList.prototype.getFields = function(odataQuery) {\r\n\tvar url = (this.baseUrl + \"/fields\" + appendOData(odataQuery));\r\n\treturn this._dao\r\n\t\t.get(url)\r\n\t\t.then(utils.validateODataV2);\r\n};\r\n\r\nList.prototype.getField = function(fieldName) {\r\n\treturn this.getFields(`$filter=InternalName eq '${fieldName}'`).then(fields => {\r\n\t\tif (fields.length) return fields[0];\r\n\t\telse throw new Error(\"Unable to find field: \" + fieldName);\r\n\t})\r\n};\r\n\r\nList.prototype.updateField = function(fieldName, updates) {\r\n\tthis.getField(fieldName).then(f => {\r\n\t\tvar url = `${this.baseUrl}/Fields(guid'${f.Id}')`\r\n\t\tupdates.__metadata = { type: \"SP.Field\" };\r\n\t\treturn this._dao.authorizedPost(url, updates, \"MERGE\");\r\n\t})\r\n}\r\n/**\r\n * Retrieves items in the lists\r\n * @param {string} [odata] - OData string\r\n * @returns {Promise<Array>} - A Promise that resolves an array of list items\r\n * @example <caption>Get all items</caption>\r\n * list.getItems().then(function(items) { console.log(items) });\r\n * @example <caption>Get first 5 items by passing in optional OData.</caption>\r\n * list.getItems(\"$top=5\").then(function(items) { console.log(items) });\r\n */\r\nList.prototype.getItems = function(odataQuery) {\r\n\treturn this._dao\r\n\t\t.get(this.baseUrl + \"/items\" + appendOData(odataQuery))\r\n\t\t.then(utils.validateODataV2);\r\n};\r\n\r\n/**\r\n * Retrieves a specific item based on SharePoint ID\r\n * @param {int} id - SharePoint integer Id\r\n * @param {string} [odata] - OData string\r\n * @returns {Promise} - A Promise that resolves to a single list item\r\n * @example <caption>Get the item with ID of 5.</caption>\r\n * list.getItemById(5).then(function(item) { console.log(item) });\r\n * @example <caption>Only bring back 'Title' and 'Status' using optional OData string</caption>\r\n * list.getItemById(5, \"$select=Title,Status\").then(function(items) { console.log(items) });\r\n */\r\nList.prototype.getItemById = function(id, odata) {\r\n\tvar url = this.baseUrl + \"/items(\" + id + \")\" + appendOData(odata);\r\n\treturn this._dao.get(url).then(utils.validateODataV2);\r\n};\r\n\r\n/**\r\n * Retrieves basic information about the list\r\n * @returns {Promise<SP.Web>} - A Promise that resolves to an object containing non-deferred properties of an SP.List (https://msdn.microsoft.com/en-us/library/office/jj244873.aspx)\r\n * @example\r\n * list.info().then(function(info) { console.log(info) });\r\n */\r\nList.prototype.info = function() {\r\n\treturn this._dao.get(this.baseUrl).then(utils.validateODataV2);\r\n};\r\n\r\n/**\r\n * Creates a SharePoint list item\r\n * @param {object} item - Javascript object representing the list item\r\n * @param {string} [requestDigest] - Optional request digest token used to authorize the action. One will be automatically retrieved if not provided.\r\n * @returns {Promise} - A Promise that resolves to the inserted list item\r\n * @example <caption>Add a list item. Set Title and Status.</caption>\r\n * var newItem = {\r\n *    Title: \"Test Created Item\",\r\n *    MyStatus: \"Red\"\r\n * };\r\n * list.addItem(newItem).then(function(item) { console.log(item) });\r\n */\r\n\r\nList.prototype.addItem = function(item, digest) {\r\n\treturn this._dao.ensureRequestDigest(digest).then(digest => {\r\n\t\treturn this._dao.get(this.baseUrl).then(data => {\r\n\r\n\t\t\t\t//decorate the item with the 'type' metadata\r\n\t\t\t\titem = Object.assign({}, {\r\n\t\t\t\t\t\"__metadata\": {\r\n\t\t\t\t\t\t\"type\": data.d.ListItemEntityTypeFullName\r\n\t\t\t\t\t}\r\n\t\t\t\t}, item);\r\n\r\n\t\t\t\tvar customOptions = {\r\n\t\t\t\t\theaders: headers.getAddHeaders(digest)\r\n\t\t\t\t};\r\n\t\t\t\treturn this._dao.post(this.baseUrl + \"/items\", item, customOptions)\r\n\t\t\t})\r\n\t\t\t.then(utils.validateODataV2);\r\n\t})\r\n};\r\n\r\n/**\r\n * Updates a SharePoint list item\r\n * @param {int} itemId - The SharePoint Id of the item to update\r\n * @param {object} updates - Javascript object representing columns you want to update\r\n * @param {string} [requestDigest] - Optional request digest token used to authorize the action. One will be automatically retrieved if not provided.\r\n * @returns {Promise} - A Promise\r\n * @example <caption>Update the item's Title</caption>\r\n * var updates = {\r\n *    Title: \"Updated Title\"\r\n * };\r\n * list.updateItem(12, updates).then(function() { console.log\"Success\") });\r\n */\r\nList.prototype.updateItem = function(itemId, updates, digest) {\r\n\treturn this._dao.ensureRequestDigest(digest).then(digest => {\r\n\t\treturn this.getItemById(itemId).then(item => {\r\n\t\t\t//decorate the item with the 'type' metadata\r\n\t\t\tupdates = Object.assign({}, {\r\n\t\t\t\t\"__metadata\": {\r\n\t\t\t\t\t\"type\": item.__metadata.type\r\n\t\t\t\t}\r\n\t\t\t}, updates);\r\n\r\n\t\t\tvar customOptions = {\r\n\t\t\t\theaders: headers.getUpdateHeaders(digest, item.__metadata.etag)\r\n\t\t\t};\r\n\r\n\t\t\treturn this._dao.post(item.__metadata.uri, updates, customOptions);\r\n\t\t});\r\n\t})\r\n};\r\n\r\n/**\r\n * Updates a SharePoint list item\r\n * @param {int} itemId - The SharePoint Id of the item to update\r\n * @param {string} [requestDigest] - Optional request digest token used to authorize the action. One will be automatically retrieved if not provided.\r\n * @returns {Promise} - A Promise\r\n * @example <caption>Delete the item with an ID of 12</caption>\r\n * list.deleteItem(12).then(function() { console.log\"Success\") });\r\n */\r\nList.prototype.deleteItem = function(itemId, digest) {\r\n\treturn this._dao.ensureRequestDigest(digest).then(digest => {\r\n\t\treturn this.getItemById(itemId).then(item => {\r\n\t\t\tvar customOptions = {\r\n\t\t\t\theaders: headers.getDeleteHeaders(digest, item.__metadata.etag)\r\n\t\t\t};\r\n\t\t\treturn this._dao.post(item.__metadata.uri, \"\", customOptions);\r\n\t\t});\r\n\t});\r\n};\r\n\r\n/**\r\n * Attach file to an item in the list\r\n * @param {int} itemId - The SharePoint Id of the item to update\r\n * @param {string} filename - Filename to be put in SharePoint\r\n * @param {string} content - File content\r\n * @returns {Promise} - A Promise\r\n * @example <caption>Attach 'hello.txt' with content 'Hello World' to itemId 12</caption>\r\n * list.addAttachment(12, 'hello.txt', 'Hello World').then(function() { console.log\"Success\") });\r\n */\r\nList.prototype.addAttachment = function(itemId, filename, content, requestDigest) {\r\n\tif (requestDigest) return this._addAttachment(itemId, filename, content, requestDigest);\r\n\treturn this._dao.getRequestDigest().then(requestDigest => {\r\n\t\treturn this._addAttachment(itemId, filename, content, requestDigest)\r\n\t});\r\n};\r\n\r\nList.prototype._addAttachment = function(itemId, filename, content, requestDigest) {\r\n\tvar customOptions = {\r\n\t\theaders: headers.getFilestreamHeaders(requestDigest),\r\n\t\tdata: content\r\n\t};\r\n\treturn this._dao.post(this.baseUrl + \"/items(\" + itemId + \")/AttachmentFiles/add(FileName='\" + filename + \"')\", null, customOptions)\r\n};\r\n\r\n/**\r\n * Delete attachment of an item in the list\r\n * @param {int} itemId - The SharePoint Id of the item to update\r\n * @param {string} filename - Filename to be deleted in SharePoint\r\n * @returns {Promise} - A Promise\r\n * @example <caption>Delete attachment 'hello.txt' in itemId 12</caption>\r\n * list.deleteAttachment(12, 'hello.txt').then(function() { console.log\"Success\") });\r\n */\r\nList.prototype.deleteAttachment = function(itemId, filename, requestDigest) {\r\n\tif (requestDigest) return this._deleteAttachment(itemId, filename, requestDigest);\r\n\treturn this._dao.getRequestDigest().then(requestDigest => {\r\n\t\treturn this._deleteAttachment(itemId, filename, requestDigest)\r\n\t});\r\n}\r\nList.prototype._deleteAttachment = function(itemId, filename, requestDigest) {\r\n\treturn this._dao.get(this.baseUrl).then(data => {\r\n\t\tvar customOptions = {\r\n\t\t\theaders: {\r\n\t\t\t\t'Accept': 'application/json;odata=verbose',\r\n\t\t\t\t'X-RequestDigest': requestDigest,\r\n\t\t\t\t'X-HTTP-Method': \"DELETE\"\r\n\t\t\t}\r\n\t\t};\r\n\t\treturn this._dao.post(this.baseUrl + \"/items(\" + itemId + \")/AttachmentFiles('\" + filename + \"')\", null, customOptions)\r\n\t});\r\n}\r\n\r\n/**\r\n * Retrieves items in the list based on the value of a column\r\n * @param {string} key - The column name\r\n * @param {string} value - The column value to match on\r\n * @param {string} [odata] - OData string\r\n * @returns {Promise<Array>} - A Promise that resolves an array of list items\r\n * @example <caption>Get all items whose status is \"In Progress\"</caption>\r\n * list.findItems(\"Status\", \"In Progress\").then(function(items) { console.log(items) });\r\n * @example <caption>Get first 5 items whose Yes/No field is 'Yes'</caption>\r\n * list.getItems(\"MyYesNoField\", true, \"$top=5\").then(function(items) { console.log(items) });\r\n */\r\nList.prototype.findItems = function(key, value, extraOData) {\r\n\t//if its a string, wrap in single quotes\r\n\tvar filterValue = typeof value === \"string\" ? \"'\" + value + \"'\" : value;\r\n\tvar odata = \"$filter=\" + key + \" eq \" + filterValue + appendOData(extraOData, \"&\");\r\n\r\n\treturn this.getItems(odata);\r\n};\r\n\r\n/**\r\n * Retrieves the first list item that matches the column value you pass\r\n * @param {string} key - The column name\r\n * @param {string} value - The column value to match on\r\n * @param {string} [odata] - OData string\r\n * @returns {Promise} - A Promise that resolves to a list items\r\n * @example <caption>The first item whose Title is \"TODO\"</caption>\r\n * list.findItem(\"Title\", \"TODO\").then(function(item) { console.log(item) });\r\n */\r\nList.prototype.findItem = function(key, value, odata) {\r\n\treturn this.findItems(key, value, odata).then(items => {\r\n\t\tif (items && items.length && items.length > 0) {\r\n\t\t\treturn items[0];\r\n\t\t}\r\n\t\treturn null;\r\n\t});\r\n};\r\n\r\nvar appendOData = function(odata, prefix) {\r\n\tprefix = prefix || \"?\";\r\n\tif (odata) return prefix + odata;\r\n\treturn \"\";\r\n};\r\n\r\nmodule.exports = List;"]}