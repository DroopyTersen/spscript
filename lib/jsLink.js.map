{"version":3,"sources":["../src/jsLink.js"],"names":[],"mappings":";;;;AAAA,IAAI,aAAa,QAAQ,mBAAR,EAA6B,UAA9C;;AAEA,IAAI,iBAAiB,QAAQ,cAAR,GAAyB,UAAS,YAAT,EAAuB;AACjE,WAAO,UAAS,GAAT,EAAc;AACjB,eAAO,WAAW,cAAX,CAA0B,YAA1B,EAAwC,GAAxC,CAAP;AACH,KAFD;AAGH,CAJD;;AAMA,IAAI,gBAAgB,QAAQ,aAAR,GAAwB,UAAS,SAAT,EAAoB,SAApB,EAA+B,OAA/B,EAAwC;;AAEhF,QAAI,WAAW;AACX,mBAAW;AACP,oBAAQ;AADD;AADA,KAAf;AAKA,QAAI,mBAAmB,SAAc,EAAd,EAAkB,QAAlB,EAA4B,OAA5B,CAAvB;AACA,qBAAiB,SAAjB,CAA2B,MAA3B,CAAkC,SAAlC,IAA+C,SAA/C;AACA,sBAAkB,eAAlB,CAAkC,yBAAlC,CAA4D,gBAA5D;AACH,CAVD;;;;;;;;AAkBA,IAAI,oBAAoB,QAAQ,iBAAR,GAA4B,UAAS,QAAT,EAAmB,MAAnB,EAA2B;AAC3E,WAAO,UAAS,GAAT,EAAc;AACjB,YAAI,UAAU,kBAAkB,OAAlB,CAA0B,6BAA1B,CAAwD,GAAxD,CAAd;AACA,gBAAQ,wBAAR,CAAiC,QAAQ,SAAzC,EAAoD,OAAO,IAAP,CAAY,IAAZ,EAAkB,OAAlB,CAApD;AACA,eAAO,SAAS,GAAT,CAAP;AACH,KAJD;AAKH,CAND;;AAQA,IAAI,oBAAoB,QAAQ,iBAAR,GAA4B,UAAS,SAAT,EAAoB,QAApB,EAA8B,MAA9B,EAAsC;AACtF,QAAI,eAAe,kBAAkB,QAAlB,EAA4B,MAA5B,CAAnB;AACA,kBAAc,SAAd,EAAyB;AACrB,mBAAW,YADU;AAErB,oBAAY;AAFS,KAAzB;AAIH,CAND;;AAQA,IAAI,eAAe,QAAQ,YAAR,GAAuB,UAAS,SAAT,EAAoB,OAApB,EAA6B;;;AAGnE,QAAI,WAAW;;;AAGX,mBAAW;AACP,oBAAQ,kBAAW;AAAE,uBAAO,EAAP;AAAW,aADzB;AAEP,oBAAQ,kBAAW;AAAE,uBAAO,EAAP;AAAW;AAFzB;AAHA,KAAf;;AASA,QAAI,mBAAmB,SAAc,EAAd,EAAkB,QAAlB,EAA4B,OAA5B,CAAvB;AACA,qBAAiB,SAAjB,GAA6B,SAAc,EAAd,EAAkB,iBAAiB,SAAnC,EAA8C,SAA9C,CAA7B;;AAEA,sBAAkB,eAAlB,CAAkC,yBAAlC,CAA4D,gBAA5D;AACH,CAhBD","file":"jsLink.js","sourcesContent":["var templating = require(\"droopy-templating\").templating;\r\n\r\nvar createRenderer = exports.createRenderer = function(htmlTemplate) {\r\n    return function(ctx) {\r\n        return templating.renderTemplate(htmlTemplate, ctx);\r\n    }\r\n};\r\n\r\nvar registerField = exports.registerField = function(fieldName, renderers, options) {\r\n    //View, DisplayForm, EditForm, NewForm\r\n    var defaults = {\r\n        Templates: {\r\n            Fields: {}\r\n        }\r\n    };\r\n    var templateOverride = Object.assign({}, defaults, options);\r\n    templateOverride.Templates.Fields[fieldName] = renderers;\r\n    SPClientTemplates.TemplateManager.RegisterTemplateOverrides(templateOverride);\r\n};\r\n\r\n/**\r\n* Returns a function that can be passed in as Edit/New form template function.\r\n* It does the work of registering the getValue callback\r\n* @param {function} renderer - Function that takes in ctx and returns html\r\n* @param {function} getter - function to get the value of the field you are overriding\r\n*/\r\nvar createEditControl = exports.createEditControl = function(renderer, getter) {\r\n    return function(ctx) {\r\n        var formCtx = SPClientTemplates.Utility.GetFormContextForCurrentField(ctx); \r\n        formCtx.registerGetValueCallback(formCtx.fieldName, getter.bind(null, formCtx));\r\n        return renderer(ctx);\r\n    };\r\n};\r\n\r\nvar registerEditField = exports.registerEditField = function(fieldName, renderer, getter) {\r\n    var formRenderer = createEditControl(renderer, getter);\r\n    registerField(fieldName, {\r\n        \"NewForm\": formRenderer,\r\n        \"EditForm\": formRenderer\r\n    });\r\n};\r\n\r\nvar registerView = exports.registerView = function(templates, options) {\r\n    // templates keys are Header, Item, Footer\r\n    //RenderFieldTemplateDefault(ctx); default renderer?\r\n    var defaults = {\r\n        //BaseViewID\r\n        //ListTemplateType\r\n        Templates: {\r\n            Header: function() { return \"\" },\r\n            Footer: function() { return \"\" }\r\n        }\r\n    }\r\n\r\n    var templateOverride = Object.assign({}, defaults, options);\r\n    templateOverride.Templates = Object.assign({}, templateOverride.Templates, templates);\r\n\r\n    SPClientTemplates.TemplateManager.RegisterTemplateOverrides(templateOverride);\r\n}"]}