{"version":3,"sources":["../src/profiles.js"],"names":[],"mappings":";;AAAA,IAAI,QAAU,QAAQ,SAAR,CAAd;AACA,IAAI,UAAW,QAAQ,kBAAR,CAAf;;;;;;;;;;AAUA,IAAI,WAAW,SAAX,QAAW,CAAS,GAAT,EAAc;AAC5B,MAAK,IAAL,GAAY,GAAZ;AACA,MAAK,OAAL,GAAe,gCAAf;AACA,CAHD;;AAKA,IAAI,4BAA4B,SAA5B,yBAA4B,CAAS,OAAT,EAAkB;AACjD,SAAQ,qBAAR,CAA8B,OAA9B,CAAsC,OAAtC,CAA8C,oBAAY;AACzD,UAAQ,SAAS,GAAjB,IAAwB,SAAS,KAAjC;AACA,EAFD;AAGA,QAAO,OAAP;AACA,CALD;;;;;;;;AAaA,SAAS,SAAT,CAAmB,OAAnB,GAA6B,YAAW;AACvC,KAAI,MAAM,KAAK,OAAL,GAAe,kBAAzB;AACA,QAAO,KAAK,IAAL,CAAU,GAAV,CAAc,GAAd,EACH,IADG,CACE,MAAM,eADR,EAEH,IAFG,CAEE,yBAFF,CAAP;AAGA,CALD;;;;;;;;;;;;AAiBA,SAAS,SAAT,CAAmB,WAAnB,GAAiC,UAAS,WAAT,EAAsB,GAAtB,EAA2B,KAA3B,EAAkC,MAAlC,EAA0C;AAAA;;AAC1E,QAAO,KAAK,IAAL,CAAU,mBAAV,CAA8B,MAA9B,EAAsC,IAAtC,CAA2C,kBAAU;AAC3D,MAAI,MAAM,MAAK,OAAL,GAAe,gCAAzB;AACA,MAAI,OAAO;AACV,iBAAc,GADJ;AAEV,kBAAe;AAFL,GAAX;;AAKA,MAAI,gBAAgB;AACnB,YAAS,QAAQ,kBAAR,CAA2B,MAA3B;AADU,GAApB;;;AAKA,MAAI,OAAO,WAAP,KAAuB,QAA3B,EAAqC;AACpC,UAAO,MAAK,UAAL,CAAgB,WAAhB,EAA6B,IAA7B,CAAkC,gBAAQ;AAChD,SAAK,WAAL,GAAmB,KAAK,WAAxB;AACA,WAAO,MAAK,IAAL,CAAU,IAAV,CAAe,GAAf,EAAoB,IAApB,EAA0B,aAA1B,CAAP;AACA,IAHM,CAAP;AAIA,GALD,MAKO;AACN,QAAK,WAAL,GAAmB,YAAY,SAAZ,IAAyB,YAAY,WAAxD;AACA,UAAO,MAAK,IAAL,CAAU,IAAV,CAAe,GAAf,EAAoB,IAApB,EAA0B,aAA1B,CAAP;AACA;AACD,EArBM,CAAP;AAuBA,CAxBD;;AA0BA,SAAS,SAAT,CAAmB,UAAnB,GAAgC,UAAS,IAAT,EAAe;AAC9C,KAAI,QAAQ,mBAAmB,KAAK,SAAxB,CAAZ;AACA,KAAI,MAAM,KAAK,OAAL,GAAe,wCAAf,GAA0D,KAA1D,GAAkE,GAA5E;AACA,QAAO,KAAK,IAAL,CAAU,GAAV,CAAc,GAAd,EACL,IADK,CACA,MAAM,eADN,EAEL,IAFK,CAEA,yBAFA,CAAP;AAGA,CAND;;;;;;;;;;AAgBA,SAAS,SAAT,CAAmB,UAAnB,GAAgC,UAAS,KAAT,EAAgB;AAAA;;AAC/C,QAAO,KAAK,IAAL,CAAU,GAAV,CAAc,OAAd,CAAsB,KAAtB,EAA6B,IAA7B,CAAkC;AAAA,SAAQ,OAAK,UAAL,CAAgB,IAAhB,CAAR;AAAA,EAAlC,CAAP;AACA,CAFD;;AAIA,OAAO,OAAP,GAAiB,QAAjB","file":"profiles.js","sourcesContent":["var utils \t\t= require(\"./utils\");\r\nvar headers \t= require(\"./requestHeaders\");\r\n\r\n/**\r\n * Allows you to perform queries agains the SP Profile Service. You shouldn't ever be new'ing this class up up yourself, instead you'll get it from your dao as shown in first example.\r\n * @class\r\n * @param {IBaseDao} dao - Data access object used to make requests.\r\n * @example <caption>You access this Profiles class using the 'profiles' property of the dao</caption>\r\n * var dao = new SPScript.RestDao(_spPageContextInfo.webAbsoluteUrl);\r\n * dao.profiles.current().then(function(profile) { console.log(profile) });\r\n */\r\nvar Profiles = function(dao) {\r\n\tthis._dao = dao;\r\n\tthis.baseUrl = \"/SP.UserProfiles.PeopleManager\";\r\n};\r\n\r\nvar transformPersonProperties = function(profile) {\r\n\tprofile.UserProfileProperties.results.forEach(keyvalue => {\r\n\t\tprofile[keyvalue.Key] = keyvalue.Value;\r\n\t});\r\n\treturn profile;\r\n};\r\n\r\n/**\r\n * Gets the profile of the current user\r\n * @returns {Promise} - A Promise that resolves an object containing all the profile properties\r\n * @example\r\n * dao.profiles.current().then(function(profile) { console.log(profile.PreferredName) });\r\n */\r\nProfiles.prototype.current = function() {\r\n\tvar url = this.baseUrl + \"/GetMyProperties\";\r\n\treturn this._dao.get(url)\r\n\t\t\t\t.then(utils.validateODataV2)\r\n\t\t\t\t.then(transformPersonProperties);\r\n};\r\n\r\n/**\r\n * Sets a profile property\r\n * @param {User|string} userOrEmail - Pass in a User object (must have 'AccountName' or 'LoginName') or an email address\r\n * @returns {Promise} - A Promise\r\n * @example\r\n * var email = \"andrew@andrewpetersen.onmicrosoft.com\";\r\n * var aboutMe = \"I am a web developer\";\r\n * dao.profiles.setProperty(email, \"AboutMe\", aboutMe).then(function() { console.log(\"Success\") });\r\n */\r\n// Supports email string or a user object\r\nProfiles.prototype.setProperty = function(userOrEmail, key, value, digest) {\r\n\treturn this._dao.ensureRequestDigest(digest).then(digest => { \r\n\t\tvar url = this.baseUrl + \"/SetSingleValueProfileProperty\";\r\n\t\tvar args = {\r\n\t\t\tpropertyName: key,\r\n\t\t\tpropertyValue: value,\r\n\t\t};\r\n\r\n\t\tvar customOptions = {\r\n\t\t\theaders: headers.getStandardHeaders(digest)\r\n\t\t};\r\n\r\n\t\t// if a string is passed, assume its an email address, otherwise a user was passed\r\n\t\tif (typeof userOrEmail === \"string\") {\r\n\t\t\treturn this.getByEmail(userOrEmail).then(user => {\r\n\t\t\t\targs.accountName = user.AccountName;\r\n\t\t\t\treturn this._dao.post(url, args, customOptions);\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\targs.accountName = userOrEmail.LoginName || userOrEmail.AccountName;\r\n\t\t\treturn this._dao.post(url, args, customOptions);\r\n\t\t}\r\n\t})\r\n\r\n};\r\n\r\nProfiles.prototype.getProfile = function(user) {\r\n\tvar login = encodeURIComponent(user.LoginName);\r\n\tvar url = this.baseUrl + \"/GetPropertiesFor(accountName=@v)?@v='\" + login + \"'\";\r\n\treturn this._dao.get(url)\r\n\t\t.then(utils.validateODataV2)\r\n\t\t.then(transformPersonProperties);\r\n};\r\n\r\n/**\r\n * Gets the profile of the user tied to the specified email\r\n * @returns {Promise} - A Promise that resolves an object containing all the profile properties\r\n * @example\r\n * var email = \"andrew@andrewpetersen.onmicrosoft.com\";\r\n * dao.profiles.getByEmail(email)\r\n *    .then(function(profile) { console.log(profile.PreferredName) });\r\n */\r\nProfiles.prototype.getByEmail = function(email) {\r\n\treturn this._dao.web.getUser(email).then(user => this.getProfile(user));\r\n};\r\n\r\nmodule.exports = Profiles;"]}