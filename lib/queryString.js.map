{"version":3,"sources":["../src/queryString.js"],"names":["qs","require","fromObj","exports","obj","quoteValues","writeParam","key","value","trim","indexOf","str","Object","keys","map","join","toObj","undefined","window","location","search","substr","parse","contains","text","hasOwnProperty","getValue"],"mappings":";;AAAA,IAAIA,KAAKC,QAAQ,aAAR,CAAT;;AAEA;;;;AAIA;;;;;;;;;;;;AAYA,IAAIC,UAAUC,QAAQD,OAAR,GAAkB,UAASE,GAAT,EAAcC,WAAd,EAA2B;;AAE1D,MAAIC,aAAa,SAAbA,UAAa,CAASC,GAAT,EAAc;AAC9B,QAAIC,QAAQ,CAACJ,IAAIG,GAAJ,IAAW,EAAZ,EAAgBE,IAAhB,EAAZ;AACA;AACA,QAAID,MAAME,OAAN,CAAc,GAAd,IAAqB,CAAC,CAAtB,IAA2BL,WAA/B,EAA4CG,QAAQ,MAAMA,KAAN,GAAc,GAAtB;;AAE5C,WAAOD,MAAM,GAAN,GAAYC,KAAnB;AACA,GAND;;AAQA,MAAIG,MAAMC,OAAOC,IAAP,CAAYT,GAAZ,EACLU,GADK,CACDR,UADC,EAELS,IAFK,CAEA,GAFA,CAAV;AAGA,SAAOJ,GAAP;AACA,CAdD;;AAgBA;;;;;;;;;;;AAWA,IAAIK,QAAQb,QAAQa,KAAR,GAAgB,UAASL,GAAT,EAAc;AACzC;AACA,MAAIA,QAAQM,SAAR,IAAqBC,MAArB,IAA+BA,OAAOC,QAAtC,IAAkDD,OAAOC,QAAP,CAAgBC,MAAtE,EAA8E;AAC7ET,UAAMO,OAAOC,QAAP,CAAgBC,MAAtB;AACA;AACD,MAAI,CAACT,GAAL,EAAU,OAAO,EAAP;AACV;AACA,MAAIA,IAAI,CAAJ,MAAW,GAAf,EAAoBA,MAAMA,IAAIU,MAAJ,CAAW,CAAX,CAAN;;AAEpB,SAAOrB,GAAGsB,KAAH,CAASX,GAAT,CAAP;AACA,CAVD;;AAYAR,QAAQoB,QAAR,GAAmB,UAAChB,GAAD,EAAMiB,IAAN;AAAA,SAAeR,MAAMQ,IAAN,EAAYC,cAAZ,CAA2BlB,GAA3B,CAAf;AAAA,CAAnB;AACAJ,QAAQuB,QAAR,GAAmB,UAACnB,GAAD,EAAMiB,IAAN;AAAA,SAAeR,MAAMQ,IAAN,EAAYjB,GAAZ,KAAoB,EAAnC;AAAA,CAAnB","file":"queryString.js","sourcesContent":["var qs = require(\"querystring\");\r\n\r\n/**\r\n* @namespace SPScript.queryString\r\n*/\r\n\r\n/**\r\n * Turns a normal js Object into a string in form of \"key1=value1&key2=value2...\"\r\n * @param {Object} obj - Javascript object to query stringify\r\n * @param {bool} [[quoteValues]] - By default, if the value has a space, it will be single quoted. Passing true will cause all values to be quoted.\r\n * @returns {string} - Note: tt does NOT prepend '?' char\r\n * @function fromObj\r\n * @memberof SPScript.queryString\r\n * @example\r\n * var myObj = { id: 123, title: \"My Title\" }\r\n * var qs = SPScript.queryString.fromObj(myObj);\r\n * // qs would output: \"id=123&title='MyTitle'\"\r\n */\r\nvar fromObj = exports.fromObj = function(obj, quoteValues) {\r\n\r\n\tvar writeParam = function(key) {\r\n\t\tvar value = (obj[key] + \"\").trim();\r\n\t\t// if there is a space, wrap in single quotes\r\n\t\tif (value.indexOf(\" \") > -1 || quoteValues) value = \"'\" + value + \"'\";\r\n\r\n\t\treturn key + \"=\" + value;\r\n\t};\r\n\r\n\tvar str = Object.keys(obj)\r\n\t\t\t\t\t.map(writeParam)\r\n\t\t\t\t\t.join(\"&\");\r\n\treturn str;\r\n};\r\n\r\n/**\r\n * Turns a string in form of \"key1=value1&key2=value2...\" into a javascript object\r\n * @param {string} str - must be in query string format to work\r\n * @returns {Object} - A javascript object with properties for each key found in the query string passed in.\r\n * @function toObj\r\n * @memberof SPScript.queryString\r\n * @example\r\n * // your url is \"https://sharepoint.com/sites/mysite/home.aspx?id=123&title='My Title'\"\r\n * var myObj = SPScript.queryString.toObj(window.location.search);\r\n * //myObj would be { id: 123, title: \"My Title\" }\r\n */\r\nvar toObj = exports.toObj = function(str) {\r\n\t//if no string is passed use window.location.search\r\n\tif (str === undefined && window && window.location && window.location.search) {\r\n\t\tstr = window.location.search;\r\n\t}\r\n\tif (!str) return {};\r\n\t//trim off the leading '?' if its there\r\n\tif (str[0] === \"?\") str = str.substr(1);\r\n\r\n\treturn qs.parse(str);\r\n};\r\n\r\nexports.contains = (key, text) => toObj(text).hasOwnProperty(key);\r\nexports.getValue = (key, text) => toObj(text)[key] || \"\";\r\n"]}