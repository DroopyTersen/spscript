{"version":3,"sources":["../src/queryString.js"],"names":[],"mappings":";;AAAA,IAAI,KAAK,QAAQ,aAAR,CAAT;;;;;;;;;;;;;;;;;;AAkBA,IAAI,UAAU,QAAQ,OAAR,GAAkB,UAAS,GAAT,EAAc,WAAd,EAA2B;;AAE1D,MAAI,aAAa,SAAb,UAAa,CAAS,GAAT,EAAc;AAC9B,QAAI,QAAQ,CAAC,IAAI,GAAJ,IAAW,EAAZ,EAAgB,IAAhB,EAAZ;;AAEA,QAAI,MAAM,OAAN,CAAc,GAAd,IAAqB,CAAC,CAAtB,IAA2B,WAA/B,EAA4C,QAAQ,MAAM,KAAN,GAAc,GAAtB;;AAE5C,WAAO,MAAM,GAAN,GAAY,KAAnB;AACA,GAND;;AAQA,MAAI,MAAM,OAAO,IAAP,CAAY,GAAZ,EACL,GADK,CACD,UADC,EAEL,IAFK,CAEA,GAFA,CAAV;AAGA,SAAO,GAAP;AACA,CAdD;;;;;;;;;;;;;AA2BA,IAAI,QAAQ,QAAQ,KAAR,GAAgB,UAAS,GAAT,EAAc;;AAEzC,MAAI,QAAQ,SAAR,IAAqB,MAArB,IAA+B,OAAO,QAAtC,IAAkD,OAAO,QAAP,CAAgB,MAAtE,EAA8E;AAC7E,UAAM,OAAO,QAAP,CAAgB,MAAtB;AACA;AACD,MAAI,CAAC,GAAL,EAAU,OAAO,EAAP;;AAEV,MAAI,IAAI,CAAJ,MAAW,GAAf,EAAoB,MAAM,IAAI,MAAJ,CAAW,CAAX,CAAN;;AAEpB,SAAO,GAAG,KAAH,CAAS,GAAT,CAAP;AACA,CAVD;;AAYA,QAAQ,QAAR,GAAmB,UAAC,GAAD,EAAM,IAAN;AAAA,SAAe,MAAM,IAAN,EAAY,cAAZ,CAA2B,GAA3B,CAAf;AAAA,CAAnB;AACA,QAAQ,QAAR,GAAmB,UAAC,GAAD,EAAM,IAAN;AAAA,SAAe,MAAM,IAAN,EAAY,GAAZ,KAAoB,EAAnC;AAAA,CAAnB","file":"queryString.js","sourcesContent":["var qs = require(\"querystring\");\r\n\r\n/**\r\n* @namespace SPScript.queryString\r\n*/\r\n\r\n/**\r\n * Turns a normal js Object into a string in form of \"key1=value1&key2=value2...\"\r\n * @param {Object} obj - Javascript object to query stringify\r\n * @param {bool} [[quoteValues]] - By default, if the value has a space, it will be single quoted. Passing true will cause all values to be quoted.\r\n * @returns {string} - Note: tt does NOT prepend '?' char\r\n * @function fromObj\r\n * @memberof SPScript.queryString\r\n * @example\r\n * var myObj = { id: 123, title: \"My Title\" }\r\n * var qs = SPScript.queryString.fromObj(myObj);\r\n * // qs would output: \"id=123&title='MyTitle'\"\r\n */\r\nvar fromObj = exports.fromObj = function(obj, quoteValues) {\r\n\r\n\tvar writeParam = function(key) {\r\n\t\tvar value = (obj[key] + \"\").trim();\r\n\t\t// if there is a space, wrap in single quotes\r\n\t\tif (value.indexOf(\" \") > -1 || quoteValues) value = \"'\" + value + \"'\";\r\n\r\n\t\treturn key + \"=\" + value;\r\n\t};\r\n\r\n\tvar str = Object.keys(obj)\r\n\t\t\t\t\t.map(writeParam)\r\n\t\t\t\t\t.join(\"&\");\r\n\treturn str;\r\n};\r\n\r\n/**\r\n * Turns a string in form of \"key1=value1&key2=value2...\" into a javascript object\r\n * @param {string} str - must be in query string format to work\r\n * @returns {Object} - A javascript object with properties for each key found in the query string passed in.\r\n * @function toObj\r\n * @memberof SPScript.queryString\r\n * @example\r\n * // your url is \"https://sharepoint.com/sites/mysite/home.aspx?id=123&title='My Title'\"\r\n * var myObj = SPScript.queryString.toObj(window.location.search);\r\n * //myObj would be { id: 123, title: \"My Title\" }\r\n */\r\nvar toObj = exports.toObj = function(str) {\r\n\t//if no string is passed use window.location.search\r\n\tif (str === undefined && window && window.location && window.location.search) {\r\n\t\tstr = window.location.search;\r\n\t}\r\n\tif (!str) return {};\r\n\t//trim off the leading '?' if its there\r\n\tif (str[0] === \"?\") str = str.substr(1);\r\n\r\n\treturn qs.parse(str);\r\n};\r\n\r\nexports.contains = (key, text) => toObj(text).hasOwnProperty(key);\r\nexports.getValue = (key, text) => toObj(text)[key] || \"\";\r\n"]}