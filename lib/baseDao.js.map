{"version":3,"sources":["../src/baseDao.js"],"names":[],"mappings":";;;;AACA,IAAI,OAAS,QAAQ,QAAR,CAAb;AACA,IAAI,MAAQ,QAAQ,OAAR,CAAZ;AACA,IAAI,WAAY,QAAQ,YAAR,CAAhB;AACA,IAAI,SAAW,QAAQ,UAAR,CAAf;AACA,IAAI,QAAU,QAAQ,SAAR,CAAd;;;;;;;;;;AAUA,IAAI,UAAU,SAAV,OAAU,GAAW;AACxB,OAAK,GAAL,GAAW,IAAI,GAAJ,CAAQ,IAAR,CAAX;AACA,OAAK,MAAL,GAAc,IAAI,MAAJ,CAAW,IAAX,CAAd;AACA,OAAK,QAAL,GAAgB,IAAI,QAAJ,CAAa,IAAb,CAAhB;AACA,CAJD;;AAMA,QAAQ,SAAR,CAAkB,cAAlB,GAAmC,YAAW;AAC7C,QAAM,2BAAN;AACA,CAFD;;;;;;;;;;AAYA,QAAQ,SAAR,CAAkB,GAAlB,GAAwB,UAAS,gBAAT,EAA2B,eAA3B,EAA4C;AACnE,MAAI,UAAU,SAAc,EAAd,EAAkB;AAC/B,YAAQ;AADuB,GAAlB,EAEX,eAFW,CAAd;AAGA,SAAO,KAAK,cAAL,CAAoB,gBAApB,EAAsC,OAAtC,EAA+C,IAA/C,CAAoD,MAAM,SAA1D,CAAP;AACA,CALD;;AAOA,QAAQ,SAAR,CAAkB,gBAAlB,GAAqC,YAAW;AAC/C,SAAO,KAAK,GAAL,CAAS,gBAAT,EAAP;AACA,CAFD;;;;;;;;;;;AAaA,QAAQ,SAAR,CAAkB,KAAlB,GAA0B,UAAS,QAAT,EAAmB;AAC5C,MAAI,CAAC,QAAL,EAAe;AACd,WAAO,KAAK,GAAL,CAAS,YAAT,EAAuB,IAAvB,CAA4B,MAAM,eAAlC,CAAP;AACA;AACD,SAAO,IAAI,IAAJ,CAAS,QAAT,EAAmB,IAAnB,CAAP;AACA,CALD;;;;;;;;AAaA,QAAQ,SAAR,CAAkB,IAAlB,GAAyB,UAAS,eAAT,EAA0B,IAA1B,EAAgC,IAAhC,EAAsC;AAC9D,SAAO,gBAAgB,IAAhB,EAAsB,IAAtB,CAAP;AACA,MAAI,UAAU;AACb,YAAQ,MADK;AAEb,UAAM;AAFO,GAAd;AAIA,YAAU,SAAc,EAAd,EAAkB,OAAlB,EAA2B,IAA3B,CAAV;AACA,SAAO,KAAK,cAAL,CAAoB,eAApB,EAAqC,OAArC,EAA8C,IAA9C,CAAmD,MAAM,SAAzD,CAAP;AACA,CARD;;;AAWA,IAAI,kBAAkB,SAAlB,eAAkB,CAAS,IAAT,EAAe,IAAf,EAAqB;;AAE1C,MAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B,OAAO,IAAP;;AAE9B,MAAI,QAAQ,KAAK,OAAb,IAAwB,KAAK,OAAL,CAAa,cAAb,CAAxB,IAAwD,KAAK,OAAL,CAAa,cAAb,EAA6B,OAA7B,CAAqC,MAArC,MAAiD,CAAC,CAA9G,EAAiH;AAChH,WAAO,IAAP;AACA;;AAED,SAAO,KAAK,SAAL,CAAe,IAAf,CAAP;AACA,CATD;AAUA,OAAO,OAAP,GAAiB,OAAjB","file":"baseDao.js","sourcesContent":["\r\nvar List \t\t= require(\"./list\");\r\nvar Web \t\t= require(\"./web\");\r\nvar Profiles \t= require(\"./profiles\")\r\nvar Search \t\t= require(\"./search\");\r\nvar utils \t\t= require(\"./utils\");\r\n\r\n/**\r\n * Abstract class. You'll never work with this directly. \r\n * @abstract\r\n * @private\r\n * @property {Web} web - Allows interacting with the SharePoint site you connected to\r\n * @property {Search} search - Allows querying through the SP Search Service\r\n * @property {Profiles} profiles - Allows interacting with the SP Profile Service\r\n */\r\nvar BaseDao = function() {\r\n\tthis.web = new Web(this);\r\n\tthis.search = new Search(this);\r\n\tthis.profiles = new Profiles(this);\r\n};\r\n\r\nBaseDao.prototype.executeRequest = function() {\r\n\tthrow \"Not implemented exception\";\r\n};\r\n\r\n/**\r\n * Generic helper to make AJAX GET request\r\n  * @example <caption>Use generic GET method to retrieve a site's content types</caption>\r\n * dao.get('/web/contentTypes').then(function(data) { console.log(data.d.results)})\r\n * @param {string} relativeQueryUrl - the API url relative to \"/_api\"\r\n * @param {Object} [extendedOptions] - AJAX options (like custom request headers)\r\n * @returns {Promise} - An ES6 Promise that resolves to the an object probably in the form of data.d\r\n */\r\nBaseDao.prototype.get = function(relativeQueryUrl, extendedOptions) {\r\n\tvar options = Object.assign({}, {\r\n\t\tmethod: \"GET\"\r\n\t}, extendedOptions);\r\n\treturn this.executeRequest(relativeQueryUrl, options).then(utils.parseJSON);\r\n};\r\n\r\nBaseDao.prototype.getRequestDigest = function() {\r\n\treturn this.web.getRequestDigest();\r\n};\r\n/**\r\n * If a list name is passed, an SPScript.List object, otherwise performs a request to get all the site's lists\r\n * @param {string} [listname] - If a list name is passed, method is synchronous returning an SPScript.List\r\n * @returns {List|Promise} - SPScript.List object or a Promise that resolves to an Array of lists\r\n * @example <caption>Option 1: No List Name gets all the lists of a site</caption>\r\n * dao.lists().then(function(lists) { console.log(lists)});\r\n * @example <caption>Option 2: Pass a List Name to get a list object</caption>\r\n * var list = dao.lists('MyList');\r\n * list.getItemById(12).then(function(item) { console.log(item)});\r\n */\r\nBaseDao.prototype.lists = function(listname) {\r\n\tif (!listname) {\r\n\t\treturn this.get(\"/web/lists\").then(utils.validateODataV2);\r\n\t}\r\n\treturn new List(listname, this);\r\n};\r\n\r\n/**\r\n * Generic helper to make AJAX POST request\r\n * @param {string} relativeQueryUrl - the API url relative to \"/_api\"\r\n * @param {Object} [extendedOptions] - AJAX options (like custom request headers)\r\n * @returns {Promise} - An ES6 Promise\r\n */\r\nBaseDao.prototype.post = function(relativePostUrl, body, opts) {\r\n\tbody = packagePostBody(body, opts);\r\n\tvar options = {\r\n\t\tmethod: \"POST\",\r\n\t\tdata: body\r\n\t};\r\n\toptions = Object.assign({}, options, opts);\r\n\treturn this.executeRequest(relativePostUrl, options).then(utils.parseJSON);\r\n};\r\n\r\n//Skip stringify it its already a string or it has an explicit Content-Type that is not JSON\r\nvar packagePostBody = function(body, opts) {\r\n\t// if its already a string just return\r\n\tif (typeof body === \"string\") return body;\r\n\t// if it has an explicit content-type, asssume the body is already that type\r\n\tif (opts && opts.headers && opts.headers[\"Content-Type\"] && opts.headers[\"Content-Type\"].indexOf(\"json\") === -1) {\r\n\t\treturn body\r\n\t}\r\n\t//others stringify\r\n\treturn JSON.stringify(body);\r\n}\r\nmodule.exports = BaseDao;"]}