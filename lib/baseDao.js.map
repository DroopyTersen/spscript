{"version":3,"sources":["../src/baseDao.js"],"names":["List","require","Web","Profiles","Search","utils","CustomActions","BaseDao","web","search","profiles","customActions","prototype","executeRequest","get","relativeQueryUrl","extendedOptions","options","method","then","parseJSON","getRequestDigest","lists","listname","validateODataV2","post","relativePostUrl","body","opts","packagePostBody","data","headers","indexOf","JSON","stringify","module","exports"],"mappings":";;;;AACA,IAAIA,OAAUC,QAAQ,QAAR,CAAd;AACA,IAAIC,MAASD,QAAQ,OAAR,CAAb;AACA,IAAIE,WAAaF,QAAQ,YAAR,CAAjB;AACA,IAAIG,SAAYH,QAAQ,UAAR,CAAhB;AACA,IAAII,QAAWJ,QAAQ,SAAR,CAAf;AACA,IAAIK,gBAAiBL,QAAQ,iBAAR,CAArB;AACA;;;;;;;;AAQA,IAAIM,UAAU,SAAVA,OAAU,GAAW;AACxB,MAAKC,GAAL,GAAW,IAAIN,GAAJ,CAAQ,IAAR,CAAX;AACA,MAAKO,MAAL,GAAc,IAAIL,MAAJ,CAAW,IAAX,CAAd;AACA,MAAKM,QAAL,GAAgB,IAAIP,QAAJ,CAAa,IAAb,CAAhB;AACA,MAAKQ,aAAL,GAAqB,IAAIL,aAAJ,CAAkB,IAAlB,CAArB;AAEA,CAND;;AAQAC,QAAQK,SAAR,CAAkBC,cAAlB,GAAmC,YAAW;AAC7C,OAAM,2BAAN;AACA,CAFD;;AAIA;;;;;;;;AAQAN,QAAQK,SAAR,CAAkBE,GAAlB,GAAwB,UAASC,gBAAT,EAA2BC,eAA3B,EAA4C;AACnE,KAAIC,UAAU,SAAc,EAAd,EAAkB;AAC/BC,UAAQ;AADuB,EAAlB,EAEXF,eAFW,CAAd;AAGA,QAAO,KAAKH,cAAL,CAAoBE,gBAApB,EAAsCE,OAAtC,EAA+CE,IAA/C,CAAoDd,MAAMe,SAA1D,CAAP;AACA,CALD;;AAOAb,QAAQK,SAAR,CAAkBS,gBAAlB,GAAqC,YAAW;AAC/C,QAAO,KAAKb,GAAL,CAASa,gBAAT,EAAP;AACA,CAFD;AAGA;;;;;;;;;;AAUAd,QAAQK,SAAR,CAAkBU,KAAlB,GAA0B,UAASC,QAAT,EAAmB;AAC5C,KAAI,CAACA,QAAL,EAAe;AACd,SAAO,KAAKT,GAAL,CAAS,YAAT,EAAuBK,IAAvB,CAA4Bd,MAAMmB,eAAlC,CAAP;AACA;AACD,QAAO,IAAIxB,IAAJ,CAASuB,QAAT,EAAmB,IAAnB,CAAP;AACA,CALD;;AAOA;;;;;;AAMAhB,QAAQK,SAAR,CAAkBa,IAAlB,GAAyB,UAASC,eAAT,EAA0BC,IAA1B,EAAgCC,IAAhC,EAAsC;AAC9DD,QAAOE,gBAAgBF,IAAhB,EAAsBC,IAAtB,CAAP;AACA,KAAIX,UAAU;AACbC,UAAQ,MADK;AAEbY,QAAMH;AAFO,EAAd;AAIAV,WAAU,SAAc,EAAd,EAAkBA,OAAlB,EAA2BW,IAA3B,CAAV;AACA,QAAO,KAAKf,cAAL,CAAoBa,eAApB,EAAqCT,OAArC,EAA8CE,IAA9C,CAAmDd,MAAMe,SAAzD,CAAP;AACA,CARD;;AAUA;AACA,IAAIS,kBAAkB,SAAlBA,eAAkB,CAASF,IAAT,EAAeC,IAAf,EAAqB;AAC1C;AACA,KAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B,OAAOA,IAAP;AAC9B;AACA,KAAIC,QAAQA,KAAKG,OAAb,IAAwBH,KAAKG,OAAL,CAAa,cAAb,CAAxB,IAAwDH,KAAKG,OAAL,CAAa,cAAb,EAA6BC,OAA7B,CAAqC,MAArC,MAAiD,CAAC,CAA9G,EAAiH;AAChH,SAAOL,IAAP;AACA;AACD;AACA,QAAOM,KAAKC,SAAL,CAAeP,IAAf,CAAP;AACA,CATD;AAUAQ,OAAOC,OAAP,GAAiB7B,OAAjB","file":"baseDao.js","sourcesContent":["\r\nvar List \t\t\t= require(\"./list\");\r\nvar Web \t\t\t= require(\"./web\");\r\nvar Profiles \t\t= require(\"./profiles\")\r\nvar Search \t\t\t= require(\"./search\");\r\nvar utils \t\t\t= require(\"./utils\");\r\nvar CustomActions \t= require(\"./customActions\");\r\n/**\r\n * Abstract class. You'll never work with this directly. \r\n * @abstract\r\n * @private\r\n * @property {Web} web - Allows interacting with the SharePoint site you connected to\r\n * @property {Search} search - Allows querying through the SP Search Service\r\n * @property {Profiles} profiles - Allows interacting with the SP Profile Service\r\n */\r\nvar BaseDao = function() {\r\n\tthis.web = new Web(this);\r\n\tthis.search = new Search(this);\r\n\tthis.profiles = new Profiles(this);\r\n\tthis.customActions = new CustomActions(this);\r\n\r\n};\r\n\r\nBaseDao.prototype.executeRequest = function() {\r\n\tthrow \"Not implemented exception\";\r\n};\r\n\r\n/**\r\n * Generic helper to make AJAX GET request\r\n  * @example <caption>Use generic GET method to retrieve a site's content types</caption>\r\n * dao.get('/web/contentTypes').then(function(data) { console.log(data.d.results)})\r\n * @param {string} relativeQueryUrl - the API url relative to \"/_api\"\r\n * @param {Object} [extendedOptions] - AJAX options (like custom request headers)\r\n * @returns {Promise} - An ES6 Promise that resolves to the an object probably in the form of data.d\r\n */\r\nBaseDao.prototype.get = function(relativeQueryUrl, extendedOptions) {\r\n\tvar options = Object.assign({}, {\r\n\t\tmethod: \"GET\"\r\n\t}, extendedOptions);\r\n\treturn this.executeRequest(relativeQueryUrl, options).then(utils.parseJSON);\r\n};\r\n\r\nBaseDao.prototype.getRequestDigest = function() {\r\n\treturn this.web.getRequestDigest();\r\n};\r\n/**\r\n * If a list name is passed, an SPScript.List object, otherwise performs a request to get all the site's lists\r\n * @param {string} [listname] - If a list name is passed, method is synchronous returning an SPScript.List\r\n * @returns {List|Promise} - SPScript.List object or a Promise that resolves to an Array of lists\r\n * @example <caption>Option 1: No List Name gets all the lists of a site</caption>\r\n * dao.lists().then(function(lists) { console.log(lists)});\r\n * @example <caption>Option 2: Pass a List Name to get a list object</caption>\r\n * var list = dao.lists('MyList');\r\n * list.getItemById(12).then(function(item) { console.log(item)});\r\n */\r\nBaseDao.prototype.lists = function(listname) {\r\n\tif (!listname) {\r\n\t\treturn this.get(\"/web/lists\").then(utils.validateODataV2);\r\n\t}\r\n\treturn new List(listname, this);\r\n};\r\n\r\n/**\r\n * Generic helper to make AJAX POST request\r\n * @param {string} relativeQueryUrl - the API url relative to \"/_api\"\r\n * @param {Object} [extendedOptions] - AJAX options (like custom request headers)\r\n * @returns {Promise} - An ES6 Promise\r\n */\r\nBaseDao.prototype.post = function(relativePostUrl, body, opts) {\r\n\tbody = packagePostBody(body, opts);\r\n\tvar options = {\r\n\t\tmethod: \"POST\",\r\n\t\tdata: body\r\n\t};\r\n\toptions = Object.assign({}, options, opts);\r\n\treturn this.executeRequest(relativePostUrl, options).then(utils.parseJSON);\r\n};\r\n\r\n//Skip stringify it its already a string or it has an explicit Content-Type that is not JSON\r\nvar packagePostBody = function(body, opts) {\r\n\t// if its already a string just return\r\n\tif (typeof body === \"string\") return body;\r\n\t// if it has an explicit content-type, asssume the body is already that type\r\n\tif (opts && opts.headers && opts.headers[\"Content-Type\"] && opts.headers[\"Content-Type\"].indexOf(\"json\") === -1) {\r\n\t\treturn body\r\n\t}\r\n\t//others stringify\r\n\treturn JSON.stringify(body);\r\n}\r\nmodule.exports = BaseDao;"]}