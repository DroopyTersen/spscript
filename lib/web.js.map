{"version":3,"sources":["../src/web.js"],"names":["utils","require","Permissions","headers","Folder","Web","dao","_dao","baseUrl","permissions","prototype","info","get","then","validateODataV2","subsites","getRequestDigest","post","data","d","GetContextWebInformation","FormDigestValue","getFolder","serverRelativeUrl","charAt","substr","url","folder","spFolder","populateChildren","uploadFile","fileContent","folderUrl","fields","digest","_uploadFile","name","_uploadBinaryData","File","getArrayBuffer","arrayBuffer","_setFileFields","spFile","__metadata","uri","Object","keys","length","item","file","lists","ParentList","Title","updateItem","Id","binaryContent","uploadUrl","options","getFilestreamHeaders","getFile","copyFile","sourceUrl","destinationUrl","_copyFile","requestDigest","getAddHeaders","body","strNewUrl","bOverWrite","fileAction","action","params","_fileAction","deleteFile","fileUrl","_deleteFile","getDeleteHeaders","getUser","email","module","exports"],"mappings":"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","file":"web.js","sourcesContent":["var utils = require(\"./utils\");\r\nvar Permissions = require(\"./permissions\");\r\nvar headers = require(\"./requestHeaders\");\r\nvar Folder = require(\"./filesystem\").Folder;\r\n/**\r\n * Represents a SharePoint site. You shouldn't ever be new'ing this class up up yourself, instead you'll get it from your dao as shown in first example.\r\n * @class\r\n * @param {IBaseDao} dao - Data access object used to make requests.\r\n * @property {Permissions} permissions - allows checking security information of the Web\r\n * @property {string} baseUrl - API relative url (value = \"/web\")\r\n * @example <caption>You access this Web class using the 'web' property of the dao</caption>\r\n * var dao = new SPScript.RestDao(_spPageContextInfo.webAbsoluteUrl);\r\n * dao.web.info().then(function(info) { console.log(info) });\r\n */\r\nvar Web = function(dao) {\r\n\tthis._dao = dao;\r\n\tthis.baseUrl = \"/web\";\r\n\tthis.permissions = new Permissions(this.baseUrl, this._dao);\r\n};\r\n\r\n/**\r\n * Retrieves basic information about the site\r\n * @returns {Promise<SP.Web>} - A Promise that resolves to an object containing non-deferred properties of SP.Web (https://msdn.microsoft.com/en-us/library/office/jj244873.aspx)\r\n * @example\r\n * dao.web.info().then(function(info) { console.log(info) });\r\n */\r\nWeb.prototype.info = function() {\r\n\treturn this._dao\r\n\t\t.get(this.baseUrl)\r\n\t\t.then(utils.validateODataV2);\r\n};\r\n\r\n/**\r\n * Retrieves all of the subsites\r\n * @returns {Promise<SP.Web[]>} - A Promise that resolves to an array of subsite object, each loaded with all non-deferred properties\r\n * @example\r\n *  dao.web.subsites().then(function(sites) { console.log(sites) });\r\n */\r\nWeb.prototype.subsites = function() {\r\n\treturn this._dao\r\n\t\t.get(this.baseUrl + \"/webinfos\")\r\n\t\t.then(utils.validateODataV2);\r\n};\r\n\r\n/**\r\n * Retrieves a token needed to authorize any updates\r\n * @return {string} - A Promise that resolves to a the token that needs to added to the \"X-RequestDigest\" request header\r\n * @example\r\n *  dao.web.getRequestDigest().then(function(digest) { console.log(digest) });\r\n */\r\nWeb.prototype.getRequestDigest = function() {\r\n\treturn this._dao.post('/contextinfo', {})\r\n\t\t.then(data => {\r\n\t\t\treturn data.d.GetContextWebInformation.FormDigestValue\r\n\t\t});\r\n};\r\n\r\n/**\r\n * Retrieves a folder\r\n * @param {string} serverRelativeUrl - The server relative url of the folder\r\n * @returns {Promise<Folder>} - A Promise that resolves to a folder object contain a files and folders arrays\r\n * @example\r\n *  dao.web.getFolder(\"/sites/mysite/Shared Documents\")\r\n *\t\t\t.then(function(folder) { console.log(folder) });\r\n */\r\nWeb.prototype.getFolder = function(serverRelativeUrl) {\r\n\t//remove leading slash\r\n\tif (serverRelativeUrl.charAt(0) === \"/\") {\r\n\t\tserverRelativeUrl = serverRelativeUrl.substr(1);\r\n\t}\r\n\tvar url = \"/web/GetFolderByServerRelativeUrl('\" + serverRelativeUrl + \"')?$expand=Folders,Files\";\r\n\r\n\treturn this._dao.get(url).then(utils.validateODataV2)\r\n\t\t.then(spFolder => {\r\n\t\t\tvar folder = new Folder(spFolder);\r\n\t\t\tfolder.populateChildren(spFolder);\r\n\t\t\treturn folder;\r\n\t\t});\r\n};\r\n\r\n/**\r\n * Uploads a file\r\n * @param {HTML5.File|string} fileContent - Either an HTML5 File object (from a File input element) or the string content of the file\r\n * @param {string} folderUrl - The server relative folder where the file should be uploaded\r\n * @param {object} [[fields]] - An optional object containig the fields that should be set on the file after the upload completes. You can override the filename by passing 'name' property { name: \"NewFileName.docx\"}\r\n * @param {string} [[requestDigest]] - The request digest token used to authorize the request. One will be automatically retrieved if not passed.\r\n * @example <caption>Upload files with file input element, assumes <input type='file' id='file-input' /> </caption>\r\n\t*var inputElement = document.getElementById(\"file-input\");\r\n\t*inputElement.addEventListener(\"change\", handleFiles, false);\r\n\t*function handleFiles() {\r\n\t*    var fileList = this.files;\r\n\t*    var folderUrl = \"/spscript/Shared Documents\";\r\n\t*    for (var i = 0; i < fileList.length; i++) {\r\n\t*        dao.web.uploadFile(fileList[i], folderUrl).then(function(result){\r\n\t*            console.log(result);\r\n\t*        });\r\n\t*    }\r\n\t*}\r\n */\r\nWeb.prototype.uploadFile = function(fileContent, folderUrl, fields, digest) {\r\n\tif (digest) return this._uploadFile(fileContent, folderUrl, fields, digest);\r\n\treturn this.getRequestDigest().then(digest => this._uploadFile(fileContent, folderUrl, fields, digest));\r\n}\r\n\r\nWeb.prototype._uploadFile = function(fileContent, folderUrl, fields, digest) {\r\n\tfields = fields || {};\r\n\t// if its a string, just treat that as the raw content\r\n\tif (typeof fileContent === \"string\") {\r\n\t\tfields.name = fields.name || \"NewFile.txt\";\r\n\t\treturn this._uploadBinaryData(fileContent, folderUrl, fields, digest);\r\n\t}\r\n\r\n\t// If its a browser File object, use FileReader to get ArrayBuffer\r\n\tif (fileContent instanceof File) {\r\n\t\tfields.name = fields.name || fileContent.name\r\n\t\treturn utils.getArrayBuffer(fileContent)\r\n\t\t\t.then(arrayBuffer => this._uploadBinaryData(arrayBuffer, folderUrl, fields, digest))\r\n\t}\r\n};\r\n\r\nWeb.prototype._setFileFields = function(spFile, fields, digest) {\r\n\t// Get the ListItem with ParentList properties so we can query by list title\r\n\treturn this._dao.get(spFile.__metadata.uri + \"/ListItemAllFields?$expand=ParentList\")\r\n\t\t.then(utils.validateODataV2)\r\n\t\t.then(item => {\r\n\t\t\tdelete fields.name;\r\n\t\t\t// if there were no fields passed in just return the file and list item\r\n\t\t\tif (Object.keys(fields).length === 0) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\titem,\r\n\t\t\t\t\tfile: spFile\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\t// If extra fields were passed in, update the list item\r\n\t\t\treturn this._dao.lists(item.ParentList.Title).updateItem(item.Id, fields, digest)\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\titem = Object.assign({}, item, fields);\r\n\t\t\t\t\treturn { item, file: spFile };\r\n\t\t\t\t})\r\n\t\t})\r\n};\r\n\r\nWeb.prototype._uploadBinaryData = function(binaryContent, folderUrl, fields, digest) {\r\n\tvar uploadUrl = \"/web/GetFolderByServerRelativeUrl('\" + folderUrl + \"')/Files/Add(url='\" + fields.name + \"',overwrite=true)\";\r\n\tvar options = {\r\n\t\theaders: headers.getFilestreamHeaders(digest)\r\n\t};\r\n\treturn this._dao.post(uploadUrl, binaryContent, options)\r\n\t\t.then(utils.validateODataV2)\r\n\t\t.then(spFile => this._setFileFields(spFile, fields, digest));\r\n};\r\n\r\n/**\r\n * Retrieves a file object\r\n * @param {string} url - The server relative url of the file\r\n * @returns {Promise<File>} - A Promise that resolves to a file object\r\n * @example\r\n *  dao.web.getFile(\"/sites/mysite/Shared Documents/myfile.docx\")\r\n *\t\t\t.then(function(file) { console.log(file) });\r\n */\r\nWeb.prototype.getFile = function(url) {\r\n\tvar url = `/web/getfilebyserverrelativeurl('${url}')`\r\n\treturn this._dao.get(url).then(utils.validateODataV2);\r\n};\r\n\r\n/**\r\n * Copies a file\r\n * @param {string} sourceUrl - The server relative url of the file you want to copy\r\n * @param {string} destinationUrl - The server relative url of the destination\r\n * @param {string} [[requestDigest]] - The request digest token used to authorize the request. One will be automatically retrieved if not passed.\r\n * @example\r\n * var sourceFile = \"/sites/mysite/Shared Documents/myfile.docx\";\r\n * var destination = \"/sites/mysite/Restricted Docs/myFile.docx\";\r\n * dao.web.copyFile(sourceFile, destination).then(function() { console.log(\"Success\") });\r\n */\r\nWeb.prototype.copyFile = function(sourceUrl, destinationUrl, digest) {\r\n\tif (digest) return this._copyFile(sourceUrl, destinationUrl, digest);\r\n\r\n\treturn this.getRequestDigest().then(requestDigest => this._copyFile(sourceUrl, destinationUrl, requestDigest));\r\n};\r\n\r\nWeb.prototype._copyFile = function(sourceUrl, destinationUrl, digest) {\r\n\tvar url = `/web/getfilebyserverrelativeurl('${sourceUrl}')/CopyTo` //(strnewurl='${destinationUrl}',boverwrite=true)`\r\n\tvar options = {\r\n\t\theaders: headers.getAddHeaders(digest)\r\n\t};\r\n\tvar body = {\r\n\t\tstrNewUrl: destinationUrl,\r\n\t\tbOverWrite: true\r\n\t}\r\n\treturn this._dao.post(url, body, options);\r\n};\r\n\r\nWeb.prototype.fileAction = function(file, action, params = {}, digest) {\r\n\tif (digest) this._fileAction(file, action, params, digest)\r\n\treturn this.getRequestDigest().then(requestDigest => this._fileAction(file, action, params, requestDigest))\r\n};\r\n\r\nWeb.prototype._fileAction = function(file, action, params, digest) {\r\n\tvar url = `/web/getfilebyserverrelativeurl('${file}')/${action}`\r\n\tvar options = {\r\n\t\theaders: headers.getAddHeaders(digest)\r\n\t};\r\n\treturn this._dao.post(url, params, options);\r\n};\r\n\r\n/**\r\n * Deletes a file\r\n * @param {string} fileUrl - The server relative url of the file you want to delete\r\n * @param {string} [[requestDigest]] - The request digest token used to authorize the request. One will be automatically retrieved if not passed.\r\n * @example\r\n * dao.web.deleteFile(\"/sites/mysite/Shared Documents/myFile.docx\")\r\n *\t\t\t.then(function() { console.log(\"Success\")});\r\n */\r\nWeb.prototype.deleteFile = function(fileUrl, digest) {\r\n\tif (digest) return this._deleteFile(fileUrl, digest);\r\n\r\n\treturn this.getRequestDigest().then(requestDigest => this._deleteFile(fileUrl, requestDigest));\r\n};\r\n\r\nWeb.prototype._deleteFile = function(sourceUrl, requestDigest) {\r\n\tvar url = \"/web/getfilebyserverrelativeurl(@url)/?@Url='\" + sourceUrl + \"'\";\r\n\tvar options = {\r\n\t\theaders: headers.getDeleteHeaders(requestDigest)\r\n\t};\r\n\treturn this._dao.post(url, {}, options);\r\n};\r\n\r\n/**\r\n * Retrieves a users object based on an email address\r\n * @param {string} email - The email address of the user to retrieve\r\n * @returns {Promise<SP.User>} - A Promise that resolves to a an SP.User object\r\n * @example\r\n * dao.web.getUser(\"andrew@andrewpetersen.onmicrosoft.com\")\r\n * \t\t\t.then(function(user) { console.log(user)});\r\n */\r\nWeb.prototype.getUser = function(email) {\r\n\tvar url = this.baseUrl + \"/SiteUsers/GetByEmail('\" + email + \"')\";\r\n\treturn this._dao.get(url).then(utils.validateODataV2);\r\n};\r\n\r\nmodule.exports = Web;"]}