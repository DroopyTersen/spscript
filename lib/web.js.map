{"version":3,"sources":["../src/web.js"],"names":[],"mappings":"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","file":"web.js","sourcesContent":["var utils = require(\"./utils\");\r\nvar Permissions = require(\"./permissions\");\r\nvar headers = require(\"./requestHeaders\");\r\nvar Folder = require(\"./filesystem\").Folder;\r\n\r\n/**\r\n * Represents a SharePoint site. You shouldn't ever be new'ing this class up up yourself, instead you'll get it from your dao as shown in first example.\r\n * @class\r\n * @param {IBaseDao} dao - Data access object used to make requests.\r\n * @property {Permissions} permissions - allows checking security information of the Web\r\n * @property {string} baseUrl - API relative url (value = \"/web\")\r\n * @example <caption>You access this Web class using the 'web' property of the dao</caption>\r\n * var dao = new SPScript.RestDao(_spPageContextInfo.webAbsoluteUrl);\r\n * dao.web.info().then(function(info) { console.log(info) });\r\n */\r\nvar Web = function(dao) {\r\n\tthis._dao = dao;\r\n\tthis.baseUrl = \"/web\";\r\n\tthis.permissions = new Permissions(this.baseUrl, this._dao);\r\n};\r\n\r\n/**\r\n * Retrieves basic information about the site\r\n * @returns {Promise<SP.Web>} - A Promise that resolves to an object containing non-deferred properties of SP.Web (https://msdn.microsoft.com/en-us/library/office/jj244873.aspx)\r\n * @example\r\n * dao.web.info().then(function(info) { console.log(info) });\r\n */\r\nWeb.prototype.info = function() {\r\n\treturn this._dao\r\n\t\t.get(this.baseUrl)\r\n\t\t.then(utils.validateODataV2);\r\n};\r\n\r\n/**\r\n * Retrieves all of the subsites\r\n * @returns {Promise<SP.Web[]>} - A Promise that resolves to an array of subsite object, each loaded with all non-deferred properties\r\n * @example\r\n *  dao.web.subsites().then(function(sites) { console.log(sites) });\r\n */\r\nWeb.prototype.subsites = function() {\r\n\treturn this._dao\r\n\t\t.get(this.baseUrl + \"/webinfos\")\r\n\t\t.then(utils.validateODataV2);\r\n};\r\n\r\n/**\r\n * Retrieves a token needed to authorize any updates\r\n * @return {string} - A Promise that resolves to a the token that needs to added to the \"X-RequestDigest\" request header\r\n * @example\r\n *  dao.web.getRequestDigest().then(function(digest) { console.log(digest) });\r\n */\r\nWeb.prototype.getRequestDigest = function() {\r\n\treturn this._dao.post('/contextinfo', {})\r\n\t\t.then(data => data.d.GetContextWebInformation.FormDigestValue);\r\n};\r\n\r\n/**\r\n * Retrieves a folder\r\n * @param {string} serverRelativeUrl - The server relative url of the folder\r\n * @returns {Promise<Folder>} - A Promise that resolves to a folder object contain a files and folders arrays\r\n * @example\r\n *  dao.web.getFolder(\"/sites/mysite/Shared Documents\")\r\n *\t\t\t.then(function(folder) { console.log(folder) });\r\n*/\r\nWeb.prototype.getFolder = function(serverRelativeUrl) {\r\n\t//remove leading slash\r\n\tif (serverRelativeUrl.charAt(0) === \"/\") {\r\n\t\tserverRelativeUrl = serverRelativeUrl.substr(1);\r\n\t}\r\n\tvar url = \"/web/GetFolderByServerRelativeUrl('\" + serverRelativeUrl + \"')?$expand=Folders,Files\";\r\n\r\n\treturn this._dao.get(url).then(utils.validateODataV2)\r\n\t\t.then(spFolder => {\r\n\t\t\tvar folder = new Folder(spFolder);\r\n\t\t\tfolder.populateChildren(spFolder);\r\n\t\t\treturn folder;\r\n\t\t});\r\n};\r\n\r\n// Web.prototype.uploadFile = function(folderUrl, name, base64Binary, digest) {\r\n// \tif (digest) return this._uploadFile(folderUrl, name, base64Binary, digest);\r\n// \treturn this.getRequestDigest().then(digest => this._uploadFile(folderUrl, name, base64Binary, digest));\r\n// }\r\n\r\n// //TODO: Fix this. Its from v0.0 and never worked\r\n// Web.prototype._uploadFile = function(folderUrl, name, base64Binary, digest) {\r\n// \tvar uploadUrl = \"/web/GetFolderByServerRelativeUrl('\" + folderUrl + \"')/Files/Add(url='\" + name + \"',overwrite=true)\";\r\n// \tvar options = {\r\n// \t\t\tbinaryStringRequestBody: true,\r\n// \t\t\tstate: \"Update\"\r\n// \t};\r\n// \treturn this.post(uploadUrl, base64Binary, options);\r\n// };\r\n\r\n/**\r\n * Retrieves a file object\r\n * @param {string} url - The server relative url of the file\r\n * @returns {Promise<File>} - A Promise that resolves to a file object\r\n * @example\r\n *  dao.web.getFile(\"/sites/mysite/Shared Documents/myfile.docx\")\r\n *\t\t\t.then(function(file) { console.log(file) });\r\n */\r\nWeb.prototype.getFile = function(url) {\r\n\tvar url = `/web/getfilebyserverrelativeurl('${url}')`\r\n\treturn this._dao.get(url).then(utils.validateODataV2);\r\n};\r\n\r\n/**\r\n * Copies a file\r\n * @param {string} sourceUrl - The server relative url of the file you want to copy\r\n * @param {string} destinationUrl - The server relative url of the destination\r\n * @param {string} [[requestDigest]] - The request digest token used to authorize the request. One will be automatically retrieved if not passed.\r\n * @example\r\n * var sourceFile = \"/sites/mysite/Shared Documents/myfile.docx\";\r\n * var destination = \"/sites/mysite/Restricted Docs/myFile.docx\";\r\n * dao.web.copyFile(sourceFile, destination).then(function() { console.log(\"Success\") });\r\n */\r\nWeb.prototype.copyFile = function(sourceUrl, destinationUrl, digest) {\r\n\tif (digest) return this._copyFile(sourceUrl, destinationUrl, digest);\r\n\r\n\treturn this.getRequestDigest().then(requestDigest => this._copyFile(sourceUrl, destinationUrl, requestDigest));\r\n};\r\n\r\nWeb.prototype._copyFile = function(sourceUrl, destinationUrl, digest) {\r\n\tvar url = `/web/getfilebyserverrelativeurl('${sourceUrl}')/CopyTo(strnewurl='${destinationUrl}',boverwrite=true)`\r\n\tvar options = {\r\n\t\theaders: headers.getAddHeaders(digest)\r\n\t};\r\n\treturn this._dao.post(url, {}, options);\r\n};\r\n\r\n/**\r\n * Deletes a file\r\n * @param {string} fileUrl - The server relative url of the file you want to delete\r\n * @param {string} [[requestDigest]] - The request digest token used to authorize the request. One will be automatically retrieved if not passed.\r\n * @example\r\n * dao.web.deleteFile(\"/sites/mysite/Shared Documents/myFile.docx\")\r\n *\t\t\t.then(function() { console.log(\"Success\")});\r\n */\r\nWeb.prototype.deleteFile = function(fileUrl, digest) {\r\n\tif (digest) return this._deleteFile(fileUrl, digest);\r\n\r\n\treturn this.getRequestDigest().then(requestDigest => this._deleteFile(fileUrl, requestDigest));\r\n};\r\n\r\nWeb.prototype._deleteFile = function(sourceUrl, requestDigest) {\r\n\tvar url = \"/web/getfilebyserverrelativeurl(@url)/?@Url='\" + sourceUrl + \"'\";\r\n\tvar options = {\r\n\t\theaders: headers.getDeleteHeaders(requestDigest)\r\n\t};\r\n\treturn this._dao.post(url, {}, options);\r\n};\r\n\r\n/**\r\n * Retrieves a users object based on an email address\r\n * @param {string} email - The email address of the user to retrieve\r\n * @returns {Promise<SP.User>} - A Promise that resolves to a an SP.User object\r\n  * @example\r\n * dao.web.getUser(\"andrew@andrewpetersen.onmicrosoft.com\")\r\n * \t\t\t.then(function(user) { console.log(user)});\r\n */\r\nWeb.prototype.getUser = function(email) {\r\n\tvar url = this.baseUrl + \"/SiteUsers/GetByEmail('\" + email + \"')\";\r\n\treturn this._dao.get(url).then(utils.validateODataV2);\r\n};\r\n\r\nmodule.exports = Web;"]}