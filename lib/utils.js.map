{"version":3,"sources":["../src/utils.js"],"names":[],"mappings":"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","file":"utils.js","sourcesContent":["/**\r\n* @namespace SPScript.utils\r\n*/\r\n\r\n\r\nvar isBrowser = exports.isBrowser = function() {\r\n\treturn (!(typeof window === 'undefined'));\r\n};\r\n/**\r\n * If you pass in string, it will try to run JSON.parse(). The SPScript get() and post() methods already run the response through this method, so you'd really only need this if you are doing a manual ajax request. Different browsers handle JSON response differently so it is safest to call this method if you aren't going through SPScript.\r\n * @param {string} data - Raw response from JSON request\r\n * @returns {object} - JSON parsed object. Returns null if JSON.parse fails\r\n * @function parseJSON\r\n * @memberof SPScript.utils\r\n * @example\r\n * dao.executeRequest('/web/contentTypes')\r\n *\t\t.then(SPScript.utils.parseJSON)\r\n *\t\t.then(function(data) { console.log(data.d.results)})\r\n */\r\nvar parseJSON = exports.parseJSON = function(data) {\r\n\t\tif (typeof data === \"string\") {\r\n\t\t\ttry {\r\n\t\t\t\tdata = JSON.parse(data);\r\n\t\t\t} catch (e) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn data;\t\r\n}; \r\n\r\n/**\r\n * Helps parse raw json response to remove ceremonious OData data.d namespace. Tries JSON.parse() and then pulling out actual result from data.d or data.d.results\r\n * @function validateODataV2\r\n * @memberof SPScript.utils\r\n * @param {string|object} data - Raw response from JSON request\r\n * @returns {object} - JSON parsed object with that removes data.d OData structure \r\n * @example\r\n * dao.get('/web/contentTypes')\r\n *\t\t.then(SPScript.utils.validateODataV2)\r\n *\t\t.then(function(contentTypes) { console.log(contentTypes)})\r\n */\r\nvar validateODataV2 = exports.validateODataV2= function(data) {\r\n\t\tvar results = parseJSON(data);\r\n\t\tif (data.d && data.d.results && data.d.results.length != null) {\r\n\t\t\tresults = data.d.results;\r\n\t\t} else if (data.d) {\r\n\t\t\tresults = data.d;\r\n\t\t}\r\n\t\treturn results;\t\r\n};\r\n\r\n//'Borrowed' from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\r\nvar arrayFromBitMask = exports.arrayFromBitMask = function(nMask) {\r\n\t// nMask must be between -2147483648 and 2147483647\r\n\tif (typeof nMask === \"string\") {\r\n\t\tnMask = parseInt(nMask);\r\n\t}\r\n\t// if (nMask > 0x7fffffff || nMask < -0x80000000) { \r\n\t// \tthrow new TypeError(\"arrayFromMask - out of range\"); \r\n\t// }\r\n\tfor (var nShifted = nMask, aFromMask = []; nShifted; aFromMask.push(Boolean(nShifted & 1)), nShifted >>>= 1);\r\n\treturn aFromMask;\r\n};\r\n\r\nvar _waitForLibraries = function(namespaces, resolve) {\r\n\tvar missing = namespaces.filter(namespace => !validateNamespace(namespace));\r\n\t\t\r\n\tif (missing.length === 0) resolve();\r\n\telse setTimeout(() => _waitForLibraries(namespaces, resolve), 25);\r\n};\r\n\r\n/**\r\n * A method to allow you to wait for script dependencies to load.\r\n * @param {Array} namespaces - An array of global namespaces, things on the global 'window'. For example, when jQuery is on the page, window.jQuery is valid.  So 'jQuery' is the namespace.\r\n * @returns {Promise} - A Promise that resolves when all your namespaces are on the page\r\n * @function waitForLibraries\r\n * @memberof SPScript.utils\r\n * @example\r\n * function doMyStuff() { };\r\n * SPScript.utils.waitForLibraries([\"jQuery\", \"SP.UI.Dialog\"]).then(doMyStuff);\r\n */\r\nvar waitForLibraries = exports.waitForLibraries = function(namespaces) {\r\n\treturn new Promise((resolve, reject) => _waitForLibraries(namespaces, resolve));\r\n};\r\n\r\n/**\r\n * A method to allow you to wait for a single script dependency to load.\r\n * @param {string} namespace - A global namespace. For example, when jQuery is on the page, window.jQuery is valid. So 'jQuery' is the namespace.\r\n * @returns {Promise} - A Promise that resolves when all your namespace is on the page\r\n * @function waitForLibrary\r\n * @memberof SPScript.utils\r\n * @example\r\n * function doMyStuff() { };\r\n * SPScript.utils.waitForLibrary(\"jQuery\").then(doMyStuff);\r\n */\r\nvar waitForLibrary = exports.waitForLibrary = (namespace) => waitForLibraries([namespace])\r\n\r\n\r\n/**\r\n * A method to check if a given namespace is on the global object (window).\r\n * @param {string} namespace - A global namespace\r\n * @returns {Bool} - True or False if the namespace is on the page\r\n * @function validateNamespace\r\n * @memberof SPScript.utils\r\n * @example\r\n * var canUseModals = SPScript.utils.validateNamespace(\"SP.UI.Dialog\");\r\n */\r\nvar validateNamespace = exports.validateNamespace = function(namespace) {\r\n\tvar scope = window;\r\n\tvar sections = namespace.split(\".\");\r\n\tvar sectionsLength = sections.length;\r\n\tfor (var i = 0; i < sectionsLength; i++) {\r\n\t\tvar prop = sections[i];\r\n\t\tif (prop in scope) {\r\n\t\t\tscope = scope[prop]\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n};\r\n\r\n/**\r\n * A method to load a javascript file onto your page\r\n * @param {Array<string>} urls - An Array of urls to javascript files you want to load on your page\r\n * @returns {Promise} - A Promise that resolves when all the files are done loading\r\n * @function getScripts\r\n * @memberof SPScript.utils\r\n * @example\r\n * function doMyStuff() { };\r\n * var momentjsUrl = \"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.13.0/moment.min.js\"\r\n * var jQueryUrl = \"https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.3/jquery.min.js\"\r\n * SPScript.utils.getScript([momentjsUrl, jQueryUrl]).then(doMyStuff);\r\n */\r\nvar getScripts = exports.getScripts = function(urls) {\r\n\treturn Promise.all(urls.map(getScript));\r\n};\r\n\r\n/**\r\n * A method to load a javascript file onto your page\r\n * @param {string} url - Url to the java script file you want to load\r\n * @returns {Promise} - A Promise that resolves when the file is done loading\r\n * @function getScript\r\n * @memberof SPScript.utils\r\n * @example\r\n * function doMyStuff() { };\r\n * var momentjsUrl = \"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.13.0/moment.min.js\"\r\n * SPScript.utils.getScript(momentjsUrl).then(doMyStuff);\r\n */\r\nvar getScript = exports.getScript = function(url) {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tvar scriptTag = window.document.createElement(\"script\");\r\n\t\tvar firstScriptTag = document.getElementsByTagName('script')[0];\r\n\t\tscriptTag.async = 1;\r\n\t\tfirstScriptTag.parentNode.insertBefore(scriptTag, firstScriptTag);\r\n\r\n\t\tscriptTag.onload = scriptTag.onreadystatechange = function(arg, isAbort) {\r\n\t\t\t// if its been aborted, readyState is gone, or readyState is in a 'done' status\r\n\t\t\tif(isAbort || !scriptTag.readyState || /loaded|complete/.test(scriptTag.readyState)) {\r\n\t\t\t\t//clean up\r\n\t\t\t\tscriptTag.onload = scriptTag.onreadystatechange = null;\r\n\t\t\t\tscriptTag = undefined;\r\n\r\n\t\t\t\t// resolve/reject the promise\r\n\t\t\t\tif (!isAbort) resolve();\r\n\t\t\t\telse reject;\r\n\t\t\t}\r\n\t\t}\r\n\t\tscriptTag.src = url;\r\n\t});\r\n};\r\n\r\nvar loadCss = exports.loadCss = function(url) {\r\n\tvar link = document.createElement(\"link\");\r\n\tlink.setAttribute(\"rel\", \"stylesheet\");\r\n\tlink.setAttribute(\"type\", \"text/css\");\r\n\tlink.setAttribute(\"href\", url);\r\n\tdocument.querySelector(\"head\").appendChild(link);\r\n}"]}