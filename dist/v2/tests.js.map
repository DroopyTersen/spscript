{"version":3,"sources":["webpack:///tests.js","webpack:///webpack/bootstrap 66cda6bfee26506be81b","webpack:///./src/test/test.browser.js","webpack:///./~/chai/lib/chai/config.js","webpack:///./~/chai/lib/chai/utils/flag.js","webpack:///./~/chai/index.js","webpack:///./~/chai/lib/chai/utils/inspect.js","webpack:///./~/process/browser.js","webpack:///./~/promise-polyfill/promise.js","webpack:///./~/setimmediate/setImmediate.js","webpack:///./~/timers-browserify/main.js","webpack:///./~/chai/lib/chai/utils/getActual.js","webpack:///./~/chai/lib/chai/utils/getName.js","webpack:///./~/chai/lib/chai/utils/objDisplay.js","webpack:///./~/chai/lib/chai/utils/transferFlags.js","webpack:///./~/assertion-error/index.js","webpack:///./src/test/tests/contextTests.js","webpack:///./src/test/tests/index.js","webpack:///./src/test/tests/listTests.js","webpack:///./src/test/tests/utilsTests.js","webpack:///./~/base64-js/index.js","webpack:///./~/buffer/index.js","webpack:///./~/chai/lib/chai.js","webpack:///./~/chai/lib/chai/assertion.js","webpack:///./~/chai/lib/chai/core/assertions.js","webpack:///./~/chai/lib/chai/interface/assert.js","webpack:///./~/chai/lib/chai/interface/expect.js","webpack:///./~/chai/lib/chai/interface/should.js","webpack:///./~/chai/lib/chai/utils/addChainableMethod.js","webpack:///./~/chai/lib/chai/utils/addMethod.js","webpack:///./~/chai/lib/chai/utils/addProperty.js","webpack:///./~/chai/lib/chai/utils/getEnumerableProperties.js","webpack:///./~/chai/lib/chai/utils/getMessage.js","webpack:///./~/chai/lib/chai/utils/getPathValue.js","webpack:///./~/chai/lib/chai/utils/getProperties.js","webpack:///./~/chai/lib/chai/utils/index.js","webpack:///./~/chai/lib/chai/utils/overwriteChainableMethod.js","webpack:///./~/chai/lib/chai/utils/overwriteMethod.js","webpack:///./~/chai/lib/chai/utils/overwriteProperty.js","webpack:///./~/chai/lib/chai/utils/test.js","webpack:///./~/chai/lib/chai/utils/type.js","webpack:///./~/deep-eql/index.js","webpack:///./~/deep-eql/lib/eql.js","webpack:///./~/ieee754/index.js","webpack:///./~/isarray/index.js","webpack:///./~/type-detect/index.js","webpack:///./~/type-detect/lib/type.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","global","promisePolyfill","Promise","mocha","setup","chai","should","run","SPScript","this","includeStack","showDiff","truncateThreshold","obj","key","value","flags","__flags","Object","create","arguments","length","inspect","showHidden","depth","colors","ctx","seen","stylize","str","formatValue","recurseTimes","constructor","prototype","ret","primitive","formatPrimitive","isDOMElement","outerHTML","document","xmlVersion","xmlSerializer","XMLSerializer","serializeToString","ns","container","createElementNS","appendChild","cloneNode","html","innerHTML","replace","err","visibleKeys","getEnumerableProperties","keys","getProperties","isError","name","getName","nameSuffix","isRegExp","RegExp","toString","isDate","Date","toUTCString","formatError","base","array","braces","isArray","push","output","formatArray","map","formatProperty","pop","reduceToSingleString","simple","JSON","stringify","Infinity","Error","i","l","hasOwnProperty","String","forEach","match","__lookupGetter__","__lookupSetter__","indexOf","split","line","join","substr","numLinesEst","reduce","prev","cur","ar","Array","objectToString","re","d","e","o","object","HTMLElement","nodeType","nodeName","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","setTimeout","runClearTimeout","marker","cachedClearTimeout","clearTimeout","cleanUpNextTick","draining","currentQueue","queue","concat","queueIndex","drainQueue","timeout","len","Item","noop","process","nextTick","args","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","setImmediate","root","bind","fn","thisArg","TypeError","_state","_handled","_value","undefined","_deferreds","doResolve","handle","self","deferred","_immediateFn","cb","onFulfilled","onRejected","resolve","reject","promise","newValue","then","finale","_unhandledRejectionFn","Handler","done","reason","ex","setTimeoutFunc","prom","all","arr","slice","res","val","remaining","race","values","console","warn","_setImmediateFn","_setUnhandledRejectionFn","callback","Function","task","tasksByHandle","nextHandle","registerImmediate","clearImmediate","runIfPresent","currentlyRunningATask","installNextTickImplementation","canUsePostMessage","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","installPostMessageImplementation","messagePrefix","Math","random","onGlobalMessage","event","source","data","addEventListener","attachEvent","installMessageChannelImplementation","channel","MessageChannel","port1","port2","installReadyStateChangeImplementation","doc","documentElement","script","createElement","onreadystatechange","removeChild","installSetTimeoutImplementation","attachTo","getPrototypeOf","Timeout","clearFn","_id","_clearFn","window","setInterval","clearInterval","close","unref","ref","enroll","item","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","_obj","func","exec","config","type","kstr","splice","assertion","includeAll","flag","exclude","excludeProps","excludes","AssertionError","message","_props","ssf","extend","props","callee","captureStackTrace","toJSON","stack","describe","createContext","it","have","property","before","get","catch","results","be","an","getRequestDigest","digest","a","not","empty","mode","log","_env","null","utils","dao","list","lists","listInfo","getInfo","info","items","getItems","equal","ItemCount","odata","MyStatus","validId","allItems","Id","getItemById","result","AttachmentFiles","matches","findItems","findItem","newItem","Title","insertedItem","addItem","error","foundItem","InvalidColumn","xhr","status","msg","itemToDelete","deleteItem","itemToUpdate","updates","updateItem","parseJSON","one","two","jsonStr","res1","res2","placeHoldersCount","b64","byteLength","toByteArray","j","tmp","placeHolders","Arr","L","revLookup","charCodeAt","tripletToBase64","num","lookup","encodeChunk","uint8","start","end","fromByteArray","extraBytes","parts","maxChunkLength","len2","Uint8Array","code","typedArraySupport","__proto__","foo","subarray","kMaxLength","Buffer","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","arg","encodingOrOffset","allocUnsafe","from","ArrayBuffer","fromArrayBuffer","fromString","fromObject","assertSize","size","alloc","fill","encoding","checked","string","isEncoding","actual","write","fromArrayLike","byteOffset","isBuffer","copy","buffer","isnan","SlowBuffer","isView","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","b","n","bidirectionalIndexOf","isNaN","arrayIndexOf","lastIndexOf","read","buf","indexSize","readUInt16BE","arrLength","valLength","foundIndex","found","hexWrite","offset","Number","strLen","parsed","parseInt","utf8Write","blitBuffer","asciiWrite","asciiToBytes","latin1Write","base64Write","ucs2Write","utf16leToBytes","base64","min","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","out","toHex","bytes","checkOffset","ext","checkInt","max","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","ieee754","writeDouble","base64clean","stringtrim","INVALID_BASE64_RE","trim","units","leadSurrogate","byteArray","hi","lo","src","dst","INSPECT_MAX_BYTES","poolSize","_augment","Symbol","species","defineProperty","configurable","allocUnsafeSlow","_isBuffer","compare","x","y","pos","swap16","swap32","swap64","equals","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","_arr","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","maxBytes","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set","used","util","use","core","expect","assert","NOOP","_chai","Assertion","addProperty","addMethod","addChainableMethod","chainingBehavior","addChainableNoop","overwriteProperty","overwriteMethod","overwriteChainableMethod","expr","negateMsg","expected","_actual","ok","test","getMessage","getActual","_","article","charAt","includeChainingBehavior","include","eql","k","subset","checkArguments","assertEqual","assertEql","assertAbove","to","assertLeast","assertBelow","assertMost","assertInstanceOf","assertOwnProperty","assertLengthChain","assertLength","assertKeys","every","last","sort","assertThrows","errMsg","is","thrown","desiredError","thrownError","actuallyGot","expectedThrown","isSubsetOf","superset","cmp","elem","some","elem2","chain","negate","finish","range","descriptor","getPathValue","method","itself","context","matcher","objDisplay","delta","abs","express","errmsg","fail","operator","notOk","act","exp","notEqual","strictEqual","notStrictEqual","deepEqual","notDeepEqual","isTrue","isFalse","isNull","isNotNull","isUndefined","isDefined","isFunction","isNotFunction","isObject","isNotObject","isNotArray","isString","isNotString","isNumber","isNotNumber","isBoolean","isNotBoolean","typeOf","notTypeOf","instanceOf","notInstanceOf","inc","notInclude","notMatch","prop","notProperty","deepProperty","deep","notDeepProperty","propertyVal","propertyNotVal","deepPropertyVal","deepPropertyNotVal","lengthOf","Throw","errt","errs","assertErr","doesNotThrow","val2","eval","closeTo","sameMembers","set1","set2","same","members","includeMembers","ifError","alias","as","loadShould","shouldGetter","Boolean","shouldSetter","enumerable","writable","val1","exist","Should","transferFlags","hasProtoSupport","excludeNames","chainableBehavior","__methods","old_ssfi","asserterNames","getOwnPropertyNames","asserterName","pd","getOwnPropertyDescriptor","getter","flagMsg","parsePath","path","mArr","parseFloat","_getPathValue","part","subject","proto","_chainingBehavior","_method","_super","_get","natives","[object Arguments]","[object Array]","[object Date]","[object Function]","[object Number]","[object RegExp]","[object String]","sameValue","dateEqual","regexpEqual","bufferEqual","argumentsEqual","typeEqual","objectEqual","getTime","iterableEqual","isValue","ka","kb","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","s","NaN","rt","LN2","getType","Library","tests","of","define","ReferenceError"],"mappings":"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","file":"tests.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {\"use strict\";\n\t\n\tvar promisePolyfill = __webpack_require__(8);\n\tif (!global.Promise) {\n\t    global.Promise = promisePolyfill;\n\t}\n\t\n\tmocha.setup('bdd');\n\tchai.should();\n\t__webpack_require__(22).run(SPScript);\n\t\n\tmocha.run();\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\n\t  /**\n\t   * ### config.includeStack\n\t   *\n\t   * User configurable property, influences whether stack trace\n\t   * is included in Assertion error message. Default of false\n\t   * suppresses stack trace in the error message.\n\t   *\n\t   *     chai.config.includeStack = true;  // enable stack on error\n\t   *\n\t   * @param {Boolean}\n\t   * @api public\n\t   */\n\t\n\t   includeStack: false,\n\t\n\t  /**\n\t   * ### config.showDiff\n\t   *\n\t   * User configurable property, influences whether or not\n\t   * the `showDiff` flag should be included in the thrown\n\t   * AssertionErrors. `false` will always be `false`; `true`\n\t   * will be true when the assertion has requested a diff\n\t   * be shown.\n\t   *\n\t   * @param {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  showDiff: true,\n\t\n\t  /**\n\t   * ### config.truncateThreshold\n\t   *\n\t   * User configurable property, sets length threshold for actual and\n\t   * expected values in assertion errors. If this threshold is exceeded,\n\t   * the value is truncated.\n\t   *\n\t   * Set it to zero if you want to disable truncating altogether.\n\t   *\n\t   *     chai.config.truncateThreshold = 0;  // disable truncating\n\t   *\n\t   * @param {Number}\n\t   * @api public\n\t   */\n\t\n\t  truncateThreshold: 40\n\t\n\t};\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n\t/*!\n\t * Chai - flag utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/**\n\t * ### flag(object ,key, [value])\n\t *\n\t * Get or set a flag value on an object. If a\n\t * value is provided it will be set, else it will\n\t * return the currently set value or `undefined` if\n\t * the value is not set.\n\t *\n\t *     utils.flag(this, 'foo', 'bar'); // setter\n\t *     utils.flag(this, 'foo'); // getter, returns `bar`\n\t *\n\t * @param {Object} object (constructed Assertion\n\t * @param {String} key\n\t * @param {Mixed} value (optional)\n\t * @name flag\n\t * @api private\n\t */\n\t\n\tmodule.exports = function (obj, key, value) {\n\t  var flags = obj.__flags || (obj.__flags = Object.create(null));\n\t  if (arguments.length === 3) {\n\t    flags[key] = value;\n\t  } else {\n\t    return flags[key];\n\t  }\n\t};\n\n\n/***/ }),\n/* 3 */,\n/* 4 */,\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(27);\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// This is (almost) directly from Node.js utils\n\t// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js\n\t\n\tvar getName = __webpack_require__(12);\n\tvar getProperties = __webpack_require__(39);\n\tvar getEnumerableProperties = __webpack_require__(36);\n\t\n\tmodule.exports = inspect;\n\t\n\t/**\n\t * Echos the value of a value. Trys to print the value out\n\t * in the best way possible given the different types.\n\t *\n\t * @param {Object} obj The object to print out.\n\t * @param {Boolean} showHidden Flag that shows hidden (not enumerable)\n\t *    properties of objects.\n\t * @param {Number} depth Depth in which to descend in object. Default is 2.\n\t * @param {Boolean} colors Flag to turn on ANSI escape codes to color the\n\t *    output. Default is false (no coloring).\n\t */\n\tfunction inspect(obj, showHidden, depth, colors) {\n\t  var ctx = {\n\t    showHidden: showHidden,\n\t    seen: [],\n\t    stylize: function (str) { return str; }\n\t  };\n\t  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));\n\t}\n\t\n\t// Returns true if object is a DOM element.\n\tvar isDOMElement = function (object) {\n\t  if (typeof HTMLElement === 'object') {\n\t    return object instanceof HTMLElement;\n\t  } else {\n\t    return object &&\n\t      typeof object === 'object' &&\n\t      object.nodeType === 1 &&\n\t      typeof object.nodeName === 'string';\n\t  }\n\t};\n\t\n\tfunction formatValue(ctx, value, recurseTimes) {\n\t  // Provide a hook for user-specified inspect functions.\n\t  // Check that value is an object with an inspect function on it\n\t  if (value && typeof value.inspect === 'function' &&\n\t      // Filter out the util module, it's inspect function is special\n\t      value.inspect !== exports.inspect &&\n\t      // Also filter out any prototype objects using the circular check.\n\t      !(value.constructor && value.constructor.prototype === value)) {\n\t    var ret = value.inspect(recurseTimes);\n\t    if (typeof ret !== 'string') {\n\t      ret = formatValue(ctx, ret, recurseTimes);\n\t    }\n\t    return ret;\n\t  }\n\t\n\t  // Primitive types cannot have properties\n\t  var primitive = formatPrimitive(ctx, value);\n\t  if (primitive) {\n\t    return primitive;\n\t  }\n\t\n\t  // If this is a DOM element, try to get the outer HTML.\n\t  if (isDOMElement(value)) {\n\t    if ('outerHTML' in value) {\n\t      return value.outerHTML;\n\t      // This value does not have an outerHTML attribute,\n\t      //   it could still be an XML element\n\t    } else {\n\t      // Attempt to serialize it\n\t      try {\n\t        if (document.xmlVersion) {\n\t          var xmlSerializer = new XMLSerializer();\n\t          return xmlSerializer.serializeToString(value);\n\t        } else {\n\t          // Firefox 11- do not support outerHTML\n\t          //   It does, however, support innerHTML\n\t          //   Use the following to render the element\n\t          var ns = \"http://www.w3.org/1999/xhtml\";\n\t          var container = document.createElementNS(ns, '_');\n\t\n\t          container.appendChild(value.cloneNode(false));\n\t          html = container.innerHTML\n\t            .replace('><', '>' + value.innerHTML + '<');\n\t          container.innerHTML = '';\n\t          return html;\n\t        }\n\t      } catch (err) {\n\t        // This could be a non-native DOM implementation,\n\t        //   continue with the normal flow:\n\t        //   printing the element as if it is an object.\n\t      }\n\t    }\n\t  }\n\t\n\t  // Look up the keys of the object.\n\t  var visibleKeys = getEnumerableProperties(value);\n\t  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;\n\t\n\t  // Some type of object without properties can be shortcutted.\n\t  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,\n\t  // a `stack` plus `description` property; ignore those for consistency.\n\t  if (keys.length === 0 || (isError(value) && (\n\t      (keys.length === 1 && keys[0] === 'stack') ||\n\t      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')\n\t     ))) {\n\t    if (typeof value === 'function') {\n\t      var name = getName(value);\n\t      var nameSuffix = name ? ': ' + name : '';\n\t      return ctx.stylize('[Function' + nameSuffix + ']', 'special');\n\t    }\n\t    if (isRegExp(value)) {\n\t      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n\t    }\n\t    if (isDate(value)) {\n\t      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');\n\t    }\n\t    if (isError(value)) {\n\t      return formatError(value);\n\t    }\n\t  }\n\t\n\t  var base = '', array = false, braces = ['{', '}'];\n\t\n\t  // Make Array say that they are Array\n\t  if (isArray(value)) {\n\t    array = true;\n\t    braces = ['[', ']'];\n\t  }\n\t\n\t  // Make functions say that they are functions\n\t  if (typeof value === 'function') {\n\t    var name = getName(value);\n\t    var nameSuffix = name ? ': ' + name : '';\n\t    base = ' [Function' + nameSuffix + ']';\n\t  }\n\t\n\t  // Make RegExps say that they are RegExps\n\t  if (isRegExp(value)) {\n\t    base = ' ' + RegExp.prototype.toString.call(value);\n\t  }\n\t\n\t  // Make dates with properties first say the date\n\t  if (isDate(value)) {\n\t    base = ' ' + Date.prototype.toUTCString.call(value);\n\t  }\n\t\n\t  // Make error with message first say the error\n\t  if (isError(value)) {\n\t    return formatError(value);\n\t  }\n\t\n\t  if (keys.length === 0 && (!array || value.length == 0)) {\n\t    return braces[0] + base + braces[1];\n\t  }\n\t\n\t  if (recurseTimes < 0) {\n\t    if (isRegExp(value)) {\n\t      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n\t    } else {\n\t      return ctx.stylize('[Object]', 'special');\n\t    }\n\t  }\n\t\n\t  ctx.seen.push(value);\n\t\n\t  var output;\n\t  if (array) {\n\t    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n\t  } else {\n\t    output = keys.map(function(key) {\n\t      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n\t    });\n\t  }\n\t\n\t  ctx.seen.pop();\n\t\n\t  return reduceToSingleString(output, base, braces);\n\t}\n\t\n\t\n\tfunction formatPrimitive(ctx, value) {\n\t  switch (typeof value) {\n\t    case 'undefined':\n\t      return ctx.stylize('undefined', 'undefined');\n\t\n\t    case 'string':\n\t      var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n\t                                               .replace(/'/g, \"\\\\'\")\n\t                                               .replace(/\\\\\"/g, '\"') + '\\'';\n\t      return ctx.stylize(simple, 'string');\n\t\n\t    case 'number':\n\t      if (value === 0 && (1/value) === -Infinity) {\n\t        return ctx.stylize('-0', 'number');\n\t      }\n\t      return ctx.stylize('' + value, 'number');\n\t\n\t    case 'boolean':\n\t      return ctx.stylize('' + value, 'boolean');\n\t  }\n\t  // For some reason typeof null is \"object\", so special case here.\n\t  if (value === null) {\n\t    return ctx.stylize('null', 'null');\n\t  }\n\t}\n\t\n\t\n\tfunction formatError(value) {\n\t  return '[' + Error.prototype.toString.call(value) + ']';\n\t}\n\t\n\t\n\tfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n\t  var output = [];\n\t  for (var i = 0, l = value.length; i < l; ++i) {\n\t    if (Object.prototype.hasOwnProperty.call(value, String(i))) {\n\t      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n\t          String(i), true));\n\t    } else {\n\t      output.push('');\n\t    }\n\t  }\n\t  keys.forEach(function(key) {\n\t    if (!key.match(/^\\d+$/)) {\n\t      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n\t          key, true));\n\t    }\n\t  });\n\t  return output;\n\t}\n\t\n\t\n\tfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n\t  var name, str;\n\t  if (value.__lookupGetter__) {\n\t    if (value.__lookupGetter__(key)) {\n\t      if (value.__lookupSetter__(key)) {\n\t        str = ctx.stylize('[Getter/Setter]', 'special');\n\t      } else {\n\t        str = ctx.stylize('[Getter]', 'special');\n\t      }\n\t    } else {\n\t      if (value.__lookupSetter__(key)) {\n\t        str = ctx.stylize('[Setter]', 'special');\n\t      }\n\t    }\n\t  }\n\t  if (visibleKeys.indexOf(key) < 0) {\n\t    name = '[' + key + ']';\n\t  }\n\t  if (!str) {\n\t    if (ctx.seen.indexOf(value[key]) < 0) {\n\t      if (recurseTimes === null) {\n\t        str = formatValue(ctx, value[key], null);\n\t      } else {\n\t        str = formatValue(ctx, value[key], recurseTimes - 1);\n\t      }\n\t      if (str.indexOf('\\n') > -1) {\n\t        if (array) {\n\t          str = str.split('\\n').map(function(line) {\n\t            return '  ' + line;\n\t          }).join('\\n').substr(2);\n\t        } else {\n\t          str = '\\n' + str.split('\\n').map(function(line) {\n\t            return '   ' + line;\n\t          }).join('\\n');\n\t        }\n\t      }\n\t    } else {\n\t      str = ctx.stylize('[Circular]', 'special');\n\t    }\n\t  }\n\t  if (typeof name === 'undefined') {\n\t    if (array && key.match(/^\\d+$/)) {\n\t      return str;\n\t    }\n\t    name = JSON.stringify('' + key);\n\t    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n\t      name = name.substr(1, name.length - 2);\n\t      name = ctx.stylize(name, 'name');\n\t    } else {\n\t      name = name.replace(/'/g, \"\\\\'\")\n\t                 .replace(/\\\\\"/g, '\"')\n\t                 .replace(/(^\"|\"$)/g, \"'\");\n\t      name = ctx.stylize(name, 'string');\n\t    }\n\t  }\n\t\n\t  return name + ': ' + str;\n\t}\n\t\n\t\n\tfunction reduceToSingleString(output, base, braces) {\n\t  var numLinesEst = 0;\n\t  var length = output.reduce(function(prev, cur) {\n\t    numLinesEst++;\n\t    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n\t    return prev + cur.length + 1;\n\t  }, 0);\n\t\n\t  if (length > 60) {\n\t    return braces[0] +\n\t           (base === '' ? '' : base + '\\n ') +\n\t           ' ' +\n\t           output.join(',\\n  ') +\n\t           ' ' +\n\t           braces[1];\n\t  }\n\t\n\t  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n\t}\n\t\n\tfunction isArray(ar) {\n\t  return Array.isArray(ar) ||\n\t         (typeof ar === 'object' && objectToString(ar) === '[object Array]');\n\t}\n\t\n\tfunction isRegExp(re) {\n\t  return typeof re === 'object' && objectToString(re) === '[object RegExp]';\n\t}\n\t\n\tfunction isDate(d) {\n\t  return typeof d === 'object' && objectToString(d) === '[object Date]';\n\t}\n\t\n\tfunction isError(e) {\n\t  return typeof e === 'object' && objectToString(e) === '[object Error]';\n\t}\n\t\n\tfunction objectToString(o) {\n\t  return Object.prototype.toString.call(o);\n\t}\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\n\t// shim for using process in browser\n\tvar process = module.exports = {};\n\t\n\t// cached from whatever global is present so that test runners that stub it\n\t// don't break things.  But we need to wrap it in a try catch in case it is\n\t// wrapped in strict mode code which doesn't define any globals.  It's inside a\n\t// function because try/catches deoptimize in certain engines.\n\t\n\tvar cachedSetTimeout;\n\tvar cachedClearTimeout;\n\t\n\tfunction defaultSetTimout() {\n\t    throw new Error('setTimeout has not been defined');\n\t}\n\tfunction defaultClearTimeout () {\n\t    throw new Error('clearTimeout has not been defined');\n\t}\n\t(function () {\n\t    try {\n\t        if (typeof setTimeout === 'function') {\n\t            cachedSetTimeout = setTimeout;\n\t        } else {\n\t            cachedSetTimeout = defaultSetTimout;\n\t        }\n\t    } catch (e) {\n\t        cachedSetTimeout = defaultSetTimout;\n\t    }\n\t    try {\n\t        if (typeof clearTimeout === 'function') {\n\t            cachedClearTimeout = clearTimeout;\n\t        } else {\n\t            cachedClearTimeout = defaultClearTimeout;\n\t        }\n\t    } catch (e) {\n\t        cachedClearTimeout = defaultClearTimeout;\n\t    }\n\t} ())\n\tfunction runTimeout(fun) {\n\t    if (cachedSetTimeout === setTimeout) {\n\t        //normal enviroments in sane situations\n\t        return setTimeout(fun, 0);\n\t    }\n\t    // if setTimeout wasn't available but was latter defined\n\t    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n\t        cachedSetTimeout = setTimeout;\n\t        return setTimeout(fun, 0);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedSetTimeout(fun, 0);\n\t    } catch(e){\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n\t            return cachedSetTimeout.call(null, fun, 0);\n\t        } catch(e){\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n\t            return cachedSetTimeout.call(this, fun, 0);\n\t        }\n\t    }\n\t\n\t\n\t}\n\tfunction runClearTimeout(marker) {\n\t    if (cachedClearTimeout === clearTimeout) {\n\t        //normal enviroments in sane situations\n\t        return clearTimeout(marker);\n\t    }\n\t    // if clearTimeout wasn't available but was latter defined\n\t    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n\t        cachedClearTimeout = clearTimeout;\n\t        return clearTimeout(marker);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedClearTimeout(marker);\n\t    } catch (e){\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n\t            return cachedClearTimeout.call(null, marker);\n\t        } catch (e){\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n\t            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n\t            return cachedClearTimeout.call(this, marker);\n\t        }\n\t    }\n\t\n\t\n\t\n\t}\n\tvar queue = [];\n\tvar draining = false;\n\tvar currentQueue;\n\tvar queueIndex = -1;\n\t\n\tfunction cleanUpNextTick() {\n\t    if (!draining || !currentQueue) {\n\t        return;\n\t    }\n\t    draining = false;\n\t    if (currentQueue.length) {\n\t        queue = currentQueue.concat(queue);\n\t    } else {\n\t        queueIndex = -1;\n\t    }\n\t    if (queue.length) {\n\t        drainQueue();\n\t    }\n\t}\n\t\n\tfunction drainQueue() {\n\t    if (draining) {\n\t        return;\n\t    }\n\t    var timeout = runTimeout(cleanUpNextTick);\n\t    draining = true;\n\t\n\t    var len = queue.length;\n\t    while(len) {\n\t        currentQueue = queue;\n\t        queue = [];\n\t        while (++queueIndex < len) {\n\t            if (currentQueue) {\n\t                currentQueue[queueIndex].run();\n\t            }\n\t        }\n\t        queueIndex = -1;\n\t        len = queue.length;\n\t    }\n\t    currentQueue = null;\n\t    draining = false;\n\t    runClearTimeout(timeout);\n\t}\n\t\n\tprocess.nextTick = function (fun) {\n\t    var args = new Array(arguments.length - 1);\n\t    if (arguments.length > 1) {\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            args[i - 1] = arguments[i];\n\t        }\n\t    }\n\t    queue.push(new Item(fun, args));\n\t    if (queue.length === 1 && !draining) {\n\t        runTimeout(drainQueue);\n\t    }\n\t};\n\t\n\t// v8 likes predictible objects\n\tfunction Item(fun, array) {\n\t    this.fun = fun;\n\t    this.array = array;\n\t}\n\tItem.prototype.run = function () {\n\t    this.fun.apply(null, this.array);\n\t};\n\tprocess.title = 'browser';\n\tprocess.browser = true;\n\tprocess.env = {};\n\tprocess.argv = [];\n\tprocess.version = ''; // empty string to avoid regexp issues\n\tprocess.versions = {};\n\t\n\tfunction noop() {}\n\t\n\tprocess.on = noop;\n\tprocess.addListener = noop;\n\tprocess.once = noop;\n\tprocess.off = noop;\n\tprocess.removeListener = noop;\n\tprocess.removeAllListeners = noop;\n\tprocess.emit = noop;\n\tprocess.prependListener = noop;\n\tprocess.prependOnceListener = noop;\n\t\n\tprocess.listeners = function (name) { return [] }\n\t\n\tprocess.binding = function (name) {\n\t    throw new Error('process.binding is not supported');\n\t};\n\t\n\tprocess.cwd = function () { return '/' };\n\tprocess.chdir = function (dir) {\n\t    throw new Error('process.chdir is not supported');\n\t};\n\tprocess.umask = function() { return 0; };\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(setImmediate) {(function (root) {\n\t\n\t  // Store setTimeout reference so promise-polyfill will be unaffected by\n\t  // other code modifying setTimeout (like sinon.useFakeTimers())\n\t  var setTimeoutFunc = setTimeout;\n\t\n\t  function noop() {}\n\t  \n\t  // Polyfill for Function.prototype.bind\n\t  function bind(fn, thisArg) {\n\t    return function () {\n\t      fn.apply(thisArg, arguments);\n\t    };\n\t  }\n\t\n\t  function Promise(fn) {\n\t    if (typeof this !== 'object') throw new TypeError('Promises must be constructed via new');\n\t    if (typeof fn !== 'function') throw new TypeError('not a function');\n\t    this._state = 0;\n\t    this._handled = false;\n\t    this._value = undefined;\n\t    this._deferreds = [];\n\t\n\t    doResolve(fn, this);\n\t  }\n\t\n\t  function handle(self, deferred) {\n\t    while (self._state === 3) {\n\t      self = self._value;\n\t    }\n\t    if (self._state === 0) {\n\t      self._deferreds.push(deferred);\n\t      return;\n\t    }\n\t    self._handled = true;\n\t    Promise._immediateFn(function () {\n\t      var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;\n\t      if (cb === null) {\n\t        (self._state === 1 ? resolve : reject)(deferred.promise, self._value);\n\t        return;\n\t      }\n\t      var ret;\n\t      try {\n\t        ret = cb(self._value);\n\t      } catch (e) {\n\t        reject(deferred.promise, e);\n\t        return;\n\t      }\n\t      resolve(deferred.promise, ret);\n\t    });\n\t  }\n\t\n\t  function resolve(self, newValue) {\n\t    try {\n\t      // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n\t      if (newValue === self) throw new TypeError('A promise cannot be resolved with itself.');\n\t      if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {\n\t        var then = newValue.then;\n\t        if (newValue instanceof Promise) {\n\t          self._state = 3;\n\t          self._value = newValue;\n\t          finale(self);\n\t          return;\n\t        } else if (typeof then === 'function') {\n\t          doResolve(bind(then, newValue), self);\n\t          return;\n\t        }\n\t      }\n\t      self._state = 1;\n\t      self._value = newValue;\n\t      finale(self);\n\t    } catch (e) {\n\t      reject(self, e);\n\t    }\n\t  }\n\t\n\t  function reject(self, newValue) {\n\t    self._state = 2;\n\t    self._value = newValue;\n\t    finale(self);\n\t  }\n\t\n\t  function finale(self) {\n\t    if (self._state === 2 && self._deferreds.length === 0) {\n\t      Promise._immediateFn(function() {\n\t        if (!self._handled) {\n\t          Promise._unhandledRejectionFn(self._value);\n\t        }\n\t      });\n\t    }\n\t\n\t    for (var i = 0, len = self._deferreds.length; i < len; i++) {\n\t      handle(self, self._deferreds[i]);\n\t    }\n\t    self._deferreds = null;\n\t  }\n\t\n\t  function Handler(onFulfilled, onRejected, promise) {\n\t    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n\t    this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n\t    this.promise = promise;\n\t  }\n\t\n\t  /**\n\t   * Take a potentially misbehaving resolver function and make sure\n\t   * onFulfilled and onRejected are only called once.\n\t   *\n\t   * Makes no guarantees about asynchrony.\n\t   */\n\t  function doResolve(fn, self) {\n\t    var done = false;\n\t    try {\n\t      fn(function (value) {\n\t        if (done) return;\n\t        done = true;\n\t        resolve(self, value);\n\t      }, function (reason) {\n\t        if (done) return;\n\t        done = true;\n\t        reject(self, reason);\n\t      });\n\t    } catch (ex) {\n\t      if (done) return;\n\t      done = true;\n\t      reject(self, ex);\n\t    }\n\t  }\n\t\n\t  Promise.prototype['catch'] = function (onRejected) {\n\t    return this.then(null, onRejected);\n\t  };\n\t\n\t  Promise.prototype.then = function (onFulfilled, onRejected) {\n\t    var prom = new (this.constructor)(noop);\n\t\n\t    handle(this, new Handler(onFulfilled, onRejected, prom));\n\t    return prom;\n\t  };\n\t\n\t  Promise.all = function (arr) {\n\t    var args = Array.prototype.slice.call(arr);\n\t\n\t    return new Promise(function (resolve, reject) {\n\t      if (args.length === 0) return resolve([]);\n\t      var remaining = args.length;\n\t\n\t      function res(i, val) {\n\t        try {\n\t          if (val && (typeof val === 'object' || typeof val === 'function')) {\n\t            var then = val.then;\n\t            if (typeof then === 'function') {\n\t              then.call(val, function (val) {\n\t                res(i, val);\n\t              }, reject);\n\t              return;\n\t            }\n\t          }\n\t          args[i] = val;\n\t          if (--remaining === 0) {\n\t            resolve(args);\n\t          }\n\t        } catch (ex) {\n\t          reject(ex);\n\t        }\n\t      }\n\t\n\t      for (var i = 0; i < args.length; i++) {\n\t        res(i, args[i]);\n\t      }\n\t    });\n\t  };\n\t\n\t  Promise.resolve = function (value) {\n\t    if (value && typeof value === 'object' && value.constructor === Promise) {\n\t      return value;\n\t    }\n\t\n\t    return new Promise(function (resolve) {\n\t      resolve(value);\n\t    });\n\t  };\n\t\n\t  Promise.reject = function (value) {\n\t    return new Promise(function (resolve, reject) {\n\t      reject(value);\n\t    });\n\t  };\n\t\n\t  Promise.race = function (values) {\n\t    return new Promise(function (resolve, reject) {\n\t      for (var i = 0, len = values.length; i < len; i++) {\n\t        values[i].then(resolve, reject);\n\t      }\n\t    });\n\t  };\n\t\n\t  // Use polyfill for setImmediate for performance gains\n\t  Promise._immediateFn = (typeof setImmediate === 'function' && function (fn) { setImmediate(fn); }) ||\n\t    function (fn) {\n\t      setTimeoutFunc(fn, 0);\n\t    };\n\t\n\t  Promise._unhandledRejectionFn = function _unhandledRejectionFn(err) {\n\t    if (typeof console !== 'undefined' && console) {\n\t      console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Set the immediate function to execute callbacks\n\t   * @param fn {function} Function to execute\n\t   * @deprecated\n\t   */\n\t  Promise._setImmediateFn = function _setImmediateFn(fn) {\n\t    Promise._immediateFn = fn;\n\t  };\n\t\n\t  /**\n\t   * Change the function to execute on unhandled rejection\n\t   * @param {function} fn Function to execute on unhandled rejection\n\t   * @deprecated\n\t   */\n\t  Promise._setUnhandledRejectionFn = function _setUnhandledRejectionFn(fn) {\n\t    Promise._unhandledRejectionFn = fn;\n\t  };\n\t  \n\t  if (typeof module !== 'undefined' && module.exports) {\n\t    module.exports = Promise;\n\t  } else if (!root.Promise) {\n\t    root.Promise = Promise;\n\t  }\n\t\n\t})(this);\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10).setImmediate))\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n\t    \"use strict\";\n\t\n\t    if (global.setImmediate) {\n\t        return;\n\t    }\n\t\n\t    var nextHandle = 1; // Spec says greater than zero\n\t    var tasksByHandle = {};\n\t    var currentlyRunningATask = false;\n\t    var doc = global.document;\n\t    var registerImmediate;\n\t\n\t    function setImmediate(callback) {\n\t      // Callback can either be a function or a string\n\t      if (typeof callback !== \"function\") {\n\t        callback = new Function(\"\" + callback);\n\t      }\n\t      // Copy function arguments\n\t      var args = new Array(arguments.length - 1);\n\t      for (var i = 0; i < args.length; i++) {\n\t          args[i] = arguments[i + 1];\n\t      }\n\t      // Store and register the task\n\t      var task = { callback: callback, args: args };\n\t      tasksByHandle[nextHandle] = task;\n\t      registerImmediate(nextHandle);\n\t      return nextHandle++;\n\t    }\n\t\n\t    function clearImmediate(handle) {\n\t        delete tasksByHandle[handle];\n\t    }\n\t\n\t    function run(task) {\n\t        var callback = task.callback;\n\t        var args = task.args;\n\t        switch (args.length) {\n\t        case 0:\n\t            callback();\n\t            break;\n\t        case 1:\n\t            callback(args[0]);\n\t            break;\n\t        case 2:\n\t            callback(args[0], args[1]);\n\t            break;\n\t        case 3:\n\t            callback(args[0], args[1], args[2]);\n\t            break;\n\t        default:\n\t            callback.apply(undefined, args);\n\t            break;\n\t        }\n\t    }\n\t\n\t    function runIfPresent(handle) {\n\t        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n\t        // So if we're currently running a task, we'll need to delay this invocation.\n\t        if (currentlyRunningATask) {\n\t            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n\t            // \"too much recursion\" error.\n\t            setTimeout(runIfPresent, 0, handle);\n\t        } else {\n\t            var task = tasksByHandle[handle];\n\t            if (task) {\n\t                currentlyRunningATask = true;\n\t                try {\n\t                    run(task);\n\t                } finally {\n\t                    clearImmediate(handle);\n\t                    currentlyRunningATask = false;\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    function installNextTickImplementation() {\n\t        registerImmediate = function(handle) {\n\t            process.nextTick(function () { runIfPresent(handle); });\n\t        };\n\t    }\n\t\n\t    function canUsePostMessage() {\n\t        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n\t        // where `global.postMessage` means something completely different and can't be used for this purpose.\n\t        if (global.postMessage && !global.importScripts) {\n\t            var postMessageIsAsynchronous = true;\n\t            var oldOnMessage = global.onmessage;\n\t            global.onmessage = function() {\n\t                postMessageIsAsynchronous = false;\n\t            };\n\t            global.postMessage(\"\", \"*\");\n\t            global.onmessage = oldOnMessage;\n\t            return postMessageIsAsynchronous;\n\t        }\n\t    }\n\t\n\t    function installPostMessageImplementation() {\n\t        // Installs an event handler on `global` for the `message` event: see\n\t        // * https://developer.mozilla.org/en/DOM/window.postMessage\n\t        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\t\n\t        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n\t        var onGlobalMessage = function(event) {\n\t            if (event.source === global &&\n\t                typeof event.data === \"string\" &&\n\t                event.data.indexOf(messagePrefix) === 0) {\n\t                runIfPresent(+event.data.slice(messagePrefix.length));\n\t            }\n\t        };\n\t\n\t        if (global.addEventListener) {\n\t            global.addEventListener(\"message\", onGlobalMessage, false);\n\t        } else {\n\t            global.attachEvent(\"onmessage\", onGlobalMessage);\n\t        }\n\t\n\t        registerImmediate = function(handle) {\n\t            global.postMessage(messagePrefix + handle, \"*\");\n\t        };\n\t    }\n\t\n\t    function installMessageChannelImplementation() {\n\t        var channel = new MessageChannel();\n\t        channel.port1.onmessage = function(event) {\n\t            var handle = event.data;\n\t            runIfPresent(handle);\n\t        };\n\t\n\t        registerImmediate = function(handle) {\n\t            channel.port2.postMessage(handle);\n\t        };\n\t    }\n\t\n\t    function installReadyStateChangeImplementation() {\n\t        var html = doc.documentElement;\n\t        registerImmediate = function(handle) {\n\t            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n\t            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n\t            var script = doc.createElement(\"script\");\n\t            script.onreadystatechange = function () {\n\t                runIfPresent(handle);\n\t                script.onreadystatechange = null;\n\t                html.removeChild(script);\n\t                script = null;\n\t            };\n\t            html.appendChild(script);\n\t        };\n\t    }\n\t\n\t    function installSetTimeoutImplementation() {\n\t        registerImmediate = function(handle) {\n\t            setTimeout(runIfPresent, 0, handle);\n\t        };\n\t    }\n\t\n\t    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n\t    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n\t    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\t\n\t    // Don't get fooled by e.g. browserify environments.\n\t    if ({}.toString.call(global.process) === \"[object process]\") {\n\t        // For Node.js before 0.9\n\t        installNextTickImplementation();\n\t\n\t    } else if (canUsePostMessage()) {\n\t        // For non-IE10 modern browsers\n\t        installPostMessageImplementation();\n\t\n\t    } else if (global.MessageChannel) {\n\t        // For web workers, where supported\n\t        installMessageChannelImplementation();\n\t\n\t    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n\t        // For IE 6–8\n\t        installReadyStateChangeImplementation();\n\t\n\t    } else {\n\t        // For older browsers\n\t        installSetTimeoutImplementation();\n\t    }\n\t\n\t    attachTo.setImmediate = setImmediate;\n\t    attachTo.clearImmediate = clearImmediate;\n\t}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(7)))\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar apply = Function.prototype.apply;\n\t\n\t// DOM APIs, for completeness\n\t\n\texports.setTimeout = function() {\n\t  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n\t};\n\texports.setInterval = function() {\n\t  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n\t};\n\texports.clearTimeout =\n\texports.clearInterval = function(timeout) {\n\t  if (timeout) {\n\t    timeout.close();\n\t  }\n\t};\n\t\n\tfunction Timeout(id, clearFn) {\n\t  this._id = id;\n\t  this._clearFn = clearFn;\n\t}\n\tTimeout.prototype.unref = Timeout.prototype.ref = function() {};\n\tTimeout.prototype.close = function() {\n\t  this._clearFn.call(window, this._id);\n\t};\n\t\n\t// Does not start the time, just sets up the members needed.\n\texports.enroll = function(item, msecs) {\n\t  clearTimeout(item._idleTimeoutId);\n\t  item._idleTimeout = msecs;\n\t};\n\t\n\texports.unenroll = function(item) {\n\t  clearTimeout(item._idleTimeoutId);\n\t  item._idleTimeout = -1;\n\t};\n\t\n\texports._unrefActive = exports.active = function(item) {\n\t  clearTimeout(item._idleTimeoutId);\n\t\n\t  var msecs = item._idleTimeout;\n\t  if (msecs >= 0) {\n\t    item._idleTimeoutId = setTimeout(function onTimeout() {\n\t      if (item._onTimeout)\n\t        item._onTimeout();\n\t    }, msecs);\n\t  }\n\t};\n\t\n\t// setimmediate attaches itself to the global object\n\t__webpack_require__(9);\n\texports.setImmediate = setImmediate;\n\texports.clearImmediate = clearImmediate;\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports) {\n\n\t/*!\n\t * Chai - getActual utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/**\n\t * # getActual(object, [actual])\n\t *\n\t * Returns the `actual` value for an Assertion\n\t *\n\t * @param {Object} object (constructed Assertion)\n\t * @param {Arguments} chai.Assertion.prototype.assert arguments\n\t */\n\t\n\tmodule.exports = function (obj, args) {\n\t  return args.length > 4 ? args[4] : obj._obj;\n\t};\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports) {\n\n\t/*!\n\t * Chai - getName utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/**\n\t * # getName(func)\n\t *\n\t * Gets the name of a function, in a cross-browser way.\n\t *\n\t * @param {Function} a function (usually a constructor)\n\t */\n\t\n\tmodule.exports = function (func) {\n\t  if (func.name) return func.name;\n\t\n\t  var match = /^\\s?function ([^(]*)\\(/.exec(func);\n\t  return match && match[1] ? match[1] : \"\";\n\t};\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Chai - flag utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/*!\n\t * Module dependancies\n\t */\n\t\n\tvar inspect = __webpack_require__(6);\n\tvar config = __webpack_require__(1);\n\t\n\t/**\n\t * ### .objDisplay (object)\n\t *\n\t * Determines if an object or an array matches\n\t * criteria to be inspected in-line for error\n\t * messages or should be truncated.\n\t *\n\t * @param {Mixed} javascript object to inspect\n\t * @name objDisplay\n\t * @api public\n\t */\n\t\n\tmodule.exports = function (obj) {\n\t  var str = inspect(obj)\n\t    , type = Object.prototype.toString.call(obj);\n\t\n\t  if (config.truncateThreshold && str.length >= config.truncateThreshold) {\n\t    if (type === '[object Function]') {\n\t      return !obj.name || obj.name === ''\n\t        ? '[Function]'\n\t        : '[Function: ' + obj.name + ']';\n\t    } else if (type === '[object Array]') {\n\t      return '[ Array(' + obj.length + ') ]';\n\t    } else if (type === '[object Object]') {\n\t      var keys = Object.keys(obj)\n\t        , kstr = keys.length > 2\n\t          ? keys.splice(0, 2).join(', ') + ', ...'\n\t          : keys.join(', ');\n\t      return '{ Object (' + kstr + ') }';\n\t    } else {\n\t      return str;\n\t    }\n\t  } else {\n\t    return str;\n\t  }\n\t};\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports) {\n\n\t/*!\n\t * Chai - transferFlags utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/**\n\t * ### transferFlags(assertion, object, includeAll = true)\n\t *\n\t * Transfer all the flags for `assertion` to `object`. If\n\t * `includeAll` is set to `false`, then the base Chai\n\t * assertion flags (namely `object`, `ssfi`, and `message`)\n\t * will not be transferred.\n\t *\n\t *\n\t *     var newAssertion = new Assertion();\n\t *     utils.transferFlags(assertion, newAssertion);\n\t *\n\t *     var anotherAsseriton = new Assertion(myObj);\n\t *     utils.transferFlags(assertion, anotherAssertion, false);\n\t *\n\t * @param {Assertion} assertion the assertion to transfer the flags from\n\t * @param {Object} object the object to transfer the flags too; usually a new assertion\n\t * @param {Boolean} includeAll\n\t * @name getAllFlags\n\t * @api private\n\t */\n\t\n\tmodule.exports = function (assertion, object, includeAll) {\n\t  var flags = assertion.__flags || (assertion.__flags = Object.create(null));\n\t\n\t  if (!object.__flags) {\n\t    object.__flags = Object.create(null);\n\t  }\n\t\n\t  includeAll = arguments.length === 3 ? includeAll : true;\n\t\n\t  for (var flag in flags) {\n\t    if (includeAll ||\n\t        (flag !== 'object' && flag !== 'ssfi' && flag != 'message')) {\n\t      object.__flags[flag] = flags[flag];\n\t    }\n\t  }\n\t};\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports) {\n\n\t/*!\n\t * assertion-error\n\t * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>\n\t * MIT Licensed\n\t */\n\t\n\t/*!\n\t * Return a function that will copy properties from\n\t * one object to another excluding any originally\n\t * listed. Returned function will create a new `{}`.\n\t *\n\t * @param {String} excluded properties ...\n\t * @return {Function}\n\t */\n\t\n\tfunction exclude () {\n\t  var excludes = [].slice.call(arguments);\n\t\n\t  function excludeProps (res, obj) {\n\t    Object.keys(obj).forEach(function (key) {\n\t      if (!~excludes.indexOf(key)) res[key] = obj[key];\n\t    });\n\t  }\n\t\n\t  return function extendExclude () {\n\t    var args = [].slice.call(arguments)\n\t      , i = 0\n\t      , res = {};\n\t\n\t    for (; i < args.length; i++) {\n\t      excludeProps(res, args[i]);\n\t    }\n\t\n\t    return res;\n\t  };\n\t};\n\t\n\t/*!\n\t * Primary Exports\n\t */\n\t\n\tmodule.exports = AssertionError;\n\t\n\t/**\n\t * ### AssertionError\n\t *\n\t * An extension of the JavaScript `Error` constructor for\n\t * assertion and validation scenarios.\n\t *\n\t * @param {String} message\n\t * @param {Object} properties to include (optional)\n\t * @param {callee} start stack function (optional)\n\t */\n\t\n\tfunction AssertionError (message, _props, ssf) {\n\t  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')\n\t    , props = extend(_props || {});\n\t\n\t  // default values\n\t  this.message = message || 'Unspecified AssertionError';\n\t  this.showDiff = false;\n\t\n\t  // copy from properties\n\t  for (var key in props) {\n\t    this[key] = props[key];\n\t  }\n\t\n\t  // capture stack trace\n\t  ssf = ssf || arguments.callee;\n\t  if (ssf && Error.captureStackTrace) {\n\t    Error.captureStackTrace(this, ssf);\n\t  }\n\t}\n\t\n\t/*!\n\t * Inherit from Error.prototype\n\t */\n\t\n\tAssertionError.prototype = Object.create(Error.prototype);\n\t\n\t/*!\n\t * Statically set name\n\t */\n\t\n\tAssertionError.prototype.name = 'AssertionError';\n\t\n\t/*!\n\t * Ensure correct constructor\n\t */\n\t\n\tAssertionError.prototype.constructor = AssertionError;\n\t\n\t/**\n\t * Allow errors to be converted to JSON for static transfer.\n\t *\n\t * @param {Boolean} include stack (default: `true`)\n\t * @return {Object} object that can be `JSON.stringify`\n\t */\n\t\n\tAssertionError.prototype.toJSON = function (stack) {\n\t  var extend = exclude('constructor', 'toJSON', 'stack')\n\t    , props = extend({ name: this.name }, this);\n\t\n\t  // include stack if exists and not turned off\n\t  if (false !== stack && this.stack) {\n\t    props.stack = this.stack;\n\t  }\n\t\n\t  return props;\n\t};\n\n\n/***/ }),\n/* 16 */,\n/* 17 */,\n/* 18 */,\n/* 19 */,\n/* 20 */,\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar should = __webpack_require__(5).should();\n\t\n\texports.run = function (SPScript) {\n\t    describe(\"var ctx = SPScript.createContext()\", function () {\n\t        var ctx = SPScript.createContext();\n\t        describe(\"Members\", function () {\n\t            it(\"Should create the primary object you use to interact with the site\", function () {\n\t                if (!ctx) throw new Error(\"Context is null\");\n\t                ctx.should.have.property(\"webUrl\");\n\t                ctx.should.have.property(\"executeRequest\");\n\t                ctx.should.have.property(\"get\");\n\t                ctx.should.have.property(\"post\");\n\t                ctx.should.have.property(\"authorizedPost\");\n\t                // ctx.should.have.property(\"web\");\n\t                // ctx.should.have.property(\"lists\");\n\t                // ctx.should.have.property(\"search\");\n\t                // ctx.should.have.property(\"profiles\");\n\t            });\n\t        });\n\t\n\t        describe(\"ctx.get(url, opts)\", function () {\n\t            var promise;\n\t            before(function () {\n\t                promise = ctx.get(\"/lists?$select=Title\");\n\t            });\n\t            it(\"Should return a Promise\", function () {\n\t                if (!promise) throw new Error(\"Promise is null\");\n\t                promise.should.have.property(\"then\");\n\t            });\n\t            it(\"Should resolve to a JS object, not a JSON string\", function (done) {\n\t                promise.then(function (data) {\n\t                    data.should.have.property(\"d\");\n\t                    done();\n\t                }).catch(function (err) {\n\t                    return done(err);\n\t                });\n\t            });\n\t            it(\"Should return valid API results: ctx.get('/lists')\", function (done) {\n\t                promise.then(function (data) {\n\t                    data.should.have.property(\"d\");\n\t                    data.d.should.have.property(\"results\");\n\t                    data.d.results.should.be.an(\"array\");\n\t                    done();\n\t                }).catch(function (err) {\n\t                    return done(err);\n\t                });\n\t            });\n\t        });\n\t\n\t        describe(\"ctx.getRequestDigest()\", function () {\n\t            it(\"Should resolve to a string request digest\", function (done) {\n\t                ctx.getRequestDigest().then(function (digest) {\n\t                    digest.should.be.a(\"string\");\n\t                    digest.should.not.be.empty;\n\t                    done();\n\t                });\n\t            });\n\t        });\n\t    });\n\t};\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\texports.run = function (SPScript, mode) {\n\t    console.log(\"SPScript Env: \" + SPScript._env);\n\t    var should = __webpack_require__(5).should();\n\t\n\t    describe(\"Global Namespaces\", function () {\n\t        it(\"Should have an _env property\", function () {\n\t            SPScript.should.have.property(\"_env\");\n\t            SPScript._env.should.be.a(\"string\");\n\t        });\n\t        it(\"Should have a utils namespace\", function () {\n\t            SPScript.should.not.be.null;\n\t            SPScript.should.have.property(\"utils\");\n\t        });\n\t\n\t        it(\"Should have a createContext method\", function () {\n\t            SPScript.should.have.property(\"createContext\");\n\t            SPScript.createContext.should.be.a(\"function\");\n\t        });\n\t    });\n\t    __webpack_require__(24).run(SPScript.utils);\n\t    __webpack_require__(21).run(SPScript);\n\t    var ctx = SPScript.createContext();\n\t    __webpack_require__(23).run(ctx);\n\t};\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t\n\texports.run = function (dao) {\n\t    describe(\"var list = SPScript.createContext().lists(listname)\", function () {\n\t        this.timeout(10000);\n\t        var list = dao.lists(\"TestList\");\n\t        describe(\"list.info()\", function () {\n\t            var listInfo = null;\n\t            before(function (done) {\n\t                list.getInfo().then(function (info) {\n\t                    listInfo = info;\n\t                    done();\n\t                });\n\t            });\n\t            it(\"Should return a promise that resolves to list info\", function () {\n\t                listInfo.should.be.an(\"object\");\n\t            });\n\t            it(\"Should bring back list info like Title, ItemCount, and ListItemEntityTypeFullName\", function () {\n\t                listInfo.should.have.property(\"Title\");\n\t                listInfo.should.have.property(\"ItemCount\");\n\t                listInfo.should.have.property(\"ListItemEntityTypeFullName\");\n\t            });\n\t        });\n\t\n\t        describe(\"list.getItems()\", function () {\n\t            var items = null;\n\t            before(function (done) {\n\t                list.getItems().then(function (results) {\n\t                    items = results;\n\t                    done();\n\t                });\n\t            });\n\t\n\t            it(\"Should return a promise that resolves to an array of items\", function () {\n\t                items.should.be.an(\"array\");\n\t            });\n\t\n\t            it(\"Should return all the items in the list\", function (done) {\n\t                list.getInfo().then(function (listInfo) {\n\t                    items.length.should.equal(listInfo.ItemCount);\n\t                    done();\n\t                });\n\t            });\n\t        });\n\t\n\t        describe(\"list.getItems(odata)\", function () {\n\t            //Get items where BoolColumn == TRUE\n\t            var odata = \"$filter=MyStatus eq 'Green'\";\n\t            var items = null;\n\t            before(function (done) {\n\t                list.getItems(odata).then(function (results) {\n\t                    items = results;\n\t                    done();\n\t                });\n\t            });\n\t            it(\"Should return a promise that resolves to an array of items\", function () {\n\t                items.should.be.an(\"array\");\n\t            });\n\t            it(\"Should return only items that match the OData params\", function () {\n\t                items.forEach(function (item) {\n\t                    item.should.have.property(\"MyStatus\");\n\t                    item.MyStatus.should.equal(\"Green\");\n\t                });\n\t            });\n\t        });\n\t\n\t        describe(\"list.getItemById(id)\", function () {\n\t            var item = null;\n\t            var validId = -1;\n\t            before(function (done) {\n\t                list.getItems().then(function (allItems) {\n\t                    validId = allItems[0].Id;\n\t                    return validId;\n\t                }).then(function (id) {\n\t                    return list.getItemById(id);\n\t                }).then(function (result) {\n\t                    item = result;\n\t                    done();\n\t                });\n\t            });\n\t            it(\"Should return a promise that resolves to a single item\", function () {\n\t                item.should.be.an(\"object\");\n\t                item.should.have.property(\"Title\");\n\t            });\n\t            it(\"Should resolve an item with a matching ID\", function () {\n\t                item.should.have.property(\"Id\");\n\t                item.Id.should.equal(validId);\n\t            });\n\t            it(\"Should be able to return attachments using the optional odata query\", function (done) {\n\t                list.getItemById(validId, \"$expand=AttachmentFiles\").then(function (item) {\n\t                    item.should.have.property(\"AttachmentFiles\");\n\t                    item.AttachmentFiles.should.have.property(\"results\");\n\t                    item.AttachmentFiles.results.should.be.an(\"Array\");\n\t                    done();\n\t                });\n\t            });\n\t        });\n\t\n\t        describe(\"list.findItems(key, value)\", function () {\n\t            var matches = null;\n\t            before(function (done) {\n\t                list.findItems(\"MyStatus\", \"Green\").then(function (results) {\n\t                    matches = results;\n\t                    done();\n\t                });\n\t            });\n\t            it(\"Should return a promise that resolves to an array of list items\", function () {\n\t                matches.should.be.an(\"array\");\n\t                matches.should.not.be.empty;\n\t            });\n\t            it(\"Should only bring back items the match the key value query\", function () {\n\t                matches.forEach(function (item) {\n\t                    item.should.have.property(\"MyStatus\");\n\t                    item.MyStatus.should.equal(\"Green\");\n\t                });\n\t            });\n\t        });\n\t        describe(\"list.findItem(key, value)\", function () {\n\t            var match = null;\n\t            before(function (done) {\n\t                list.findItem(\"MyStatus\", \"Green\").then(function (result) {\n\t                    match = result;\n\t                    done();\n\t                });\n\t            });\n\t            it(\"Should resolve to one list item\", function () {\n\t                match.should.be.an(\"object\");\n\t            });\n\t            it(\"Should only bring back an item if it matches the key value query\", function () {\n\t                match.should.have.property(\"MyStatus\");\n\t                match.MyStatus.should.equal(\"Green\");\n\t            });\n\t        });\n\t\n\t        describe(\"list.addItem()\", function () {\n\t            var newItem = {\n\t                Title: \"Test Created Item\",\n\t                MyStatus: \"Red\"\n\t            };\n\t            var insertedItem = null;\n\t            before(function (done) {\n\t                list.addItem(newItem).then(function (result) {\n\t                    insertedItem = result;\n\t                    done();\n\t                }).catch(function (error) {\n\t                    console.log(error);\n\t                    done();\n\t                });\n\t            });\n\t            it(\"Should return a promise that resolves with the new list item\", function () {\n\t                insertedItem.should.not.be.null;\n\t                insertedItem.should.be.an(\"object\");\n\t                insertedItem.should.have.property(\"Id\");\n\t            });\n\t            it(\"Should save the item right away so it can be queried.\", function () {\n\t                list.getItemById(insertedItem.Id).then(function (foundItem) {\n\t                    foundItem.should.not.be.null;\n\t                    foundItem.should.have.property(\"Title\");\n\t                    foundItem.Title.should.equal(newItem.Title);\n\t                });\n\t            });\n\t            it(\"Should throw an error if a invalid field is set\", function (done) {\n\t                newItem.InvalidColumn = \"test\";\n\t                list.addItem(newItem).then(function () {\n\t                    //supposed to fail\n\t                    \"one\".should.equal(\"two\");\n\t                }).catch(function (xhr, status, msg) {\n\t                    done();\n\t                });\n\t            });\n\t        });\n\t\n\t        // var itemIdWithAttachment = null;\n\t        // var attachmentFilename = \"testAttachment.txt\";\n\t        // var attachmentContent = \"test content\";\n\t\n\t        // describe(\"list.addAttachment(id, filename, content)\", function() {\n\t\n\t        //     before(function(done) {\n\t        //         list.getItems(\"$orderby=Id\").then(function(items) {\n\t        //             itemIdWithAttachment = items[items.length - 1].Id;\n\t        //             return list.addAttachment(itemIdWithAttachment, attachmentFilename, attachmentContent);\n\t        //         }).then(function() {\n\t        //             done();\n\t        //         });\n\t        //     });\n\t        //     it(\"Should add an attachment file to the list item\", function(done) {\n\t        //         list.getItemById(itemIdWithAttachment, \"$expand=AttachmentFiles\").then(function(item){\n\t        //             item.should.have.property('AttachmentFiles');\n\t        //             item.AttachmentFiles.should.have.property('results');\n\t        //             item.AttachmentFiles.results.should.be.an('Array');\n\t        //             item.AttachmentFiles.results.should.not.be.empty;\n\t        //             done();\n\t        //         });\n\t        //     })\n\t        // });\n\t\n\t        // describe(\"list.deleteAttachment(id, filename)\", function() {\n\t        //     var getAttachment = function(id, filename) {\n\t        //         return list.getItemById(itemIdWithAttachment, \"$expand=AttachmentFiles\").then(function(item){\n\t        //             var attachments = item.AttachmentFiles.results;\n\t        //             return attachments.find(function(a) { return a.FileName === attachmentFilename});\n\t        //         });\n\t        //     };\n\t        //     before(function(done) {\n\t        //         getAttachment(itemIdWithAttachment, attachmentFilename).then(function(attachment) {\n\t        //             if (attachment) {\n\t        //                 return list.deleteAttachment(itemIdWithAttachment, attachmentFilename);\n\t        //             }\n\t        //             return false;\n\t        //         }).then(function(){\n\t        //             done();\n\t        //         }).catch(function(res) { \n\t        //             done();\n\t        //             console.log(\"REQUEST ERROR\")\n\t        //         });\n\t        //     });\n\t        //     it(\"Should delete the attachment\", function(done) {\n\t        //         getAttachment(itemIdWithAttachment, attachmentFilename).then(function(attachment) {\n\t        //             if (attachment) (\"attachment\").should.equal(\"null\");\n\t        //             done();\n\t        //         });\n\t        //     })\n\t        // });\n\t\n\t        describe(\"list.deleteItem(id)\", function () {\n\t            var itemToDelete = null;\n\t            before(function (done) {\n\t                list.getItems(\"$orderby=Id\").then(function (items) {\n\t                    itemToDelete = items[items.length - 1];\n\t                    return list.deleteItem(itemToDelete.Id);\n\t                }).then(function () {\n\t                    done();\n\t                });\n\t            });\n\t            it(\"Should delete that item\", function (done) {\n\t                list.getItemById(itemToDelete.Id).then(function () {\n\t                    throw \"Should have failed because item has been deleted\";\n\t                }).catch(function () {\n\t                    done();\n\t                });\n\t            });\n\t            it(\"Should reject the promise if the item id can not be found\", function (done) {\n\t                list.deleteItem(99999999).then(function () {\n\t                    throw \"Should have failed because id doesnt exist\";\n\t                }).catch(function () {\n\t                    done();\n\t                });\n\t            });\n\t        });\n\t\n\t        describe(\"list.updateItem()\", function () {\n\t            var itemToUpdate = null;\n\t            var updates = {\n\t                Title: \"Updated Title\"\n\t            };\n\t            before(function (done) {\n\t                list.getItems(\"$orderby=Id desc\").then(function (items) {\n\t                    itemToUpdate = items[items.length - 1];\n\t                    done();\n\t                });\n\t            });\n\t            it(\"Should return a promise\", function (done) {\n\t                list.updateItem(itemToUpdate.Id, updates).then(function () {\n\t                    done();\n\t                });\n\t            });\n\t            it(\"Should update only the properties that were passed\", function (done) {\n\t                list.getItemById(itemToUpdate.Id).then(function (item) {\n\t                    item.should.have.property(\"Title\");\n\t                    item.Title.should.equal(updates.Title);\n\t                    done();\n\t                });\n\t            });\n\t        });\n\t\n\t        // describe(\"list.permissions.getRoleAssignments()\", permissionsTests.create(list));\n\t\n\t        // if (utils.isBrowser()) {\n\t        //     describe(\"list.permissions.check()\", permissionsTests.create(list, \"check\"));\n\t        // }\n\t\n\t        // describe(\"list.permissions.check(email)\", permissionsTests.create(list, \"check\", \"andrew@andrewpetersen.onmicrosoft.com\"))\n\t    });\n\t};\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar should = __webpack_require__(5).should();\n\t\n\texports.run = function (utils) {\n\t    describe(\"var utils = SPScript.utils\", function () {\n\t        describe(\"utils.parseJSON(data)\", function () {\n\t            it(\"Should exist on the utils object\", function () {\n\t                utils.should.have.property(\"parseJSON\");\n\t                utils.parseJSON.should.be.a(\"function\");\n\t            });\n\t            it(\"Should take a string or an object and return an object\", function () {\n\t                var obj = { one: \"value of one\", two: \"value of two\" };\n\t                var jsonStr = JSON.stringify(obj);\n\t\n\t                var res1 = utils.parseJSON(obj);\n\t                res1.should.not.be.null;\n\t                res1.should.have.property(\"one\");\n\t                res1.one.should.equal(obj.one);\n\t\n\t                var res2 = utils.parseJSON(jsonStr);\n\t                res2.should.not.be.null;\n\t                res2.should.have.property(\"one\");\n\t                res2.one.should.equal(obj.one);\n\t            });\n\t        });\n\t    });\n\t};\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports) {\n\n\t'use strict'\n\t\n\texports.byteLength = byteLength\n\texports.toByteArray = toByteArray\n\texports.fromByteArray = fromByteArray\n\t\n\tvar lookup = []\n\tvar revLookup = []\n\tvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\t\n\tvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n\tfor (var i = 0, len = code.length; i < len; ++i) {\n\t  lookup[i] = code[i]\n\t  revLookup[code.charCodeAt(i)] = i\n\t}\n\t\n\trevLookup['-'.charCodeAt(0)] = 62\n\trevLookup['_'.charCodeAt(0)] = 63\n\t\n\tfunction placeHoldersCount (b64) {\n\t  var len = b64.length\n\t  if (len % 4 > 0) {\n\t    throw new Error('Invalid string. Length must be a multiple of 4')\n\t  }\n\t\n\t  // the number of equal signs (place holders)\n\t  // if there are two placeholders, than the two characters before it\n\t  // represent one byte\n\t  // if there is only one, then the three characters before it represent 2 bytes\n\t  // this is just a cheap hack to not do indexOf twice\n\t  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n\t}\n\t\n\tfunction byteLength (b64) {\n\t  // base64 is 4/3 + up to two characters of the original data\n\t  return b64.length * 3 / 4 - placeHoldersCount(b64)\n\t}\n\t\n\tfunction toByteArray (b64) {\n\t  var i, j, l, tmp, placeHolders, arr\n\t  var len = b64.length\n\t  placeHolders = placeHoldersCount(b64)\n\t\n\t  arr = new Arr(len * 3 / 4 - placeHolders)\n\t\n\t  // if there are placeholders, only get up to the last complete 4 chars\n\t  l = placeHolders > 0 ? len - 4 : len\n\t\n\t  var L = 0\n\t\n\t  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n\t    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n\t    arr[L++] = (tmp >> 16) & 0xFF\n\t    arr[L++] = (tmp >> 8) & 0xFF\n\t    arr[L++] = tmp & 0xFF\n\t  }\n\t\n\t  if (placeHolders === 2) {\n\t    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n\t    arr[L++] = tmp & 0xFF\n\t  } else if (placeHolders === 1) {\n\t    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n\t    arr[L++] = (tmp >> 8) & 0xFF\n\t    arr[L++] = tmp & 0xFF\n\t  }\n\t\n\t  return arr\n\t}\n\t\n\tfunction tripletToBase64 (num) {\n\t  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n\t}\n\t\n\tfunction encodeChunk (uint8, start, end) {\n\t  var tmp\n\t  var output = []\n\t  for (var i = start; i < end; i += 3) {\n\t    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n\t    output.push(tripletToBase64(tmp))\n\t  }\n\t  return output.join('')\n\t}\n\t\n\tfunction fromByteArray (uint8) {\n\t  var tmp\n\t  var len = uint8.length\n\t  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n\t  var output = ''\n\t  var parts = []\n\t  var maxChunkLength = 16383 // must be multiple of 3\n\t\n\t  // go through the array every three bytes, we'll deal with trailing stuff later\n\t  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n\t    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n\t  }\n\t\n\t  // pad the end with zeros, but make sure to not forget the extra bytes\n\t  if (extraBytes === 1) {\n\t    tmp = uint8[len - 1]\n\t    output += lookup[tmp >> 2]\n\t    output += lookup[(tmp << 4) & 0x3F]\n\t    output += '=='\n\t  } else if (extraBytes === 2) {\n\t    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n\t    output += lookup[tmp >> 10]\n\t    output += lookup[(tmp >> 4) & 0x3F]\n\t    output += lookup[(tmp << 2) & 0x3F]\n\t    output += '='\n\t  }\n\t\n\t  parts.push(output)\n\t\n\t  return parts.join('')\n\t}\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {/*!\n\t * The buffer module from node.js, for the browser.\n\t *\n\t * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n\t * @license  MIT\n\t */\n\t/* eslint-disable no-proto */\n\t\n\t'use strict'\n\t\n\tvar base64 = __webpack_require__(25)\n\tvar ieee754 = __webpack_require__(48)\n\tvar isArray = __webpack_require__(49)\n\t\n\texports.Buffer = Buffer\n\texports.SlowBuffer = SlowBuffer\n\texports.INSPECT_MAX_BYTES = 50\n\t\n\t/**\n\t * If `Buffer.TYPED_ARRAY_SUPPORT`:\n\t *   === true    Use Uint8Array implementation (fastest)\n\t *   === false   Use Object implementation (most compatible, even IE6)\n\t *\n\t * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n\t * Opera 11.6+, iOS 4.2+.\n\t *\n\t * Due to various browser bugs, sometimes the Object implementation will be used even\n\t * when the browser supports typed arrays.\n\t *\n\t * Note:\n\t *\n\t *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n\t *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n\t *\n\t *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n\t *\n\t *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n\t *     incorrect length in some situations.\n\t\n\t * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n\t * get the Object implementation, which is slower but behaves correctly.\n\t */\n\tBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n\t  ? global.TYPED_ARRAY_SUPPORT\n\t  : typedArraySupport()\n\t\n\t/*\n\t * Export kMaxLength after typed array support is determined.\n\t */\n\texports.kMaxLength = kMaxLength()\n\t\n\tfunction typedArraySupport () {\n\t  try {\n\t    var arr = new Uint8Array(1)\n\t    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n\t    return arr.foo() === 42 && // typed array instances can be augmented\n\t        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n\t        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n\t  } catch (e) {\n\t    return false\n\t  }\n\t}\n\t\n\tfunction kMaxLength () {\n\t  return Buffer.TYPED_ARRAY_SUPPORT\n\t    ? 0x7fffffff\n\t    : 0x3fffffff\n\t}\n\t\n\tfunction createBuffer (that, length) {\n\t  if (kMaxLength() < length) {\n\t    throw new RangeError('Invalid typed array length')\n\t  }\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    // Return an augmented `Uint8Array` instance, for best performance\n\t    that = new Uint8Array(length)\n\t    that.__proto__ = Buffer.prototype\n\t  } else {\n\t    // Fallback: Return an object instance of the Buffer class\n\t    if (that === null) {\n\t      that = new Buffer(length)\n\t    }\n\t    that.length = length\n\t  }\n\t\n\t  return that\n\t}\n\t\n\t/**\n\t * The Buffer constructor returns instances of `Uint8Array` that have their\n\t * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n\t * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n\t * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n\t * returns a single octet.\n\t *\n\t * The `Uint8Array` prototype remains unmodified.\n\t */\n\t\n\tfunction Buffer (arg, encodingOrOffset, length) {\n\t  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n\t    return new Buffer(arg, encodingOrOffset, length)\n\t  }\n\t\n\t  // Common case.\n\t  if (typeof arg === 'number') {\n\t    if (typeof encodingOrOffset === 'string') {\n\t      throw new Error(\n\t        'If encoding is specified then the first argument must be a string'\n\t      )\n\t    }\n\t    return allocUnsafe(this, arg)\n\t  }\n\t  return from(this, arg, encodingOrOffset, length)\n\t}\n\t\n\tBuffer.poolSize = 8192 // not used by this implementation\n\t\n\t// TODO: Legacy, not needed anymore. Remove in next major version.\n\tBuffer._augment = function (arr) {\n\t  arr.__proto__ = Buffer.prototype\n\t  return arr\n\t}\n\t\n\tfunction from (that, value, encodingOrOffset, length) {\n\t  if (typeof value === 'number') {\n\t    throw new TypeError('\"value\" argument must not be a number')\n\t  }\n\t\n\t  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n\t    return fromArrayBuffer(that, value, encodingOrOffset, length)\n\t  }\n\t\n\t  if (typeof value === 'string') {\n\t    return fromString(that, value, encodingOrOffset)\n\t  }\n\t\n\t  return fromObject(that, value)\n\t}\n\t\n\t/**\n\t * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n\t * if value is a number.\n\t * Buffer.from(str[, encoding])\n\t * Buffer.from(array)\n\t * Buffer.from(buffer)\n\t * Buffer.from(arrayBuffer[, byteOffset[, length]])\n\t **/\n\tBuffer.from = function (value, encodingOrOffset, length) {\n\t  return from(null, value, encodingOrOffset, length)\n\t}\n\t\n\tif (Buffer.TYPED_ARRAY_SUPPORT) {\n\t  Buffer.prototype.__proto__ = Uint8Array.prototype\n\t  Buffer.__proto__ = Uint8Array\n\t  if (typeof Symbol !== 'undefined' && Symbol.species &&\n\t      Buffer[Symbol.species] === Buffer) {\n\t    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n\t    Object.defineProperty(Buffer, Symbol.species, {\n\t      value: null,\n\t      configurable: true\n\t    })\n\t  }\n\t}\n\t\n\tfunction assertSize (size) {\n\t  if (typeof size !== 'number') {\n\t    throw new TypeError('\"size\" argument must be a number')\n\t  } else if (size < 0) {\n\t    throw new RangeError('\"size\" argument must not be negative')\n\t  }\n\t}\n\t\n\tfunction alloc (that, size, fill, encoding) {\n\t  assertSize(size)\n\t  if (size <= 0) {\n\t    return createBuffer(that, size)\n\t  }\n\t  if (fill !== undefined) {\n\t    // Only pay attention to encoding if it's a string. This\n\t    // prevents accidentally sending in a number that would\n\t    // be interpretted as a start offset.\n\t    return typeof encoding === 'string'\n\t      ? createBuffer(that, size).fill(fill, encoding)\n\t      : createBuffer(that, size).fill(fill)\n\t  }\n\t  return createBuffer(that, size)\n\t}\n\t\n\t/**\n\t * Creates a new filled Buffer instance.\n\t * alloc(size[, fill[, encoding]])\n\t **/\n\tBuffer.alloc = function (size, fill, encoding) {\n\t  return alloc(null, size, fill, encoding)\n\t}\n\t\n\tfunction allocUnsafe (that, size) {\n\t  assertSize(size)\n\t  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n\t  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n\t    for (var i = 0; i < size; ++i) {\n\t      that[i] = 0\n\t    }\n\t  }\n\t  return that\n\t}\n\t\n\t/**\n\t * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n\t * */\n\tBuffer.allocUnsafe = function (size) {\n\t  return allocUnsafe(null, size)\n\t}\n\t/**\n\t * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n\t */\n\tBuffer.allocUnsafeSlow = function (size) {\n\t  return allocUnsafe(null, size)\n\t}\n\t\n\tfunction fromString (that, string, encoding) {\n\t  if (typeof encoding !== 'string' || encoding === '') {\n\t    encoding = 'utf8'\n\t  }\n\t\n\t  if (!Buffer.isEncoding(encoding)) {\n\t    throw new TypeError('\"encoding\" must be a valid string encoding')\n\t  }\n\t\n\t  var length = byteLength(string, encoding) | 0\n\t  that = createBuffer(that, length)\n\t\n\t  var actual = that.write(string, encoding)\n\t\n\t  if (actual !== length) {\n\t    // Writing a hex string, for example, that contains invalid characters will\n\t    // cause everything after the first invalid character to be ignored. (e.g.\n\t    // 'abxxcd' will be treated as 'ab')\n\t    that = that.slice(0, actual)\n\t  }\n\t\n\t  return that\n\t}\n\t\n\tfunction fromArrayLike (that, array) {\n\t  var length = array.length < 0 ? 0 : checked(array.length) | 0\n\t  that = createBuffer(that, length)\n\t  for (var i = 0; i < length; i += 1) {\n\t    that[i] = array[i] & 255\n\t  }\n\t  return that\n\t}\n\t\n\tfunction fromArrayBuffer (that, array, byteOffset, length) {\n\t  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\t\n\t  if (byteOffset < 0 || array.byteLength < byteOffset) {\n\t    throw new RangeError('\\'offset\\' is out of bounds')\n\t  }\n\t\n\t  if (array.byteLength < byteOffset + (length || 0)) {\n\t    throw new RangeError('\\'length\\' is out of bounds')\n\t  }\n\t\n\t  if (byteOffset === undefined && length === undefined) {\n\t    array = new Uint8Array(array)\n\t  } else if (length === undefined) {\n\t    array = new Uint8Array(array, byteOffset)\n\t  } else {\n\t    array = new Uint8Array(array, byteOffset, length)\n\t  }\n\t\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    // Return an augmented `Uint8Array` instance, for best performance\n\t    that = array\n\t    that.__proto__ = Buffer.prototype\n\t  } else {\n\t    // Fallback: Return an object instance of the Buffer class\n\t    that = fromArrayLike(that, array)\n\t  }\n\t  return that\n\t}\n\t\n\tfunction fromObject (that, obj) {\n\t  if (Buffer.isBuffer(obj)) {\n\t    var len = checked(obj.length) | 0\n\t    that = createBuffer(that, len)\n\t\n\t    if (that.length === 0) {\n\t      return that\n\t    }\n\t\n\t    obj.copy(that, 0, 0, len)\n\t    return that\n\t  }\n\t\n\t  if (obj) {\n\t    if ((typeof ArrayBuffer !== 'undefined' &&\n\t        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n\t      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n\t        return createBuffer(that, 0)\n\t      }\n\t      return fromArrayLike(that, obj)\n\t    }\n\t\n\t    if (obj.type === 'Buffer' && isArray(obj.data)) {\n\t      return fromArrayLike(that, obj.data)\n\t    }\n\t  }\n\t\n\t  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n\t}\n\t\n\tfunction checked (length) {\n\t  // Note: cannot use `length < kMaxLength()` here because that fails when\n\t  // length is NaN (which is otherwise coerced to zero.)\n\t  if (length >= kMaxLength()) {\n\t    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n\t                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n\t  }\n\t  return length | 0\n\t}\n\t\n\tfunction SlowBuffer (length) {\n\t  if (+length != length) { // eslint-disable-line eqeqeq\n\t    length = 0\n\t  }\n\t  return Buffer.alloc(+length)\n\t}\n\t\n\tBuffer.isBuffer = function isBuffer (b) {\n\t  return !!(b != null && b._isBuffer)\n\t}\n\t\n\tBuffer.compare = function compare (a, b) {\n\t  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n\t    throw new TypeError('Arguments must be Buffers')\n\t  }\n\t\n\t  if (a === b) return 0\n\t\n\t  var x = a.length\n\t  var y = b.length\n\t\n\t  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n\t    if (a[i] !== b[i]) {\n\t      x = a[i]\n\t      y = b[i]\n\t      break\n\t    }\n\t  }\n\t\n\t  if (x < y) return -1\n\t  if (y < x) return 1\n\t  return 0\n\t}\n\t\n\tBuffer.isEncoding = function isEncoding (encoding) {\n\t  switch (String(encoding).toLowerCase()) {\n\t    case 'hex':\n\t    case 'utf8':\n\t    case 'utf-8':\n\t    case 'ascii':\n\t    case 'latin1':\n\t    case 'binary':\n\t    case 'base64':\n\t    case 'ucs2':\n\t    case 'ucs-2':\n\t    case 'utf16le':\n\t    case 'utf-16le':\n\t      return true\n\t    default:\n\t      return false\n\t  }\n\t}\n\t\n\tBuffer.concat = function concat (list, length) {\n\t  if (!isArray(list)) {\n\t    throw new TypeError('\"list\" argument must be an Array of Buffers')\n\t  }\n\t\n\t  if (list.length === 0) {\n\t    return Buffer.alloc(0)\n\t  }\n\t\n\t  var i\n\t  if (length === undefined) {\n\t    length = 0\n\t    for (i = 0; i < list.length; ++i) {\n\t      length += list[i].length\n\t    }\n\t  }\n\t\n\t  var buffer = Buffer.allocUnsafe(length)\n\t  var pos = 0\n\t  for (i = 0; i < list.length; ++i) {\n\t    var buf = list[i]\n\t    if (!Buffer.isBuffer(buf)) {\n\t      throw new TypeError('\"list\" argument must be an Array of Buffers')\n\t    }\n\t    buf.copy(buffer, pos)\n\t    pos += buf.length\n\t  }\n\t  return buffer\n\t}\n\t\n\tfunction byteLength (string, encoding) {\n\t  if (Buffer.isBuffer(string)) {\n\t    return string.length\n\t  }\n\t  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n\t      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n\t    return string.byteLength\n\t  }\n\t  if (typeof string !== 'string') {\n\t    string = '' + string\n\t  }\n\t\n\t  var len = string.length\n\t  if (len === 0) return 0\n\t\n\t  // Use a for loop to avoid recursion\n\t  var loweredCase = false\n\t  for (;;) {\n\t    switch (encoding) {\n\t      case 'ascii':\n\t      case 'latin1':\n\t      case 'binary':\n\t        return len\n\t      case 'utf8':\n\t      case 'utf-8':\n\t      case undefined:\n\t        return utf8ToBytes(string).length\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return len * 2\n\t      case 'hex':\n\t        return len >>> 1\n\t      case 'base64':\n\t        return base64ToBytes(string).length\n\t      default:\n\t        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n\t        encoding = ('' + encoding).toLowerCase()\n\t        loweredCase = true\n\t    }\n\t  }\n\t}\n\tBuffer.byteLength = byteLength\n\t\n\tfunction slowToString (encoding, start, end) {\n\t  var loweredCase = false\n\t\n\t  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n\t  // property of a typed array.\n\t\n\t  // This behaves neither like String nor Uint8Array in that we set start/end\n\t  // to their upper/lower bounds if the value passed is out of range.\n\t  // undefined is handled specially as per ECMA-262 6th Edition,\n\t  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n\t  if (start === undefined || start < 0) {\n\t    start = 0\n\t  }\n\t  // Return early if start > this.length. Done here to prevent potential uint32\n\t  // coercion fail below.\n\t  if (start > this.length) {\n\t    return ''\n\t  }\n\t\n\t  if (end === undefined || end > this.length) {\n\t    end = this.length\n\t  }\n\t\n\t  if (end <= 0) {\n\t    return ''\n\t  }\n\t\n\t  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n\t  end >>>= 0\n\t  start >>>= 0\n\t\n\t  if (end <= start) {\n\t    return ''\n\t  }\n\t\n\t  if (!encoding) encoding = 'utf8'\n\t\n\t  while (true) {\n\t    switch (encoding) {\n\t      case 'hex':\n\t        return hexSlice(this, start, end)\n\t\n\t      case 'utf8':\n\t      case 'utf-8':\n\t        return utf8Slice(this, start, end)\n\t\n\t      case 'ascii':\n\t        return asciiSlice(this, start, end)\n\t\n\t      case 'latin1':\n\t      case 'binary':\n\t        return latin1Slice(this, start, end)\n\t\n\t      case 'base64':\n\t        return base64Slice(this, start, end)\n\t\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return utf16leSlice(this, start, end)\n\t\n\t      default:\n\t        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n\t        encoding = (encoding + '').toLowerCase()\n\t        loweredCase = true\n\t    }\n\t  }\n\t}\n\t\n\t// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n\t// Buffer instances.\n\tBuffer.prototype._isBuffer = true\n\t\n\tfunction swap (b, n, m) {\n\t  var i = b[n]\n\t  b[n] = b[m]\n\t  b[m] = i\n\t}\n\t\n\tBuffer.prototype.swap16 = function swap16 () {\n\t  var len = this.length\n\t  if (len % 2 !== 0) {\n\t    throw new RangeError('Buffer size must be a multiple of 16-bits')\n\t  }\n\t  for (var i = 0; i < len; i += 2) {\n\t    swap(this, i, i + 1)\n\t  }\n\t  return this\n\t}\n\t\n\tBuffer.prototype.swap32 = function swap32 () {\n\t  var len = this.length\n\t  if (len % 4 !== 0) {\n\t    throw new RangeError('Buffer size must be a multiple of 32-bits')\n\t  }\n\t  for (var i = 0; i < len; i += 4) {\n\t    swap(this, i, i + 3)\n\t    swap(this, i + 1, i + 2)\n\t  }\n\t  return this\n\t}\n\t\n\tBuffer.prototype.swap64 = function swap64 () {\n\t  var len = this.length\n\t  if (len % 8 !== 0) {\n\t    throw new RangeError('Buffer size must be a multiple of 64-bits')\n\t  }\n\t  for (var i = 0; i < len; i += 8) {\n\t    swap(this, i, i + 7)\n\t    swap(this, i + 1, i + 6)\n\t    swap(this, i + 2, i + 5)\n\t    swap(this, i + 3, i + 4)\n\t  }\n\t  return this\n\t}\n\t\n\tBuffer.prototype.toString = function toString () {\n\t  var length = this.length | 0\n\t  if (length === 0) return ''\n\t  if (arguments.length === 0) return utf8Slice(this, 0, length)\n\t  return slowToString.apply(this, arguments)\n\t}\n\t\n\tBuffer.prototype.equals = function equals (b) {\n\t  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n\t  if (this === b) return true\n\t  return Buffer.compare(this, b) === 0\n\t}\n\t\n\tBuffer.prototype.inspect = function inspect () {\n\t  var str = ''\n\t  var max = exports.INSPECT_MAX_BYTES\n\t  if (this.length > 0) {\n\t    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n\t    if (this.length > max) str += ' ... '\n\t  }\n\t  return '<Buffer ' + str + '>'\n\t}\n\t\n\tBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n\t  if (!Buffer.isBuffer(target)) {\n\t    throw new TypeError('Argument must be a Buffer')\n\t  }\n\t\n\t  if (start === undefined) {\n\t    start = 0\n\t  }\n\t  if (end === undefined) {\n\t    end = target ? target.length : 0\n\t  }\n\t  if (thisStart === undefined) {\n\t    thisStart = 0\n\t  }\n\t  if (thisEnd === undefined) {\n\t    thisEnd = this.length\n\t  }\n\t\n\t  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n\t    throw new RangeError('out of range index')\n\t  }\n\t\n\t  if (thisStart >= thisEnd && start >= end) {\n\t    return 0\n\t  }\n\t  if (thisStart >= thisEnd) {\n\t    return -1\n\t  }\n\t  if (start >= end) {\n\t    return 1\n\t  }\n\t\n\t  start >>>= 0\n\t  end >>>= 0\n\t  thisStart >>>= 0\n\t  thisEnd >>>= 0\n\t\n\t  if (this === target) return 0\n\t\n\t  var x = thisEnd - thisStart\n\t  var y = end - start\n\t  var len = Math.min(x, y)\n\t\n\t  var thisCopy = this.slice(thisStart, thisEnd)\n\t  var targetCopy = target.slice(start, end)\n\t\n\t  for (var i = 0; i < len; ++i) {\n\t    if (thisCopy[i] !== targetCopy[i]) {\n\t      x = thisCopy[i]\n\t      y = targetCopy[i]\n\t      break\n\t    }\n\t  }\n\t\n\t  if (x < y) return -1\n\t  if (y < x) return 1\n\t  return 0\n\t}\n\t\n\t// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n\t// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n\t//\n\t// Arguments:\n\t// - buffer - a Buffer to search\n\t// - val - a string, Buffer, or number\n\t// - byteOffset - an index into `buffer`; will be clamped to an int32\n\t// - encoding - an optional encoding, relevant is val is a string\n\t// - dir - true for indexOf, false for lastIndexOf\n\tfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n\t  // Empty buffer means no match\n\t  if (buffer.length === 0) return -1\n\t\n\t  // Normalize byteOffset\n\t  if (typeof byteOffset === 'string') {\n\t    encoding = byteOffset\n\t    byteOffset = 0\n\t  } else if (byteOffset > 0x7fffffff) {\n\t    byteOffset = 0x7fffffff\n\t  } else if (byteOffset < -0x80000000) {\n\t    byteOffset = -0x80000000\n\t  }\n\t  byteOffset = +byteOffset  // Coerce to Number.\n\t  if (isNaN(byteOffset)) {\n\t    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n\t    byteOffset = dir ? 0 : (buffer.length - 1)\n\t  }\n\t\n\t  // Normalize byteOffset: negative offsets start from the end of the buffer\n\t  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n\t  if (byteOffset >= buffer.length) {\n\t    if (dir) return -1\n\t    else byteOffset = buffer.length - 1\n\t  } else if (byteOffset < 0) {\n\t    if (dir) byteOffset = 0\n\t    else return -1\n\t  }\n\t\n\t  // Normalize val\n\t  if (typeof val === 'string') {\n\t    val = Buffer.from(val, encoding)\n\t  }\n\t\n\t  // Finally, search either indexOf (if dir is true) or lastIndexOf\n\t  if (Buffer.isBuffer(val)) {\n\t    // Special case: looking for empty string/buffer always fails\n\t    if (val.length === 0) {\n\t      return -1\n\t    }\n\t    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n\t  } else if (typeof val === 'number') {\n\t    val = val & 0xFF // Search for a byte value [0-255]\n\t    if (Buffer.TYPED_ARRAY_SUPPORT &&\n\t        typeof Uint8Array.prototype.indexOf === 'function') {\n\t      if (dir) {\n\t        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n\t      } else {\n\t        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n\t      }\n\t    }\n\t    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n\t  }\n\t\n\t  throw new TypeError('val must be string, number or Buffer')\n\t}\n\t\n\tfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n\t  var indexSize = 1\n\t  var arrLength = arr.length\n\t  var valLength = val.length\n\t\n\t  if (encoding !== undefined) {\n\t    encoding = String(encoding).toLowerCase()\n\t    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n\t        encoding === 'utf16le' || encoding === 'utf-16le') {\n\t      if (arr.length < 2 || val.length < 2) {\n\t        return -1\n\t      }\n\t      indexSize = 2\n\t      arrLength /= 2\n\t      valLength /= 2\n\t      byteOffset /= 2\n\t    }\n\t  }\n\t\n\t  function read (buf, i) {\n\t    if (indexSize === 1) {\n\t      return buf[i]\n\t    } else {\n\t      return buf.readUInt16BE(i * indexSize)\n\t    }\n\t  }\n\t\n\t  var i\n\t  if (dir) {\n\t    var foundIndex = -1\n\t    for (i = byteOffset; i < arrLength; i++) {\n\t      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n\t        if (foundIndex === -1) foundIndex = i\n\t        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n\t      } else {\n\t        if (foundIndex !== -1) i -= i - foundIndex\n\t        foundIndex = -1\n\t      }\n\t    }\n\t  } else {\n\t    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n\t    for (i = byteOffset; i >= 0; i--) {\n\t      var found = true\n\t      for (var j = 0; j < valLength; j++) {\n\t        if (read(arr, i + j) !== read(val, j)) {\n\t          found = false\n\t          break\n\t        }\n\t      }\n\t      if (found) return i\n\t    }\n\t  }\n\t\n\t  return -1\n\t}\n\t\n\tBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n\t  return this.indexOf(val, byteOffset, encoding) !== -1\n\t}\n\t\n\tBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n\t  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n\t}\n\t\n\tBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n\t  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n\t}\n\t\n\tfunction hexWrite (buf, string, offset, length) {\n\t  offset = Number(offset) || 0\n\t  var remaining = buf.length - offset\n\t  if (!length) {\n\t    length = remaining\n\t  } else {\n\t    length = Number(length)\n\t    if (length > remaining) {\n\t      length = remaining\n\t    }\n\t  }\n\t\n\t  // must be an even number of digits\n\t  var strLen = string.length\n\t  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\t\n\t  if (length > strLen / 2) {\n\t    length = strLen / 2\n\t  }\n\t  for (var i = 0; i < length; ++i) {\n\t    var parsed = parseInt(string.substr(i * 2, 2), 16)\n\t    if (isNaN(parsed)) return i\n\t    buf[offset + i] = parsed\n\t  }\n\t  return i\n\t}\n\t\n\tfunction utf8Write (buf, string, offset, length) {\n\t  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n\t}\n\t\n\tfunction asciiWrite (buf, string, offset, length) {\n\t  return blitBuffer(asciiToBytes(string), buf, offset, length)\n\t}\n\t\n\tfunction latin1Write (buf, string, offset, length) {\n\t  return asciiWrite(buf, string, offset, length)\n\t}\n\t\n\tfunction base64Write (buf, string, offset, length) {\n\t  return blitBuffer(base64ToBytes(string), buf, offset, length)\n\t}\n\t\n\tfunction ucs2Write (buf, string, offset, length) {\n\t  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n\t}\n\t\n\tBuffer.prototype.write = function write (string, offset, length, encoding) {\n\t  // Buffer#write(string)\n\t  if (offset === undefined) {\n\t    encoding = 'utf8'\n\t    length = this.length\n\t    offset = 0\n\t  // Buffer#write(string, encoding)\n\t  } else if (length === undefined && typeof offset === 'string') {\n\t    encoding = offset\n\t    length = this.length\n\t    offset = 0\n\t  // Buffer#write(string, offset[, length][, encoding])\n\t  } else if (isFinite(offset)) {\n\t    offset = offset | 0\n\t    if (isFinite(length)) {\n\t      length = length | 0\n\t      if (encoding === undefined) encoding = 'utf8'\n\t    } else {\n\t      encoding = length\n\t      length = undefined\n\t    }\n\t  // legacy write(string, encoding, offset, length) - remove in v0.13\n\t  } else {\n\t    throw new Error(\n\t      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n\t    )\n\t  }\n\t\n\t  var remaining = this.length - offset\n\t  if (length === undefined || length > remaining) length = remaining\n\t\n\t  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n\t    throw new RangeError('Attempt to write outside buffer bounds')\n\t  }\n\t\n\t  if (!encoding) encoding = 'utf8'\n\t\n\t  var loweredCase = false\n\t  for (;;) {\n\t    switch (encoding) {\n\t      case 'hex':\n\t        return hexWrite(this, string, offset, length)\n\t\n\t      case 'utf8':\n\t      case 'utf-8':\n\t        return utf8Write(this, string, offset, length)\n\t\n\t      case 'ascii':\n\t        return asciiWrite(this, string, offset, length)\n\t\n\t      case 'latin1':\n\t      case 'binary':\n\t        return latin1Write(this, string, offset, length)\n\t\n\t      case 'base64':\n\t        // Warning: maxLength not taken into account in base64Write\n\t        return base64Write(this, string, offset, length)\n\t\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return ucs2Write(this, string, offset, length)\n\t\n\t      default:\n\t        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n\t        encoding = ('' + encoding).toLowerCase()\n\t        loweredCase = true\n\t    }\n\t  }\n\t}\n\t\n\tBuffer.prototype.toJSON = function toJSON () {\n\t  return {\n\t    type: 'Buffer',\n\t    data: Array.prototype.slice.call(this._arr || this, 0)\n\t  }\n\t}\n\t\n\tfunction base64Slice (buf, start, end) {\n\t  if (start === 0 && end === buf.length) {\n\t    return base64.fromByteArray(buf)\n\t  } else {\n\t    return base64.fromByteArray(buf.slice(start, end))\n\t  }\n\t}\n\t\n\tfunction utf8Slice (buf, start, end) {\n\t  end = Math.min(buf.length, end)\n\t  var res = []\n\t\n\t  var i = start\n\t  while (i < end) {\n\t    var firstByte = buf[i]\n\t    var codePoint = null\n\t    var bytesPerSequence = (firstByte > 0xEF) ? 4\n\t      : (firstByte > 0xDF) ? 3\n\t      : (firstByte > 0xBF) ? 2\n\t      : 1\n\t\n\t    if (i + bytesPerSequence <= end) {\n\t      var secondByte, thirdByte, fourthByte, tempCodePoint\n\t\n\t      switch (bytesPerSequence) {\n\t        case 1:\n\t          if (firstByte < 0x80) {\n\t            codePoint = firstByte\n\t          }\n\t          break\n\t        case 2:\n\t          secondByte = buf[i + 1]\n\t          if ((secondByte & 0xC0) === 0x80) {\n\t            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n\t            if (tempCodePoint > 0x7F) {\n\t              codePoint = tempCodePoint\n\t            }\n\t          }\n\t          break\n\t        case 3:\n\t          secondByte = buf[i + 1]\n\t          thirdByte = buf[i + 2]\n\t          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n\t            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n\t            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n\t              codePoint = tempCodePoint\n\t            }\n\t          }\n\t          break\n\t        case 4:\n\t          secondByte = buf[i + 1]\n\t          thirdByte = buf[i + 2]\n\t          fourthByte = buf[i + 3]\n\t          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n\t            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n\t            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n\t              codePoint = tempCodePoint\n\t            }\n\t          }\n\t      }\n\t    }\n\t\n\t    if (codePoint === null) {\n\t      // we did not generate a valid codePoint so insert a\n\t      // replacement char (U+FFFD) and advance only 1 byte\n\t      codePoint = 0xFFFD\n\t      bytesPerSequence = 1\n\t    } else if (codePoint > 0xFFFF) {\n\t      // encode to utf16 (surrogate pair dance)\n\t      codePoint -= 0x10000\n\t      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n\t      codePoint = 0xDC00 | codePoint & 0x3FF\n\t    }\n\t\n\t    res.push(codePoint)\n\t    i += bytesPerSequence\n\t  }\n\t\n\t  return decodeCodePointsArray(res)\n\t}\n\t\n\t// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n\t// the lowest limit is Chrome, with 0x10000 args.\n\t// We go 1 magnitude less, for safety\n\tvar MAX_ARGUMENTS_LENGTH = 0x1000\n\t\n\tfunction decodeCodePointsArray (codePoints) {\n\t  var len = codePoints.length\n\t  if (len <= MAX_ARGUMENTS_LENGTH) {\n\t    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n\t  }\n\t\n\t  // Decode in chunks to avoid \"call stack size exceeded\".\n\t  var res = ''\n\t  var i = 0\n\t  while (i < len) {\n\t    res += String.fromCharCode.apply(\n\t      String,\n\t      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n\t    )\n\t  }\n\t  return res\n\t}\n\t\n\tfunction asciiSlice (buf, start, end) {\n\t  var ret = ''\n\t  end = Math.min(buf.length, end)\n\t\n\t  for (var i = start; i < end; ++i) {\n\t    ret += String.fromCharCode(buf[i] & 0x7F)\n\t  }\n\t  return ret\n\t}\n\t\n\tfunction latin1Slice (buf, start, end) {\n\t  var ret = ''\n\t  end = Math.min(buf.length, end)\n\t\n\t  for (var i = start; i < end; ++i) {\n\t    ret += String.fromCharCode(buf[i])\n\t  }\n\t  return ret\n\t}\n\t\n\tfunction hexSlice (buf, start, end) {\n\t  var len = buf.length\n\t\n\t  if (!start || start < 0) start = 0\n\t  if (!end || end < 0 || end > len) end = len\n\t\n\t  var out = ''\n\t  for (var i = start; i < end; ++i) {\n\t    out += toHex(buf[i])\n\t  }\n\t  return out\n\t}\n\t\n\tfunction utf16leSlice (buf, start, end) {\n\t  var bytes = buf.slice(start, end)\n\t  var res = ''\n\t  for (var i = 0; i < bytes.length; i += 2) {\n\t    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n\t  }\n\t  return res\n\t}\n\t\n\tBuffer.prototype.slice = function slice (start, end) {\n\t  var len = this.length\n\t  start = ~~start\n\t  end = end === undefined ? len : ~~end\n\t\n\t  if (start < 0) {\n\t    start += len\n\t    if (start < 0) start = 0\n\t  } else if (start > len) {\n\t    start = len\n\t  }\n\t\n\t  if (end < 0) {\n\t    end += len\n\t    if (end < 0) end = 0\n\t  } else if (end > len) {\n\t    end = len\n\t  }\n\t\n\t  if (end < start) end = start\n\t\n\t  var newBuf\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    newBuf = this.subarray(start, end)\n\t    newBuf.__proto__ = Buffer.prototype\n\t  } else {\n\t    var sliceLen = end - start\n\t    newBuf = new Buffer(sliceLen, undefined)\n\t    for (var i = 0; i < sliceLen; ++i) {\n\t      newBuf[i] = this[i + start]\n\t    }\n\t  }\n\t\n\t  return newBuf\n\t}\n\t\n\t/*\n\t * Need to make sure that buffer isn't trying to write out of bounds.\n\t */\n\tfunction checkOffset (offset, ext, length) {\n\t  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n\t  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n\t}\n\t\n\tBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\t\n\t  var val = this[offset]\n\t  var mul = 1\n\t  var i = 0\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    val += this[offset + i] * mul\n\t  }\n\t\n\t  return val\n\t}\n\t\n\tBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) {\n\t    checkOffset(offset, byteLength, this.length)\n\t  }\n\t\n\t  var val = this[offset + --byteLength]\n\t  var mul = 1\n\t  while (byteLength > 0 && (mul *= 0x100)) {\n\t    val += this[offset + --byteLength] * mul\n\t  }\n\t\n\t  return val\n\t}\n\t\n\tBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 1, this.length)\n\t  return this[offset]\n\t}\n\t\n\tBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  return this[offset] | (this[offset + 1] << 8)\n\t}\n\t\n\tBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  return (this[offset] << 8) | this[offset + 1]\n\t}\n\t\n\tBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t\n\t  return ((this[offset]) |\n\t      (this[offset + 1] << 8) |\n\t      (this[offset + 2] << 16)) +\n\t      (this[offset + 3] * 0x1000000)\n\t}\n\t\n\tBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t\n\t  return (this[offset] * 0x1000000) +\n\t    ((this[offset + 1] << 16) |\n\t    (this[offset + 2] << 8) |\n\t    this[offset + 3])\n\t}\n\t\n\tBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\t\n\t  var val = this[offset]\n\t  var mul = 1\n\t  var i = 0\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    val += this[offset + i] * mul\n\t  }\n\t  mul *= 0x80\n\t\n\t  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\t\n\t  return val\n\t}\n\t\n\tBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\t\n\t  var i = byteLength\n\t  var mul = 1\n\t  var val = this[offset + --i]\n\t  while (i > 0 && (mul *= 0x100)) {\n\t    val += this[offset + --i] * mul\n\t  }\n\t  mul *= 0x80\n\t\n\t  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\t\n\t  return val\n\t}\n\t\n\tBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 1, this.length)\n\t  if (!(this[offset] & 0x80)) return (this[offset])\n\t  return ((0xff - this[offset] + 1) * -1)\n\t}\n\t\n\tBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  var val = this[offset] | (this[offset + 1] << 8)\n\t  return (val & 0x8000) ? val | 0xFFFF0000 : val\n\t}\n\t\n\tBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  var val = this[offset + 1] | (this[offset] << 8)\n\t  return (val & 0x8000) ? val | 0xFFFF0000 : val\n\t}\n\t\n\tBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t\n\t  return (this[offset]) |\n\t    (this[offset + 1] << 8) |\n\t    (this[offset + 2] << 16) |\n\t    (this[offset + 3] << 24)\n\t}\n\t\n\tBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t\n\t  return (this[offset] << 24) |\n\t    (this[offset + 1] << 16) |\n\t    (this[offset + 2] << 8) |\n\t    (this[offset + 3])\n\t}\n\t\n\tBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t  return ieee754.read(this, offset, true, 23, 4)\n\t}\n\t\n\tBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t  return ieee754.read(this, offset, false, 23, 4)\n\t}\n\t\n\tBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 8, this.length)\n\t  return ieee754.read(this, offset, true, 52, 8)\n\t}\n\t\n\tBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 8, this.length)\n\t  return ieee754.read(this, offset, false, 52, 8)\n\t}\n\t\n\tfunction checkInt (buf, value, offset, ext, max, min) {\n\t  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n\t  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n\t  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n\t}\n\t\n\tBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) {\n\t    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n\t    checkInt(this, value, offset, byteLength, maxBytes, 0)\n\t  }\n\t\n\t  var mul = 1\n\t  var i = 0\n\t  this[offset] = value & 0xFF\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    this[offset + i] = (value / mul) & 0xFF\n\t  }\n\t\n\t  return offset + byteLength\n\t}\n\t\n\tBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) {\n\t    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n\t    checkInt(this, value, offset, byteLength, maxBytes, 0)\n\t  }\n\t\n\t  var i = byteLength - 1\n\t  var mul = 1\n\t  this[offset + i] = value & 0xFF\n\t  while (--i >= 0 && (mul *= 0x100)) {\n\t    this[offset + i] = (value / mul) & 0xFF\n\t  }\n\t\n\t  return offset + byteLength\n\t}\n\t\n\tBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n\t  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n\t  this[offset] = (value & 0xff)\n\t  return offset + 1\n\t}\n\t\n\tfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n\t  if (value < 0) value = 0xffff + value + 1\n\t  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n\t    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n\t      (littleEndian ? i : 1 - i) * 8\n\t  }\n\t}\n\t\n\tBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value & 0xff)\n\t    this[offset + 1] = (value >>> 8)\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, true)\n\t  }\n\t  return offset + 2\n\t}\n\t\n\tBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 8)\n\t    this[offset + 1] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, false)\n\t  }\n\t  return offset + 2\n\t}\n\t\n\tfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n\t  if (value < 0) value = 0xffffffff + value + 1\n\t  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n\t    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n\t  }\n\t}\n\t\n\tBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset + 3] = (value >>> 24)\n\t    this[offset + 2] = (value >>> 16)\n\t    this[offset + 1] = (value >>> 8)\n\t    this[offset] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, true)\n\t  }\n\t  return offset + 4\n\t}\n\t\n\tBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 24)\n\t    this[offset + 1] = (value >>> 16)\n\t    this[offset + 2] = (value >>> 8)\n\t    this[offset + 3] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, false)\n\t  }\n\t  return offset + 4\n\t}\n\t\n\tBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) {\n\t    var limit = Math.pow(2, 8 * byteLength - 1)\n\t\n\t    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n\t  }\n\t\n\t  var i = 0\n\t  var mul = 1\n\t  var sub = 0\n\t  this[offset] = value & 0xFF\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n\t      sub = 1\n\t    }\n\t    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n\t  }\n\t\n\t  return offset + byteLength\n\t}\n\t\n\tBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) {\n\t    var limit = Math.pow(2, 8 * byteLength - 1)\n\t\n\t    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n\t  }\n\t\n\t  var i = byteLength - 1\n\t  var mul = 1\n\t  var sub = 0\n\t  this[offset + i] = value & 0xFF\n\t  while (--i >= 0 && (mul *= 0x100)) {\n\t    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n\t      sub = 1\n\t    }\n\t    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n\t  }\n\t\n\t  return offset + byteLength\n\t}\n\t\n\tBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n\t  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n\t  if (value < 0) value = 0xff + value + 1\n\t  this[offset] = (value & 0xff)\n\t  return offset + 1\n\t}\n\t\n\tBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value & 0xff)\n\t    this[offset + 1] = (value >>> 8)\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, true)\n\t  }\n\t  return offset + 2\n\t}\n\t\n\tBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 8)\n\t    this[offset + 1] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, false)\n\t  }\n\t  return offset + 2\n\t}\n\t\n\tBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value & 0xff)\n\t    this[offset + 1] = (value >>> 8)\n\t    this[offset + 2] = (value >>> 16)\n\t    this[offset + 3] = (value >>> 24)\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, true)\n\t  }\n\t  return offset + 4\n\t}\n\t\n\tBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n\t  if (value < 0) value = 0xffffffff + value + 1\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 24)\n\t    this[offset + 1] = (value >>> 16)\n\t    this[offset + 2] = (value >>> 8)\n\t    this[offset + 3] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, false)\n\t  }\n\t  return offset + 4\n\t}\n\t\n\tfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n\t  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n\t  if (offset < 0) throw new RangeError('Index out of range')\n\t}\n\t\n\tfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n\t  if (!noAssert) {\n\t    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n\t  }\n\t  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n\t  return offset + 4\n\t}\n\t\n\tBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n\t  return writeFloat(this, value, offset, true, noAssert)\n\t}\n\t\n\tBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n\t  return writeFloat(this, value, offset, false, noAssert)\n\t}\n\t\n\tfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n\t  if (!noAssert) {\n\t    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n\t  }\n\t  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n\t  return offset + 8\n\t}\n\t\n\tBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n\t  return writeDouble(this, value, offset, true, noAssert)\n\t}\n\t\n\tBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n\t  return writeDouble(this, value, offset, false, noAssert)\n\t}\n\t\n\t// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n\tBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n\t  if (!start) start = 0\n\t  if (!end && end !== 0) end = this.length\n\t  if (targetStart >= target.length) targetStart = target.length\n\t  if (!targetStart) targetStart = 0\n\t  if (end > 0 && end < start) end = start\n\t\n\t  // Copy 0 bytes; we're done\n\t  if (end === start) return 0\n\t  if (target.length === 0 || this.length === 0) return 0\n\t\n\t  // Fatal error conditions\n\t  if (targetStart < 0) {\n\t    throw new RangeError('targetStart out of bounds')\n\t  }\n\t  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n\t  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\t\n\t  // Are we oob?\n\t  if (end > this.length) end = this.length\n\t  if (target.length - targetStart < end - start) {\n\t    end = target.length - targetStart + start\n\t  }\n\t\n\t  var len = end - start\n\t  var i\n\t\n\t  if (this === target && start < targetStart && targetStart < end) {\n\t    // descending copy from end\n\t    for (i = len - 1; i >= 0; --i) {\n\t      target[i + targetStart] = this[i + start]\n\t    }\n\t  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n\t    // ascending copy from start\n\t    for (i = 0; i < len; ++i) {\n\t      target[i + targetStart] = this[i + start]\n\t    }\n\t  } else {\n\t    Uint8Array.prototype.set.call(\n\t      target,\n\t      this.subarray(start, start + len),\n\t      targetStart\n\t    )\n\t  }\n\t\n\t  return len\n\t}\n\t\n\t// Usage:\n\t//    buffer.fill(number[, offset[, end]])\n\t//    buffer.fill(buffer[, offset[, end]])\n\t//    buffer.fill(string[, offset[, end]][, encoding])\n\tBuffer.prototype.fill = function fill (val, start, end, encoding) {\n\t  // Handle string cases:\n\t  if (typeof val === 'string') {\n\t    if (typeof start === 'string') {\n\t      encoding = start\n\t      start = 0\n\t      end = this.length\n\t    } else if (typeof end === 'string') {\n\t      encoding = end\n\t      end = this.length\n\t    }\n\t    if (val.length === 1) {\n\t      var code = val.charCodeAt(0)\n\t      if (code < 256) {\n\t        val = code\n\t      }\n\t    }\n\t    if (encoding !== undefined && typeof encoding !== 'string') {\n\t      throw new TypeError('encoding must be a string')\n\t    }\n\t    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n\t      throw new TypeError('Unknown encoding: ' + encoding)\n\t    }\n\t  } else if (typeof val === 'number') {\n\t    val = val & 255\n\t  }\n\t\n\t  // Invalid ranges are not set to a default, so can range check early.\n\t  if (start < 0 || this.length < start || this.length < end) {\n\t    throw new RangeError('Out of range index')\n\t  }\n\t\n\t  if (end <= start) {\n\t    return this\n\t  }\n\t\n\t  start = start >>> 0\n\t  end = end === undefined ? this.length : end >>> 0\n\t\n\t  if (!val) val = 0\n\t\n\t  var i\n\t  if (typeof val === 'number') {\n\t    for (i = start; i < end; ++i) {\n\t      this[i] = val\n\t    }\n\t  } else {\n\t    var bytes = Buffer.isBuffer(val)\n\t      ? val\n\t      : utf8ToBytes(new Buffer(val, encoding).toString())\n\t    var len = bytes.length\n\t    for (i = 0; i < end - start; ++i) {\n\t      this[i + start] = bytes[i % len]\n\t    }\n\t  }\n\t\n\t  return this\n\t}\n\t\n\t// HELPER FUNCTIONS\n\t// ================\n\t\n\tvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\t\n\tfunction base64clean (str) {\n\t  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n\t  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n\t  // Node converts strings with length < 2 to ''\n\t  if (str.length < 2) return ''\n\t  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n\t  while (str.length % 4 !== 0) {\n\t    str = str + '='\n\t  }\n\t  return str\n\t}\n\t\n\tfunction stringtrim (str) {\n\t  if (str.trim) return str.trim()\n\t  return str.replace(/^\\s+|\\s+$/g, '')\n\t}\n\t\n\tfunction toHex (n) {\n\t  if (n < 16) return '0' + n.toString(16)\n\t  return n.toString(16)\n\t}\n\t\n\tfunction utf8ToBytes (string, units) {\n\t  units = units || Infinity\n\t  var codePoint\n\t  var length = string.length\n\t  var leadSurrogate = null\n\t  var bytes = []\n\t\n\t  for (var i = 0; i < length; ++i) {\n\t    codePoint = string.charCodeAt(i)\n\t\n\t    // is surrogate component\n\t    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n\t      // last char was a lead\n\t      if (!leadSurrogate) {\n\t        // no lead yet\n\t        if (codePoint > 0xDBFF) {\n\t          // unexpected trail\n\t          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t          continue\n\t        } else if (i + 1 === length) {\n\t          // unpaired lead\n\t          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t          continue\n\t        }\n\t\n\t        // valid lead\n\t        leadSurrogate = codePoint\n\t\n\t        continue\n\t      }\n\t\n\t      // 2 leads in a row\n\t      if (codePoint < 0xDC00) {\n\t        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t        leadSurrogate = codePoint\n\t        continue\n\t      }\n\t\n\t      // valid surrogate pair\n\t      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n\t    } else if (leadSurrogate) {\n\t      // valid bmp char, but last char was a lead\n\t      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t    }\n\t\n\t    leadSurrogate = null\n\t\n\t    // encode utf8\n\t    if (codePoint < 0x80) {\n\t      if ((units -= 1) < 0) break\n\t      bytes.push(codePoint)\n\t    } else if (codePoint < 0x800) {\n\t      if ((units -= 2) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0x6 | 0xC0,\n\t        codePoint & 0x3F | 0x80\n\t      )\n\t    } else if (codePoint < 0x10000) {\n\t      if ((units -= 3) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0xC | 0xE0,\n\t        codePoint >> 0x6 & 0x3F | 0x80,\n\t        codePoint & 0x3F | 0x80\n\t      )\n\t    } else if (codePoint < 0x110000) {\n\t      if ((units -= 4) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0x12 | 0xF0,\n\t        codePoint >> 0xC & 0x3F | 0x80,\n\t        codePoint >> 0x6 & 0x3F | 0x80,\n\t        codePoint & 0x3F | 0x80\n\t      )\n\t    } else {\n\t      throw new Error('Invalid code point')\n\t    }\n\t  }\n\t\n\t  return bytes\n\t}\n\t\n\tfunction asciiToBytes (str) {\n\t  var byteArray = []\n\t  for (var i = 0; i < str.length; ++i) {\n\t    // Node's code seems to be doing this and not & 0x7F..\n\t    byteArray.push(str.charCodeAt(i) & 0xFF)\n\t  }\n\t  return byteArray\n\t}\n\t\n\tfunction utf16leToBytes (str, units) {\n\t  var c, hi, lo\n\t  var byteArray = []\n\t  for (var i = 0; i < str.length; ++i) {\n\t    if ((units -= 2) < 0) break\n\t\n\t    c = str.charCodeAt(i)\n\t    hi = c >> 8\n\t    lo = c % 256\n\t    byteArray.push(lo)\n\t    byteArray.push(hi)\n\t  }\n\t\n\t  return byteArray\n\t}\n\t\n\tfunction base64ToBytes (str) {\n\t  return base64.toByteArray(base64clean(str))\n\t}\n\t\n\tfunction blitBuffer (src, dst, offset, length) {\n\t  for (var i = 0; i < length; ++i) {\n\t    if ((i + offset >= dst.length) || (i >= src.length)) break\n\t    dst[i + offset] = src[i]\n\t  }\n\t  return i\n\t}\n\t\n\tfunction isnan (val) {\n\t  return val !== val // eslint-disable-line no-self-compare\n\t}\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * chai\n\t * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\tvar used = []\n\t  , exports = module.exports = {};\n\t\n\t/*!\n\t * Chai version\n\t */\n\t\n\texports.version = '1.10.0';\n\t\n\t/*!\n\t * Assertion Error\n\t */\n\t\n\texports.AssertionError = __webpack_require__(15);\n\t\n\t/*!\n\t * Utils for plugins (not exported)\n\t */\n\t\n\tvar util = __webpack_require__(40);\n\t\n\t/**\n\t * # .use(function)\n\t *\n\t * Provides a way to extend the internals of Chai\n\t *\n\t * @param {Function}\n\t * @returns {this} for chaining\n\t * @api public\n\t */\n\t\n\texports.use = function (fn) {\n\t  if (!~used.indexOf(fn)) {\n\t    fn(this, util);\n\t    used.push(fn);\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\t/*!\n\t * Configuration\n\t */\n\t\n\tvar config = __webpack_require__(1);\n\texports.config = config;\n\t\n\t/*!\n\t * Primary `Assertion` prototype\n\t */\n\t\n\tvar assertion = __webpack_require__(28);\n\texports.use(assertion);\n\t\n\t/*!\n\t * Core Assertions\n\t */\n\t\n\tvar core = __webpack_require__(29);\n\texports.use(core);\n\t\n\t/*!\n\t * Expect interface\n\t */\n\t\n\tvar expect = __webpack_require__(31);\n\texports.use(expect);\n\t\n\t/*!\n\t * Should interface\n\t */\n\t\n\tvar should = __webpack_require__(32);\n\texports.use(should);\n\t\n\t/*!\n\t * Assert interface\n\t */\n\t\n\tvar assert = __webpack_require__(30);\n\texports.use(assert);\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * chai\n\t * http://chaijs.com\n\t * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\tvar config = __webpack_require__(1);\n\tvar NOOP = function() { };\n\t\n\tmodule.exports = function (_chai, util) {\n\t  /*!\n\t   * Module dependencies.\n\t   */\n\t\n\t  var AssertionError = _chai.AssertionError\n\t    , flag = util.flag;\n\t\n\t  /*!\n\t   * Module export.\n\t   */\n\t\n\t  _chai.Assertion = Assertion;\n\t\n\t  /*!\n\t   * Assertion Constructor\n\t   *\n\t   * Creates object for chaining.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  function Assertion (obj, msg, stack) {\n\t    flag(this, 'ssfi', stack || arguments.callee);\n\t    flag(this, 'object', obj);\n\t    flag(this, 'message', msg);\n\t  }\n\t\n\t  Object.defineProperty(Assertion, 'includeStack', {\n\t    get: function() {\n\t      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n\t      return config.includeStack;\n\t    },\n\t    set: function(value) {\n\t      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n\t      config.includeStack = value;\n\t    }\n\t  });\n\t\n\t  Object.defineProperty(Assertion, 'showDiff', {\n\t    get: function() {\n\t      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n\t      return config.showDiff;\n\t    },\n\t    set: function(value) {\n\t      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n\t      config.showDiff = value;\n\t    }\n\t  });\n\t\n\t  Assertion.addProperty = function (name, fn) {\n\t    util.addProperty(this.prototype, name, fn);\n\t  };\n\t\n\t  Assertion.addMethod = function (name, fn) {\n\t    util.addMethod(this.prototype, name, fn);\n\t  };\n\t\n\t  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {\n\t    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n\t  };\n\t\n\t  Assertion.addChainableNoop = function(name, fn) {\n\t    util.addChainableMethod(this.prototype, name, NOOP, fn);\n\t  };\n\t\n\t  Assertion.overwriteProperty = function (name, fn) {\n\t    util.overwriteProperty(this.prototype, name, fn);\n\t  };\n\t\n\t  Assertion.overwriteMethod = function (name, fn) {\n\t    util.overwriteMethod(this.prototype, name, fn);\n\t  };\n\t\n\t  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {\n\t    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n\t  };\n\t\n\t  /*!\n\t   * ### .assert(expression, message, negateMessage, expected, actual)\n\t   *\n\t   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n\t   *\n\t   * @name assert\n\t   * @param {Philosophical} expression to be tested\n\t   * @param {String or Function} message or function that returns message to display if fails\n\t   * @param {String or Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n\t   * @param {Mixed} expected value (remember to check for negation)\n\t   * @param {Mixed} actual (optional) will default to `this.obj`\n\t   * @api private\n\t   */\n\t\n\t  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {\n\t    var ok = util.test(this, arguments);\n\t    if (true !== showDiff) showDiff = false;\n\t    if (true !== config.showDiff) showDiff = false;\n\t\n\t    if (!ok) {\n\t      var msg = util.getMessage(this, arguments)\n\t        , actual = util.getActual(this, arguments);\n\t      throw new AssertionError(msg, {\n\t          actual: actual\n\t        , expected: expected\n\t        , showDiff: showDiff\n\t      }, (config.includeStack) ? this.assert : flag(this, 'ssfi'));\n\t    }\n\t  };\n\t\n\t  /*!\n\t   * ### ._obj\n\t   *\n\t   * Quick reference to stored `actual` value for plugin developers.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Object.defineProperty(Assertion.prototype, '_obj',\n\t    { get: function () {\n\t        return flag(this, 'object');\n\t      }\n\t    , set: function (val) {\n\t        flag(this, 'object', val);\n\t      }\n\t  });\n\t};\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports) {\n\n\t/*!\n\t * chai\n\t * http://chaijs.com\n\t * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\tmodule.exports = function (chai, _) {\n\t  var Assertion = chai.Assertion\n\t    , toString = Object.prototype.toString\n\t    , flag = _.flag;\n\t\n\t  /**\n\t   * ### Language Chains\n\t   *\n\t   * The following are provided as chainable getters to\n\t   * improve the readability of your assertions. They\n\t   * do not provide testing capabilities unless they\n\t   * have been overwritten by a plugin.\n\t   *\n\t   * **Chains**\n\t   *\n\t   * - to\n\t   * - be\n\t   * - been\n\t   * - is\n\t   * - that\n\t   * - and\n\t   * - has\n\t   * - have\n\t   * - with\n\t   * - at\n\t   * - of\n\t   * - same\n\t   *\n\t   * @name language chains\n\t   * @api public\n\t   */\n\t\n\t  [ 'to', 'be', 'been'\n\t  , 'is', 'and', 'has', 'have'\n\t  , 'with', 'that', 'at'\n\t  , 'of', 'same' ].forEach(function (chain) {\n\t    Assertion.addProperty(chain, function () {\n\t      return this;\n\t    });\n\t  });\n\t\n\t  /**\n\t   * ### .not\n\t   *\n\t   * Negates any of assertions following in the chain.\n\t   *\n\t   *     expect(foo).to.not.equal('bar');\n\t   *     expect(goodFn).to.not.throw(Error);\n\t   *     expect({ foo: 'baz' }).to.have.property('foo')\n\t   *       .and.not.equal('bar');\n\t   *\n\t   * @name not\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addProperty('not', function () {\n\t    flag(this, 'negate', true);\n\t  });\n\t\n\t  /**\n\t   * ### .deep\n\t   *\n\t   * Sets the `deep` flag, later used by the `equal` and\n\t   * `property` assertions.\n\t   *\n\t   *     expect(foo).to.deep.equal({ bar: 'baz' });\n\t   *     expect({ foo: { bar: { baz: 'quux' } } })\n\t   *       .to.have.deep.property('foo.bar.baz', 'quux');\n\t   *\n\t   * @name deep\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addProperty('deep', function () {\n\t    flag(this, 'deep', true);\n\t  });\n\t\n\t  /**\n\t   * ### .a(type)\n\t   *\n\t   * The `a` and `an` assertions are aliases that can be\n\t   * used either as language chains or to assert a value's\n\t   * type.\n\t   *\n\t   *     // typeof\n\t   *     expect('test').to.be.a('string');\n\t   *     expect({ foo: 'bar' }).to.be.an('object');\n\t   *     expect(null).to.be.a('null');\n\t   *     expect(undefined).to.be.an('undefined');\n\t   *\n\t   *     // language chain\n\t   *     expect(foo).to.be.an.instanceof(Foo);\n\t   *\n\t   * @name a\n\t   * @alias an\n\t   * @param {String} type\n\t   * @param {String} message _optional_\n\t   * @api public\n\t   */\n\t\n\t  function an (type, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    type = type.toLowerCase();\n\t    var obj = flag(this, 'object')\n\t      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';\n\t\n\t    this.assert(\n\t        type === _.type(obj)\n\t      , 'expected #{this} to be ' + article + type\n\t      , 'expected #{this} not to be ' + article + type\n\t    );\n\t  }\n\t\n\t  Assertion.addChainableMethod('an', an);\n\t  Assertion.addChainableMethod('a', an);\n\t\n\t  /**\n\t   * ### .include(value)\n\t   *\n\t   * The `include` and `contain` assertions can be used as either property\n\t   * based language chains or as methods to assert the inclusion of an object\n\t   * in an array or a substring in a string. When used as language chains,\n\t   * they toggle the `contain` flag for the `keys` assertion.\n\t   *\n\t   *     expect([1,2,3]).to.include(2);\n\t   *     expect('foobar').to.contain('foo');\n\t   *     expect({ foo: 'bar', hello: 'universe' }).to.include.keys('foo');\n\t   *\n\t   * @name include\n\t   * @alias contain\n\t   * @param {Object|String|Number} obj\n\t   * @param {String} message _optional_\n\t   * @api public\n\t   */\n\t\n\t  function includeChainingBehavior () {\n\t    flag(this, 'contains', true);\n\t  }\n\t\n\t  function include (val, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var obj = flag(this, 'object');\n\t    var expected = false;\n\t    if (_.type(obj) === 'array' && _.type(val) === 'object') {\n\t      for (var i in obj) {\n\t        if (_.eql(obj[i], val)) {\n\t          expected = true;\n\t          break;\n\t        }\n\t      }\n\t    } else if (_.type(val) === 'object') {\n\t      if (!flag(this, 'negate')) {\n\t        for (var k in val) new Assertion(obj).property(k, val[k]);\n\t        return;\n\t      }\n\t      var subset = {}\n\t      for (var k in val) subset[k] = obj[k]\n\t      expected = _.eql(subset, val);\n\t    } else {\n\t      expected = obj && ~obj.indexOf(val)\n\t    }\n\t    this.assert(\n\t        expected\n\t      , 'expected #{this} to include ' + _.inspect(val)\n\t      , 'expected #{this} to not include ' + _.inspect(val));\n\t  }\n\t\n\t  Assertion.addChainableMethod('include', include, includeChainingBehavior);\n\t  Assertion.addChainableMethod('contain', include, includeChainingBehavior);\n\t\n\t  /**\n\t   * ### .ok\n\t   *\n\t   * Asserts that the target is truthy.\n\t   *\n\t   *     expect('everthing').to.be.ok;\n\t   *     expect(1).to.be.ok;\n\t   *     expect(false).to.not.be.ok;\n\t   *     expect(undefined).to.not.be.ok;\n\t   *     expect(null).to.not.be.ok;\n\t   *\n\t   * Can also be used as a function, which prevents some linter errors.\n\t   *\n\t   *     expect('everthing').to.be.ok();\n\t   *     \n\t   * @name ok\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addChainableNoop('ok', function () {\n\t    this.assert(\n\t        flag(this, 'object')\n\t      , 'expected #{this} to be truthy'\n\t      , 'expected #{this} to be falsy');\n\t  });\n\t\n\t  /**\n\t   * ### .true\n\t   *\n\t   * Asserts that the target is `true`.\n\t   *\n\t   *     expect(true).to.be.true;\n\t   *     expect(1).to.not.be.true;\n\t   *\n\t   * Can also be used as a function, which prevents some linter errors.\n\t   *\n\t   *     expect(true).to.be.true();\n\t   *\n\t   * @name true\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addChainableNoop('true', function () {\n\t    this.assert(\n\t        true === flag(this, 'object')\n\t      , 'expected #{this} to be true'\n\t      , 'expected #{this} to be false'\n\t      , this.negate ? false : true\n\t    );\n\t  });\n\t\n\t  /**\n\t   * ### .false\n\t   *\n\t   * Asserts that the target is `false`.\n\t   *\n\t   *     expect(false).to.be.false;\n\t   *     expect(0).to.not.be.false;\n\t   *\n\t   * Can also be used as a function, which prevents some linter errors.\n\t   *\n\t   *     expect(false).to.be.false();\n\t   *\n\t   * @name false\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addChainableNoop('false', function () {\n\t    this.assert(\n\t        false === flag(this, 'object')\n\t      , 'expected #{this} to be false'\n\t      , 'expected #{this} to be true'\n\t      , this.negate ? true : false\n\t    );\n\t  });\n\t\n\t  /**\n\t   * ### .null\n\t   *\n\t   * Asserts that the target is `null`.\n\t   *\n\t   *     expect(null).to.be.null;\n\t   *     expect(undefined).not.to.be.null;\n\t   *\n\t   * Can also be used as a function, which prevents some linter errors.\n\t   *\n\t   *     expect(null).to.be.null();\n\t   *\n\t   * @name null\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addChainableNoop('null', function () {\n\t    this.assert(\n\t        null === flag(this, 'object')\n\t      , 'expected #{this} to be null'\n\t      , 'expected #{this} not to be null'\n\t    );\n\t  });\n\t\n\t  /**\n\t   * ### .undefined\n\t   *\n\t   * Asserts that the target is `undefined`.\n\t   *\n\t   *     expect(undefined).to.be.undefined;\n\t   *     expect(null).to.not.be.undefined;\n\t   *\n\t   * Can also be used as a function, which prevents some linter errors.\n\t   *\n\t   *     expect(undefined).to.be.undefined();\n\t   *\n\t   * @name undefined\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addChainableNoop('undefined', function () {\n\t    this.assert(\n\t        undefined === flag(this, 'object')\n\t      , 'expected #{this} to be undefined'\n\t      , 'expected #{this} not to be undefined'\n\t    );\n\t  });\n\t\n\t  /**\n\t   * ### .exist\n\t   *\n\t   * Asserts that the target is neither `null` nor `undefined`.\n\t   *\n\t   *     var foo = 'hi'\n\t   *       , bar = null\n\t   *       , baz;\n\t   *\n\t   *     expect(foo).to.exist;\n\t   *     expect(bar).to.not.exist;\n\t   *     expect(baz).to.not.exist;\n\t   *\n\t   * Can also be used as a function, which prevents some linter errors.\n\t   *\n\t   *     expect(foo).to.exist();\n\t   *\n\t   * @name exist\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addChainableNoop('exist', function () {\n\t    this.assert(\n\t        null != flag(this, 'object')\n\t      , 'expected #{this} to exist'\n\t      , 'expected #{this} to not exist'\n\t    );\n\t  });\n\t\n\t\n\t  /**\n\t   * ### .empty\n\t   *\n\t   * Asserts that the target's length is `0`. For arrays, it checks\n\t   * the `length` property. For objects, it gets the count of\n\t   * enumerable keys.\n\t   *\n\t   *     expect([]).to.be.empty;\n\t   *     expect('').to.be.empty;\n\t   *     expect({}).to.be.empty;\n\t   *\n\t   * Can also be used as a function, which prevents some linter errors.\n\t   *\n\t   *     expect([]).to.be.empty();\n\t   *\n\t   * @name empty\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addChainableNoop('empty', function () {\n\t    var obj = flag(this, 'object')\n\t      , expected = obj;\n\t\n\t    if (Array.isArray(obj) || 'string' === typeof object) {\n\t      expected = obj.length;\n\t    } else if (typeof obj === 'object') {\n\t      expected = Object.keys(obj).length;\n\t    }\n\t\n\t    this.assert(\n\t        !expected\n\t      , 'expected #{this} to be empty'\n\t      , 'expected #{this} not to be empty'\n\t    );\n\t  });\n\t\n\t  /**\n\t   * ### .arguments\n\t   *\n\t   * Asserts that the target is an arguments object.\n\t   *\n\t   *     function test () {\n\t   *       expect(arguments).to.be.arguments;\n\t   *     }\n\t   *\n\t   * Can also be used as a function, which prevents some linter errors.\n\t   *\n\t   *     function test () {\n\t   *       expect(arguments).to.be.arguments();\n\t   *     }\n\t   *\n\t   * @name arguments\n\t   * @alias Arguments\n\t   * @api public\n\t   */\n\t\n\t  function checkArguments () {\n\t    var obj = flag(this, 'object')\n\t      , type = Object.prototype.toString.call(obj);\n\t    this.assert(\n\t        '[object Arguments]' === type\n\t      , 'expected #{this} to be arguments but got ' + type\n\t      , 'expected #{this} to not be arguments'\n\t    );\n\t  }\n\t\n\t  Assertion.addChainableNoop('arguments', checkArguments);\n\t  Assertion.addChainableNoop('Arguments', checkArguments);\n\t\n\t  /**\n\t   * ### .equal(value)\n\t   *\n\t   * Asserts that the target is strictly equal (`===`) to `value`.\n\t   * Alternately, if the `deep` flag is set, asserts that\n\t   * the target is deeply equal to `value`.\n\t   *\n\t   *     expect('hello').to.equal('hello');\n\t   *     expect(42).to.equal(42);\n\t   *     expect(1).to.not.equal(true);\n\t   *     expect({ foo: 'bar' }).to.not.equal({ foo: 'bar' });\n\t   *     expect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' });\n\t   *\n\t   * @name equal\n\t   * @alias equals\n\t   * @alias eq\n\t   * @alias deep.equal\n\t   * @param {Mixed} value\n\t   * @param {String} message _optional_\n\t   * @api public\n\t   */\n\t\n\t  function assertEqual (val, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var obj = flag(this, 'object');\n\t    if (flag(this, 'deep')) {\n\t      return this.eql(val);\n\t    } else {\n\t      this.assert(\n\t          val === obj\n\t        , 'expected #{this} to equal #{exp}'\n\t        , 'expected #{this} to not equal #{exp}'\n\t        , val\n\t        , this._obj\n\t        , true\n\t      );\n\t    }\n\t  }\n\t\n\t  Assertion.addMethod('equal', assertEqual);\n\t  Assertion.addMethod('equals', assertEqual);\n\t  Assertion.addMethod('eq', assertEqual);\n\t\n\t  /**\n\t   * ### .eql(value)\n\t   *\n\t   * Asserts that the target is deeply equal to `value`.\n\t   *\n\t   *     expect({ foo: 'bar' }).to.eql({ foo: 'bar' });\n\t   *     expect([ 1, 2, 3 ]).to.eql([ 1, 2, 3 ]);\n\t   *\n\t   * @name eql\n\t   * @alias eqls\n\t   * @param {Mixed} value\n\t   * @param {String} message _optional_\n\t   * @api public\n\t   */\n\t\n\t  function assertEql(obj, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    this.assert(\n\t        _.eql(obj, flag(this, 'object'))\n\t      , 'expected #{this} to deeply equal #{exp}'\n\t      , 'expected #{this} to not deeply equal #{exp}'\n\t      , obj\n\t      , this._obj\n\t      , true\n\t    );\n\t  }\n\t\n\t  Assertion.addMethod('eql', assertEql);\n\t  Assertion.addMethod('eqls', assertEql);\n\t\n\t  /**\n\t   * ### .above(value)\n\t   *\n\t   * Asserts that the target is greater than `value`.\n\t   *\n\t   *     expect(10).to.be.above(5);\n\t   *\n\t   * Can also be used in conjunction with `length` to\n\t   * assert a minimum length. The benefit being a\n\t   * more informative error message than if the length\n\t   * was supplied directly.\n\t   *\n\t   *     expect('foo').to.have.length.above(2);\n\t   *     expect([ 1, 2, 3 ]).to.have.length.above(2);\n\t   *\n\t   * @name above\n\t   * @alias gt\n\t   * @alias greaterThan\n\t   * @param {Number} value\n\t   * @param {String} message _optional_\n\t   * @api public\n\t   */\n\t\n\t  function assertAbove (n, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var obj = flag(this, 'object');\n\t    if (flag(this, 'doLength')) {\n\t      new Assertion(obj, msg).to.have.property('length');\n\t      var len = obj.length;\n\t      this.assert(\n\t          len > n\n\t        , 'expected #{this} to have a length above #{exp} but got #{act}'\n\t        , 'expected #{this} to not have a length above #{exp}'\n\t        , n\n\t        , len\n\t      );\n\t    } else {\n\t      this.assert(\n\t          obj > n\n\t        , 'expected #{this} to be above ' + n\n\t        , 'expected #{this} to be at most ' + n\n\t      );\n\t    }\n\t  }\n\t\n\t  Assertion.addMethod('above', assertAbove);\n\t  Assertion.addMethod('gt', assertAbove);\n\t  Assertion.addMethod('greaterThan', assertAbove);\n\t\n\t  /**\n\t   * ### .least(value)\n\t   *\n\t   * Asserts that the target is greater than or equal to `value`.\n\t   *\n\t   *     expect(10).to.be.at.least(10);\n\t   *\n\t   * Can also be used in conjunction with `length` to\n\t   * assert a minimum length. The benefit being a\n\t   * more informative error message than if the length\n\t   * was supplied directly.\n\t   *\n\t   *     expect('foo').to.have.length.of.at.least(2);\n\t   *     expect([ 1, 2, 3 ]).to.have.length.of.at.least(3);\n\t   *\n\t   * @name least\n\t   * @alias gte\n\t   * @param {Number} value\n\t   * @param {String} message _optional_\n\t   * @api public\n\t   */\n\t\n\t  function assertLeast (n, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var obj = flag(this, 'object');\n\t    if (flag(this, 'doLength')) {\n\t      new Assertion(obj, msg).to.have.property('length');\n\t      var len = obj.length;\n\t      this.assert(\n\t          len >= n\n\t        , 'expected #{this} to have a length at least #{exp} but got #{act}'\n\t        , 'expected #{this} to have a length below #{exp}'\n\t        , n\n\t        , len\n\t      );\n\t    } else {\n\t      this.assert(\n\t          obj >= n\n\t        , 'expected #{this} to be at least ' + n\n\t        , 'expected #{this} to be below ' + n\n\t      );\n\t    }\n\t  }\n\t\n\t  Assertion.addMethod('least', assertLeast);\n\t  Assertion.addMethod('gte', assertLeast);\n\t\n\t  /**\n\t   * ### .below(value)\n\t   *\n\t   * Asserts that the target is less than `value`.\n\t   *\n\t   *     expect(5).to.be.below(10);\n\t   *\n\t   * Can also be used in conjunction with `length` to\n\t   * assert a maximum length. The benefit being a\n\t   * more informative error message than if the length\n\t   * was supplied directly.\n\t   *\n\t   *     expect('foo').to.have.length.below(4);\n\t   *     expect([ 1, 2, 3 ]).to.have.length.below(4);\n\t   *\n\t   * @name below\n\t   * @alias lt\n\t   * @alias lessThan\n\t   * @param {Number} value\n\t   * @param {String} message _optional_\n\t   * @api public\n\t   */\n\t\n\t  function assertBelow (n, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var obj = flag(this, 'object');\n\t    if (flag(this, 'doLength')) {\n\t      new Assertion(obj, msg).to.have.property('length');\n\t      var len = obj.length;\n\t      this.assert(\n\t          len < n\n\t        , 'expected #{this} to have a length below #{exp} but got #{act}'\n\t        , 'expected #{this} to not have a length below #{exp}'\n\t        , n\n\t        , len\n\t      );\n\t    } else {\n\t      this.assert(\n\t          obj < n\n\t        , 'expected #{this} to be below ' + n\n\t        , 'expected #{this} to be at least ' + n\n\t      );\n\t    }\n\t  }\n\t\n\t  Assertion.addMethod('below', assertBelow);\n\t  Assertion.addMethod('lt', assertBelow);\n\t  Assertion.addMethod('lessThan', assertBelow);\n\t\n\t  /**\n\t   * ### .most(value)\n\t   *\n\t   * Asserts that the target is less than or equal to `value`.\n\t   *\n\t   *     expect(5).to.be.at.most(5);\n\t   *\n\t   * Can also be used in conjunction with `length` to\n\t   * assert a maximum length. The benefit being a\n\t   * more informative error message than if the length\n\t   * was supplied directly.\n\t   *\n\t   *     expect('foo').to.have.length.of.at.most(4);\n\t   *     expect([ 1, 2, 3 ]).to.have.length.of.at.most(3);\n\t   *\n\t   * @name most\n\t   * @alias lte\n\t   * @param {Number} value\n\t   * @param {String} message _optional_\n\t   * @api public\n\t   */\n\t\n\t  function assertMost (n, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var obj = flag(this, 'object');\n\t    if (flag(this, 'doLength')) {\n\t      new Assertion(obj, msg).to.have.property('length');\n\t      var len = obj.length;\n\t      this.assert(\n\t          len <= n\n\t        , 'expected #{this} to have a length at most #{exp} but got #{act}'\n\t        , 'expected #{this} to have a length above #{exp}'\n\t        , n\n\t        , len\n\t      );\n\t    } else {\n\t      this.assert(\n\t          obj <= n\n\t        , 'expected #{this} to be at most ' + n\n\t        , 'expected #{this} to be above ' + n\n\t      );\n\t    }\n\t  }\n\t\n\t  Assertion.addMethod('most', assertMost);\n\t  Assertion.addMethod('lte', assertMost);\n\t\n\t  /**\n\t   * ### .within(start, finish)\n\t   *\n\t   * Asserts that the target is within a range.\n\t   *\n\t   *     expect(7).to.be.within(5,10);\n\t   *\n\t   * Can also be used in conjunction with `length` to\n\t   * assert a length range. The benefit being a\n\t   * more informative error message than if the length\n\t   * was supplied directly.\n\t   *\n\t   *     expect('foo').to.have.length.within(2,4);\n\t   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);\n\t   *\n\t   * @name within\n\t   * @param {Number} start lowerbound inclusive\n\t   * @param {Number} finish upperbound inclusive\n\t   * @param {String} message _optional_\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addMethod('within', function (start, finish, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var obj = flag(this, 'object')\n\t      , range = start + '..' + finish;\n\t    if (flag(this, 'doLength')) {\n\t      new Assertion(obj, msg).to.have.property('length');\n\t      var len = obj.length;\n\t      this.assert(\n\t          len >= start && len <= finish\n\t        , 'expected #{this} to have a length within ' + range\n\t        , 'expected #{this} to not have a length within ' + range\n\t      );\n\t    } else {\n\t      this.assert(\n\t          obj >= start && obj <= finish\n\t        , 'expected #{this} to be within ' + range\n\t        , 'expected #{this} to not be within ' + range\n\t      );\n\t    }\n\t  });\n\t\n\t  /**\n\t   * ### .instanceof(constructor)\n\t   *\n\t   * Asserts that the target is an instance of `constructor`.\n\t   *\n\t   *     var Tea = function (name) { this.name = name; }\n\t   *       , Chai = new Tea('chai');\n\t   *\n\t   *     expect(Chai).to.be.an.instanceof(Tea);\n\t   *     expect([ 1, 2, 3 ]).to.be.instanceof(Array);\n\t   *\n\t   * @name instanceof\n\t   * @param {Constructor} constructor\n\t   * @param {String} message _optional_\n\t   * @alias instanceOf\n\t   * @api public\n\t   */\n\t\n\t  function assertInstanceOf (constructor, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var name = _.getName(constructor);\n\t    this.assert(\n\t        flag(this, 'object') instanceof constructor\n\t      , 'expected #{this} to be an instance of ' + name\n\t      , 'expected #{this} to not be an instance of ' + name\n\t    );\n\t  };\n\t\n\t  Assertion.addMethod('instanceof', assertInstanceOf);\n\t  Assertion.addMethod('instanceOf', assertInstanceOf);\n\t\n\t  /**\n\t   * ### .property(name, [value])\n\t   *\n\t   * Asserts that the target has a property `name`, optionally asserting that\n\t   * the value of that property is strictly equal to  `value`.\n\t   * If the `deep` flag is set, you can use dot- and bracket-notation for deep\n\t   * references into objects and arrays.\n\t   *\n\t   *     // simple referencing\n\t   *     var obj = { foo: 'bar' };\n\t   *     expect(obj).to.have.property('foo');\n\t   *     expect(obj).to.have.property('foo', 'bar');\n\t   *\n\t   *     // deep referencing\n\t   *     var deepObj = {\n\t   *         green: { tea: 'matcha' }\n\t   *       , teas: [ 'chai', 'matcha', { tea: 'konacha' } ]\n\t   *     };\n\t\n\t   *     expect(deepObj).to.have.deep.property('green.tea', 'matcha');\n\t   *     expect(deepObj).to.have.deep.property('teas[1]', 'matcha');\n\t   *     expect(deepObj).to.have.deep.property('teas[2].tea', 'konacha');\n\t   *\n\t   * You can also use an array as the starting point of a `deep.property`\n\t   * assertion, or traverse nested arrays.\n\t   *\n\t   *     var arr = [\n\t   *         [ 'chai', 'matcha', 'konacha' ]\n\t   *       , [ { tea: 'chai' }\n\t   *         , { tea: 'matcha' }\n\t   *         , { tea: 'konacha' } ]\n\t   *     ];\n\t   *\n\t   *     expect(arr).to.have.deep.property('[0][1]', 'matcha');\n\t   *     expect(arr).to.have.deep.property('[1][2].tea', 'konacha');\n\t   *\n\t   * Furthermore, `property` changes the subject of the assertion\n\t   * to be the value of that property from the original object. This\n\t   * permits for further chainable assertions on that property.\n\t   *\n\t   *     expect(obj).to.have.property('foo')\n\t   *       .that.is.a('string');\n\t   *     expect(deepObj).to.have.property('green')\n\t   *       .that.is.an('object')\n\t   *       .that.deep.equals({ tea: 'matcha' });\n\t   *     expect(deepObj).to.have.property('teas')\n\t   *       .that.is.an('array')\n\t   *       .with.deep.property('[2]')\n\t   *         .that.deep.equals({ tea: 'konacha' });\n\t   *\n\t   * @name property\n\t   * @alias deep.property\n\t   * @param {String} name\n\t   * @param {Mixed} value (optional)\n\t   * @param {String} message _optional_\n\t   * @returns value of property for chaining\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addMethod('property', function (name, val, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t\n\t    var descriptor = flag(this, 'deep') ? 'deep property ' : 'property '\n\t      , negate = flag(this, 'negate')\n\t      , obj = flag(this, 'object')\n\t      , value = flag(this, 'deep')\n\t        ? _.getPathValue(name, obj)\n\t        : obj[name];\n\t\n\t    if (negate && undefined !== val) {\n\t      if (undefined === value) {\n\t        msg = (msg != null) ? msg + ': ' : '';\n\t        throw new Error(msg + _.inspect(obj) + ' has no ' + descriptor + _.inspect(name));\n\t      }\n\t    } else {\n\t      this.assert(\n\t          undefined !== value\n\t        , 'expected #{this} to have a ' + descriptor + _.inspect(name)\n\t        , 'expected #{this} to not have ' + descriptor + _.inspect(name));\n\t    }\n\t\n\t    if (undefined !== val) {\n\t      this.assert(\n\t          val === value\n\t        , 'expected #{this} to have a ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'\n\t        , 'expected #{this} to not have a ' + descriptor + _.inspect(name) + ' of #{act}'\n\t        , val\n\t        , value\n\t      );\n\t    }\n\t\n\t    flag(this, 'object', value);\n\t  });\n\t\n\t\n\t  /**\n\t   * ### .ownProperty(name)\n\t   *\n\t   * Asserts that the target has an own property `name`.\n\t   *\n\t   *     expect('test').to.have.ownProperty('length');\n\t   *\n\t   * @name ownProperty\n\t   * @alias haveOwnProperty\n\t   * @param {String} name\n\t   * @param {String} message _optional_\n\t   * @api public\n\t   */\n\t\n\t  function assertOwnProperty (name, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var obj = flag(this, 'object');\n\t    this.assert(\n\t        obj.hasOwnProperty(name)\n\t      , 'expected #{this} to have own property ' + _.inspect(name)\n\t      , 'expected #{this} to not have own property ' + _.inspect(name)\n\t    );\n\t  }\n\t\n\t  Assertion.addMethod('ownProperty', assertOwnProperty);\n\t  Assertion.addMethod('haveOwnProperty', assertOwnProperty);\n\t\n\t  /**\n\t   * ### .length(value)\n\t   *\n\t   * Asserts that the target's `length` property has\n\t   * the expected value.\n\t   *\n\t   *     expect([ 1, 2, 3]).to.have.length(3);\n\t   *     expect('foobar').to.have.length(6);\n\t   *\n\t   * Can also be used as a chain precursor to a value\n\t   * comparison for the length property.\n\t   *\n\t   *     expect('foo').to.have.length.above(2);\n\t   *     expect([ 1, 2, 3 ]).to.have.length.above(2);\n\t   *     expect('foo').to.have.length.below(4);\n\t   *     expect([ 1, 2, 3 ]).to.have.length.below(4);\n\t   *     expect('foo').to.have.length.within(2,4);\n\t   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);\n\t   *\n\t   * @name length\n\t   * @alias lengthOf\n\t   * @param {Number} length\n\t   * @param {String} message _optional_\n\t   * @api public\n\t   */\n\t\n\t  function assertLengthChain () {\n\t    flag(this, 'doLength', true);\n\t  }\n\t\n\t  function assertLength (n, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var obj = flag(this, 'object');\n\t    new Assertion(obj, msg).to.have.property('length');\n\t    var len = obj.length;\n\t\n\t    this.assert(\n\t        len == n\n\t      , 'expected #{this} to have a length of #{exp} but got #{act}'\n\t      , 'expected #{this} to not have a length of #{act}'\n\t      , n\n\t      , len\n\t    );\n\t  }\n\t\n\t  Assertion.addChainableMethod('length', assertLength, assertLengthChain);\n\t  Assertion.addMethod('lengthOf', assertLength);\n\t\n\t  /**\n\t   * ### .match(regexp)\n\t   *\n\t   * Asserts that the target matches a regular expression.\n\t   *\n\t   *     expect('foobar').to.match(/^foo/);\n\t   *\n\t   * @name match\n\t   * @param {RegExp} RegularExpression\n\t   * @param {String} message _optional_\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addMethod('match', function (re, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var obj = flag(this, 'object');\n\t    this.assert(\n\t        re.exec(obj)\n\t      , 'expected #{this} to match ' + re\n\t      , 'expected #{this} not to match ' + re\n\t    );\n\t  });\n\t\n\t  /**\n\t   * ### .string(string)\n\t   *\n\t   * Asserts that the string target contains another string.\n\t   *\n\t   *     expect('foobar').to.have.string('bar');\n\t   *\n\t   * @name string\n\t   * @param {String} string\n\t   * @param {String} message _optional_\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addMethod('string', function (str, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var obj = flag(this, 'object');\n\t    new Assertion(obj, msg).is.a('string');\n\t\n\t    this.assert(\n\t        ~obj.indexOf(str)\n\t      , 'expected #{this} to contain ' + _.inspect(str)\n\t      , 'expected #{this} to not contain ' + _.inspect(str)\n\t    );\n\t  });\n\t\n\t\n\t  /**\n\t   * ### .keys(key1, [key2], [...])\n\t   *\n\t   * Asserts that the target has exactly the given keys, or\n\t   * asserts the inclusion of some keys when using the\n\t   * `include` or `contain` modifiers.\n\t   *\n\t   *     expect({ foo: 1, bar: 2 }).to.have.keys(['foo', 'bar']);\n\t   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.keys('foo', 'bar');\n\t   *\n\t   * @name keys\n\t   * @alias key\n\t   * @param {String...|Array} keys\n\t   * @api public\n\t   */\n\t\n\t  function assertKeys (keys) {\n\t    var obj = flag(this, 'object')\n\t      , str\n\t      , ok = true;\n\t\n\t    keys = keys instanceof Array\n\t      ? keys\n\t      : Array.prototype.slice.call(arguments);\n\t\n\t    if (!keys.length) throw new Error('keys required');\n\t\n\t    var actual = Object.keys(obj)\n\t      , expected = keys\n\t      , len = keys.length;\n\t\n\t    // Inclusion\n\t    ok = keys.every(function(key){\n\t      return ~actual.indexOf(key);\n\t    });\n\t\n\t    // Strict\n\t    if (!flag(this, 'negate') && !flag(this, 'contains')) {\n\t      ok = ok && keys.length == actual.length;\n\t    }\n\t\n\t    // Key string\n\t    if (len > 1) {\n\t      keys = keys.map(function(key){\n\t        return _.inspect(key);\n\t      });\n\t      var last = keys.pop();\n\t      str = keys.join(', ') + ', and ' + last;\n\t    } else {\n\t      str = _.inspect(keys[0]);\n\t    }\n\t\n\t    // Form\n\t    str = (len > 1 ? 'keys ' : 'key ') + str;\n\t\n\t    // Have / include\n\t    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;\n\t\n\t    // Assertion\n\t    this.assert(\n\t        ok\n\t      , 'expected #{this} to ' + str\n\t      , 'expected #{this} to not ' + str\n\t      , expected.sort()\n\t      , actual.sort()\n\t      , true\n\t    );\n\t  }\n\t\n\t  Assertion.addMethod('keys', assertKeys);\n\t  Assertion.addMethod('key', assertKeys);\n\t\n\t  /**\n\t   * ### .throw(constructor)\n\t   *\n\t   * Asserts that the function target will throw a specific error, or specific type of error\n\t   * (as determined using `instanceof`), optionally with a RegExp or string inclusion test\n\t   * for the error's message.\n\t   *\n\t   *     var err = new ReferenceError('This is a bad function.');\n\t   *     var fn = function () { throw err; }\n\t   *     expect(fn).to.throw(ReferenceError);\n\t   *     expect(fn).to.throw(Error);\n\t   *     expect(fn).to.throw(/bad function/);\n\t   *     expect(fn).to.not.throw('good function');\n\t   *     expect(fn).to.throw(ReferenceError, /bad function/);\n\t   *     expect(fn).to.throw(err);\n\t   *     expect(fn).to.not.throw(new RangeError('Out of range.'));\n\t   *\n\t   * Please note that when a throw expectation is negated, it will check each\n\t   * parameter independently, starting with error constructor type. The appropriate way\n\t   * to check for the existence of a type of error but for a message that does not match\n\t   * is to use `and`.\n\t   *\n\t   *     expect(fn).to.throw(ReferenceError)\n\t   *        .and.not.throw(/good function/);\n\t   *\n\t   * @name throw\n\t   * @alias throws\n\t   * @alias Throw\n\t   * @param {ErrorConstructor} constructor\n\t   * @param {String|RegExp} expected error message\n\t   * @param {String} message _optional_\n\t   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n\t   * @returns error for chaining (null if no error)\n\t   * @api public\n\t   */\n\t\n\t  function assertThrows (constructor, errMsg, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var obj = flag(this, 'object');\n\t    new Assertion(obj, msg).is.a('function');\n\t\n\t    var thrown = false\n\t      , desiredError = null\n\t      , name = null\n\t      , thrownError = null;\n\t\n\t    if (arguments.length === 0) {\n\t      errMsg = null;\n\t      constructor = null;\n\t    } else if (constructor && (constructor instanceof RegExp || 'string' === typeof constructor)) {\n\t      errMsg = constructor;\n\t      constructor = null;\n\t    } else if (constructor && constructor instanceof Error) {\n\t      desiredError = constructor;\n\t      constructor = null;\n\t      errMsg = null;\n\t    } else if (typeof constructor === 'function') {\n\t      name = constructor.prototype.name || constructor.name;\n\t      if (name === 'Error' && constructor !== Error) {\n\t        name = (new constructor()).name;\n\t      }\n\t    } else {\n\t      constructor = null;\n\t    }\n\t\n\t    try {\n\t      obj();\n\t    } catch (err) {\n\t      // first, check desired error\n\t      if (desiredError) {\n\t        this.assert(\n\t            err === desiredError\n\t          , 'expected #{this} to throw #{exp} but #{act} was thrown'\n\t          , 'expected #{this} to not throw #{exp}'\n\t          , (desiredError instanceof Error ? desiredError.toString() : desiredError)\n\t          , (err instanceof Error ? err.toString() : err)\n\t        );\n\t\n\t        flag(this, 'object', err);\n\t        return this;\n\t      }\n\t\n\t      // next, check constructor\n\t      if (constructor) {\n\t        this.assert(\n\t            err instanceof constructor\n\t          , 'expected #{this} to throw #{exp} but #{act} was thrown'\n\t          , 'expected #{this} to not throw #{exp} but #{act} was thrown'\n\t          , name\n\t          , (err instanceof Error ? err.toString() : err)\n\t        );\n\t\n\t        if (!errMsg) {\n\t          flag(this, 'object', err);\n\t          return this;\n\t        }\n\t      }\n\t\n\t      // next, check message\n\t      var message = 'object' === _.type(err) && \"message\" in err\n\t        ? err.message\n\t        : '' + err;\n\t\n\t      if ((message != null) && errMsg && errMsg instanceof RegExp) {\n\t        this.assert(\n\t            errMsg.exec(message)\n\t          , 'expected #{this} to throw error matching #{exp} but got #{act}'\n\t          , 'expected #{this} to throw error not matching #{exp}'\n\t          , errMsg\n\t          , message\n\t        );\n\t\n\t        flag(this, 'object', err);\n\t        return this;\n\t      } else if ((message != null) && errMsg && 'string' === typeof errMsg) {\n\t        this.assert(\n\t            ~message.indexOf(errMsg)\n\t          , 'expected #{this} to throw error including #{exp} but got #{act}'\n\t          , 'expected #{this} to throw error not including #{act}'\n\t          , errMsg\n\t          , message\n\t        );\n\t\n\t        flag(this, 'object', err);\n\t        return this;\n\t      } else {\n\t        thrown = true;\n\t        thrownError = err;\n\t      }\n\t    }\n\t\n\t    var actuallyGot = ''\n\t      , expectedThrown = name !== null\n\t        ? name\n\t        : desiredError\n\t          ? '#{exp}' //_.inspect(desiredError)\n\t          : 'an error';\n\t\n\t    if (thrown) {\n\t      actuallyGot = ' but #{act} was thrown'\n\t    }\n\t\n\t    this.assert(\n\t        thrown === true\n\t      , 'expected #{this} to throw ' + expectedThrown + actuallyGot\n\t      , 'expected #{this} to not throw ' + expectedThrown + actuallyGot\n\t      , (desiredError instanceof Error ? desiredError.toString() : desiredError)\n\t      , (thrownError instanceof Error ? thrownError.toString() : thrownError)\n\t    );\n\t\n\t    flag(this, 'object', thrownError);\n\t  };\n\t\n\t  Assertion.addMethod('throw', assertThrows);\n\t  Assertion.addMethod('throws', assertThrows);\n\t  Assertion.addMethod('Throw', assertThrows);\n\t\n\t  /**\n\t   * ### .respondTo(method)\n\t   *\n\t   * Asserts that the object or class target will respond to a method.\n\t   *\n\t   *     Klass.prototype.bar = function(){};\n\t   *     expect(Klass).to.respondTo('bar');\n\t   *     expect(obj).to.respondTo('bar');\n\t   *\n\t   * To check if a constructor will respond to a static function,\n\t   * set the `itself` flag.\n\t   *\n\t   *     Klass.baz = function(){};\n\t   *     expect(Klass).itself.to.respondTo('baz');\n\t   *\n\t   * @name respondTo\n\t   * @param {String} method\n\t   * @param {String} message _optional_\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addMethod('respondTo', function (method, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var obj = flag(this, 'object')\n\t      , itself = flag(this, 'itself')\n\t      , context = ('function' === _.type(obj) && !itself)\n\t        ? obj.prototype[method]\n\t        : obj[method];\n\t\n\t    this.assert(\n\t        'function' === typeof context\n\t      , 'expected #{this} to respond to ' + _.inspect(method)\n\t      , 'expected #{this} to not respond to ' + _.inspect(method)\n\t    );\n\t  });\n\t\n\t  /**\n\t   * ### .itself\n\t   *\n\t   * Sets the `itself` flag, later used by the `respondTo` assertion.\n\t   *\n\t   *     function Foo() {}\n\t   *     Foo.bar = function() {}\n\t   *     Foo.prototype.baz = function() {}\n\t   *\n\t   *     expect(Foo).itself.to.respondTo('bar');\n\t   *     expect(Foo).itself.not.to.respondTo('baz');\n\t   *\n\t   * @name itself\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addProperty('itself', function () {\n\t    flag(this, 'itself', true);\n\t  });\n\t\n\t  /**\n\t   * ### .satisfy(method)\n\t   *\n\t   * Asserts that the target passes a given truth test.\n\t   *\n\t   *     expect(1).to.satisfy(function(num) { return num > 0; });\n\t   *\n\t   * @name satisfy\n\t   * @param {Function} matcher\n\t   * @param {String} message _optional_\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addMethod('satisfy', function (matcher, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var obj = flag(this, 'object');\n\t    var result = matcher(obj);\n\t    this.assert(\n\t        result\n\t      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)\n\t      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)\n\t      , this.negate ? false : true\n\t      , result\n\t    );\n\t  });\n\t\n\t  /**\n\t   * ### .closeTo(expected, delta)\n\t   *\n\t   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n\t   *\n\t   *     expect(1.5).to.be.closeTo(1, 0.5);\n\t   *\n\t   * @name closeTo\n\t   * @param {Number} expected\n\t   * @param {Number} delta\n\t   * @param {String} message _optional_\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addMethod('closeTo', function (expected, delta, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var obj = flag(this, 'object');\n\t\n\t    new Assertion(obj, msg).is.a('number');\n\t    if (_.type(expected) !== 'number' || _.type(delta) !== 'number') {\n\t      throw new Error('the arguments to closeTo must be numbers');\n\t    }\n\t\n\t    this.assert(\n\t        Math.abs(obj - expected) <= delta\n\t      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta\n\t      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta\n\t    );\n\t  });\n\t\n\t  function isSubsetOf(subset, superset, cmp) {\n\t    return subset.every(function(elem) {\n\t      if (!cmp) return superset.indexOf(elem) !== -1;\n\t\n\t      return superset.some(function(elem2) {\n\t        return cmp(elem, elem2);\n\t      });\n\t    })\n\t  }\n\t\n\t  /**\n\t   * ### .members(set)\n\t   *\n\t   * Asserts that the target is a superset of `set`,\n\t   * or that the target and `set` have the same strictly-equal (===) members.\n\t   * Alternately, if the `deep` flag is set, set members are compared for deep\n\t   * equality.\n\t   *\n\t   *     expect([1, 2, 3]).to.include.members([3, 2]);\n\t   *     expect([1, 2, 3]).to.not.include.members([3, 2, 8]);\n\t   *\n\t   *     expect([4, 2]).to.have.members([2, 4]);\n\t   *     expect([5, 2]).to.not.have.members([5, 2, 1]);\n\t   *\n\t   *     expect([{ id: 1 }]).to.deep.include.members([{ id: 1 }]);\n\t   *\n\t   * @name members\n\t   * @param {Array} set\n\t   * @param {String} message _optional_\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addMethod('members', function (subset, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var obj = flag(this, 'object');\n\t\n\t    new Assertion(obj).to.be.an('array');\n\t    new Assertion(subset).to.be.an('array');\n\t\n\t    var cmp = flag(this, 'deep') ? _.eql : undefined;\n\t\n\t    if (flag(this, 'contains')) {\n\t      return this.assert(\n\t          isSubsetOf(subset, obj, cmp)\n\t        , 'expected #{this} to be a superset of #{act}'\n\t        , 'expected #{this} to not be a superset of #{act}'\n\t        , obj\n\t        , subset\n\t      );\n\t    }\n\t\n\t    this.assert(\n\t        isSubsetOf(obj, subset, cmp) && isSubsetOf(subset, obj, cmp)\n\t        , 'expected #{this} to have the same members as #{act}'\n\t        , 'expected #{this} to not have the same members as #{act}'\n\t        , obj\n\t        , subset\n\t    );\n\t  });\n\t};\n\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports) {\n\n\t/*!\n\t * chai\n\t * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t\n\tmodule.exports = function (chai, util) {\n\t\n\t  /*!\n\t   * Chai dependencies.\n\t   */\n\t\n\t  var Assertion = chai.Assertion\n\t    , flag = util.flag;\n\t\n\t  /*!\n\t   * Module export.\n\t   */\n\t\n\t  /**\n\t   * ### assert(expression, message)\n\t   *\n\t   * Write your own test expressions.\n\t   *\n\t   *     assert('foo' !== 'bar', 'foo is not bar');\n\t   *     assert(Array.isArray([]), 'empty arrays are arrays');\n\t   *\n\t   * @param {Mixed} expression to test for truthiness\n\t   * @param {String} message to display on error\n\t   * @name assert\n\t   * @api public\n\t   */\n\t\n\t  var assert = chai.assert = function (express, errmsg) {\n\t    var test = new Assertion(null, null, chai.assert);\n\t    test.assert(\n\t        express\n\t      , errmsg\n\t      , '[ negation message unavailable ]'\n\t    );\n\t  };\n\t\n\t  /**\n\t   * ### .fail(actual, expected, [message], [operator])\n\t   *\n\t   * Throw a failure. Node.js `assert` module-compatible.\n\t   *\n\t   * @name fail\n\t   * @param {Mixed} actual\n\t   * @param {Mixed} expected\n\t   * @param {String} message\n\t   * @param {String} operator\n\t   * @api public\n\t   */\n\t\n\t  assert.fail = function (actual, expected, message, operator) {\n\t    message = message || 'assert.fail()';\n\t    throw new chai.AssertionError(message, {\n\t        actual: actual\n\t      , expected: expected\n\t      , operator: operator\n\t    }, assert.fail);\n\t  };\n\t\n\t  /**\n\t   * ### .ok(object, [message])\n\t   *\n\t   * Asserts that `object` is truthy.\n\t   *\n\t   *     assert.ok('everything', 'everything is ok');\n\t   *     assert.ok(false, 'this will fail');\n\t   *\n\t   * @name ok\n\t   * @param {Mixed} object to test\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.ok = function (val, msg) {\n\t    new Assertion(val, msg).is.ok;\n\t  };\n\t\n\t  /**\n\t   * ### .notOk(object, [message])\n\t   *\n\t   * Asserts that `object` is falsy.\n\t   *\n\t   *     assert.notOk('everything', 'this will fail');\n\t   *     assert.notOk(false, 'this will pass');\n\t   *\n\t   * @name notOk\n\t   * @param {Mixed} object to test\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.notOk = function (val, msg) {\n\t    new Assertion(val, msg).is.not.ok;\n\t  };\n\t\n\t  /**\n\t   * ### .equal(actual, expected, [message])\n\t   *\n\t   * Asserts non-strict equality (`==`) of `actual` and `expected`.\n\t   *\n\t   *     assert.equal(3, '3', '== coerces values to strings');\n\t   *\n\t   * @name equal\n\t   * @param {Mixed} actual\n\t   * @param {Mixed} expected\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.equal = function (act, exp, msg) {\n\t    var test = new Assertion(act, msg, assert.equal);\n\t\n\t    test.assert(\n\t        exp == flag(test, 'object')\n\t      , 'expected #{this} to equal #{exp}'\n\t      , 'expected #{this} to not equal #{act}'\n\t      , exp\n\t      , act\n\t    );\n\t  };\n\t\n\t  /**\n\t   * ### .notEqual(actual, expected, [message])\n\t   *\n\t   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n\t   *\n\t   *     assert.notEqual(3, 4, 'these numbers are not equal');\n\t   *\n\t   * @name notEqual\n\t   * @param {Mixed} actual\n\t   * @param {Mixed} expected\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.notEqual = function (act, exp, msg) {\n\t    var test = new Assertion(act, msg, assert.notEqual);\n\t\n\t    test.assert(\n\t        exp != flag(test, 'object')\n\t      , 'expected #{this} to not equal #{exp}'\n\t      , 'expected #{this} to equal #{act}'\n\t      , exp\n\t      , act\n\t    );\n\t  };\n\t\n\t  /**\n\t   * ### .strictEqual(actual, expected, [message])\n\t   *\n\t   * Asserts strict equality (`===`) of `actual` and `expected`.\n\t   *\n\t   *     assert.strictEqual(true, true, 'these booleans are strictly equal');\n\t   *\n\t   * @name strictEqual\n\t   * @param {Mixed} actual\n\t   * @param {Mixed} expected\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.strictEqual = function (act, exp, msg) {\n\t    new Assertion(act, msg).to.equal(exp);\n\t  };\n\t\n\t  /**\n\t   * ### .notStrictEqual(actual, expected, [message])\n\t   *\n\t   * Asserts strict inequality (`!==`) of `actual` and `expected`.\n\t   *\n\t   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');\n\t   *\n\t   * @name notStrictEqual\n\t   * @param {Mixed} actual\n\t   * @param {Mixed} expected\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.notStrictEqual = function (act, exp, msg) {\n\t    new Assertion(act, msg).to.not.equal(exp);\n\t  };\n\t\n\t  /**\n\t   * ### .deepEqual(actual, expected, [message])\n\t   *\n\t   * Asserts that `actual` is deeply equal to `expected`.\n\t   *\n\t   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });\n\t   *\n\t   * @name deepEqual\n\t   * @param {Mixed} actual\n\t   * @param {Mixed} expected\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.deepEqual = function (act, exp, msg) {\n\t    new Assertion(act, msg).to.eql(exp);\n\t  };\n\t\n\t  /**\n\t   * ### .notDeepEqual(actual, expected, [message])\n\t   *\n\t   * Assert that `actual` is not deeply equal to `expected`.\n\t   *\n\t   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });\n\t   *\n\t   * @name notDeepEqual\n\t   * @param {Mixed} actual\n\t   * @param {Mixed} expected\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.notDeepEqual = function (act, exp, msg) {\n\t    new Assertion(act, msg).to.not.eql(exp);\n\t  };\n\t\n\t  /**\n\t   * ### .isTrue(value, [message])\n\t   *\n\t   * Asserts that `value` is true.\n\t   *\n\t   *     var teaServed = true;\n\t   *     assert.isTrue(teaServed, 'the tea has been served');\n\t   *\n\t   * @name isTrue\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.isTrue = function (val, msg) {\n\t    new Assertion(val, msg).is['true'];\n\t  };\n\t\n\t  /**\n\t   * ### .isFalse(value, [message])\n\t   *\n\t   * Asserts that `value` is false.\n\t   *\n\t   *     var teaServed = false;\n\t   *     assert.isFalse(teaServed, 'no tea yet? hmm...');\n\t   *\n\t   * @name isFalse\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.isFalse = function (val, msg) {\n\t    new Assertion(val, msg).is['false'];\n\t  };\n\t\n\t  /**\n\t   * ### .isNull(value, [message])\n\t   *\n\t   * Asserts that `value` is null.\n\t   *\n\t   *     assert.isNull(err, 'there was no error');\n\t   *\n\t   * @name isNull\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.isNull = function (val, msg) {\n\t    new Assertion(val, msg).to.equal(null);\n\t  };\n\t\n\t  /**\n\t   * ### .isNotNull(value, [message])\n\t   *\n\t   * Asserts that `value` is not null.\n\t   *\n\t   *     var tea = 'tasty chai';\n\t   *     assert.isNotNull(tea, 'great, time for tea!');\n\t   *\n\t   * @name isNotNull\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.isNotNull = function (val, msg) {\n\t    new Assertion(val, msg).to.not.equal(null);\n\t  };\n\t\n\t  /**\n\t   * ### .isUndefined(value, [message])\n\t   *\n\t   * Asserts that `value` is `undefined`.\n\t   *\n\t   *     var tea;\n\t   *     assert.isUndefined(tea, 'no tea defined');\n\t   *\n\t   * @name isUndefined\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.isUndefined = function (val, msg) {\n\t    new Assertion(val, msg).to.equal(undefined);\n\t  };\n\t\n\t  /**\n\t   * ### .isDefined(value, [message])\n\t   *\n\t   * Asserts that `value` is not `undefined`.\n\t   *\n\t   *     var tea = 'cup of chai';\n\t   *     assert.isDefined(tea, 'tea has been defined');\n\t   *\n\t   * @name isDefined\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.isDefined = function (val, msg) {\n\t    new Assertion(val, msg).to.not.equal(undefined);\n\t  };\n\t\n\t  /**\n\t   * ### .isFunction(value, [message])\n\t   *\n\t   * Asserts that `value` is a function.\n\t   *\n\t   *     function serveTea() { return 'cup of tea'; };\n\t   *     assert.isFunction(serveTea, 'great, we can have tea now');\n\t   *\n\t   * @name isFunction\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.isFunction = function (val, msg) {\n\t    new Assertion(val, msg).to.be.a('function');\n\t  };\n\t\n\t  /**\n\t   * ### .isNotFunction(value, [message])\n\t   *\n\t   * Asserts that `value` is _not_ a function.\n\t   *\n\t   *     var serveTea = [ 'heat', 'pour', 'sip' ];\n\t   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');\n\t   *\n\t   * @name isNotFunction\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.isNotFunction = function (val, msg) {\n\t    new Assertion(val, msg).to.not.be.a('function');\n\t  };\n\t\n\t  /**\n\t   * ### .isObject(value, [message])\n\t   *\n\t   * Asserts that `value` is an object (as revealed by\n\t   * `Object.prototype.toString`).\n\t   *\n\t   *     var selection = { name: 'Chai', serve: 'with spices' };\n\t   *     assert.isObject(selection, 'tea selection is an object');\n\t   *\n\t   * @name isObject\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.isObject = function (val, msg) {\n\t    new Assertion(val, msg).to.be.a('object');\n\t  };\n\t\n\t  /**\n\t   * ### .isNotObject(value, [message])\n\t   *\n\t   * Asserts that `value` is _not_ an object.\n\t   *\n\t   *     var selection = 'chai'\n\t   *     assert.isNotObject(selection, 'tea selection is not an object');\n\t   *     assert.isNotObject(null, 'null is not an object');\n\t   *\n\t   * @name isNotObject\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.isNotObject = function (val, msg) {\n\t    new Assertion(val, msg).to.not.be.a('object');\n\t  };\n\t\n\t  /**\n\t   * ### .isArray(value, [message])\n\t   *\n\t   * Asserts that `value` is an array.\n\t   *\n\t   *     var menu = [ 'green', 'chai', 'oolong' ];\n\t   *     assert.isArray(menu, 'what kind of tea do we want?');\n\t   *\n\t   * @name isArray\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.isArray = function (val, msg) {\n\t    new Assertion(val, msg).to.be.an('array');\n\t  };\n\t\n\t  /**\n\t   * ### .isNotArray(value, [message])\n\t   *\n\t   * Asserts that `value` is _not_ an array.\n\t   *\n\t   *     var menu = 'green|chai|oolong';\n\t   *     assert.isNotArray(menu, 'what kind of tea do we want?');\n\t   *\n\t   * @name isNotArray\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.isNotArray = function (val, msg) {\n\t    new Assertion(val, msg).to.not.be.an('array');\n\t  };\n\t\n\t  /**\n\t   * ### .isString(value, [message])\n\t   *\n\t   * Asserts that `value` is a string.\n\t   *\n\t   *     var teaOrder = 'chai';\n\t   *     assert.isString(teaOrder, 'order placed');\n\t   *\n\t   * @name isString\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.isString = function (val, msg) {\n\t    new Assertion(val, msg).to.be.a('string');\n\t  };\n\t\n\t  /**\n\t   * ### .isNotString(value, [message])\n\t   *\n\t   * Asserts that `value` is _not_ a string.\n\t   *\n\t   *     var teaOrder = 4;\n\t   *     assert.isNotString(teaOrder, 'order placed');\n\t   *\n\t   * @name isNotString\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.isNotString = function (val, msg) {\n\t    new Assertion(val, msg).to.not.be.a('string');\n\t  };\n\t\n\t  /**\n\t   * ### .isNumber(value, [message])\n\t   *\n\t   * Asserts that `value` is a number.\n\t   *\n\t   *     var cups = 2;\n\t   *     assert.isNumber(cups, 'how many cups');\n\t   *\n\t   * @name isNumber\n\t   * @param {Number} value\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.isNumber = function (val, msg) {\n\t    new Assertion(val, msg).to.be.a('number');\n\t  };\n\t\n\t  /**\n\t   * ### .isNotNumber(value, [message])\n\t   *\n\t   * Asserts that `value` is _not_ a number.\n\t   *\n\t   *     var cups = '2 cups please';\n\t   *     assert.isNotNumber(cups, 'how many cups');\n\t   *\n\t   * @name isNotNumber\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.isNotNumber = function (val, msg) {\n\t    new Assertion(val, msg).to.not.be.a('number');\n\t  };\n\t\n\t  /**\n\t   * ### .isBoolean(value, [message])\n\t   *\n\t   * Asserts that `value` is a boolean.\n\t   *\n\t   *     var teaReady = true\n\t   *       , teaServed = false;\n\t   *\n\t   *     assert.isBoolean(teaReady, 'is the tea ready');\n\t   *     assert.isBoolean(teaServed, 'has tea been served');\n\t   *\n\t   * @name isBoolean\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.isBoolean = function (val, msg) {\n\t    new Assertion(val, msg).to.be.a('boolean');\n\t  };\n\t\n\t  /**\n\t   * ### .isNotBoolean(value, [message])\n\t   *\n\t   * Asserts that `value` is _not_ a boolean.\n\t   *\n\t   *     var teaReady = 'yep'\n\t   *       , teaServed = 'nope';\n\t   *\n\t   *     assert.isNotBoolean(teaReady, 'is the tea ready');\n\t   *     assert.isNotBoolean(teaServed, 'has tea been served');\n\t   *\n\t   * @name isNotBoolean\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.isNotBoolean = function (val, msg) {\n\t    new Assertion(val, msg).to.not.be.a('boolean');\n\t  };\n\t\n\t  /**\n\t   * ### .typeOf(value, name, [message])\n\t   *\n\t   * Asserts that `value`'s type is `name`, as determined by\n\t   * `Object.prototype.toString`.\n\t   *\n\t   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n\t   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n\t   *     assert.typeOf('tea', 'string', 'we have a string');\n\t   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n\t   *     assert.typeOf(null, 'null', 'we have a null');\n\t   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');\n\t   *\n\t   * @name typeOf\n\t   * @param {Mixed} value\n\t   * @param {String} name\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.typeOf = function (val, type, msg) {\n\t    new Assertion(val, msg).to.be.a(type);\n\t  };\n\t\n\t  /**\n\t   * ### .notTypeOf(value, name, [message])\n\t   *\n\t   * Asserts that `value`'s type is _not_ `name`, as determined by\n\t   * `Object.prototype.toString`.\n\t   *\n\t   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');\n\t   *\n\t   * @name notTypeOf\n\t   * @param {Mixed} value\n\t   * @param {String} typeof name\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.notTypeOf = function (val, type, msg) {\n\t    new Assertion(val, msg).to.not.be.a(type);\n\t  };\n\t\n\t  /**\n\t   * ### .instanceOf(object, constructor, [message])\n\t   *\n\t   * Asserts that `value` is an instance of `constructor`.\n\t   *\n\t   *     var Tea = function (name) { this.name = name; }\n\t   *       , chai = new Tea('chai');\n\t   *\n\t   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');\n\t   *\n\t   * @name instanceOf\n\t   * @param {Object} object\n\t   * @param {Constructor} constructor\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.instanceOf = function (val, type, msg) {\n\t    new Assertion(val, msg).to.be.instanceOf(type);\n\t  };\n\t\n\t  /**\n\t   * ### .notInstanceOf(object, constructor, [message])\n\t   *\n\t   * Asserts `value` is not an instance of `constructor`.\n\t   *\n\t   *     var Tea = function (name) { this.name = name; }\n\t   *       , chai = new String('chai');\n\t   *\n\t   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');\n\t   *\n\t   * @name notInstanceOf\n\t   * @param {Object} object\n\t   * @param {Constructor} constructor\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.notInstanceOf = function (val, type, msg) {\n\t    new Assertion(val, msg).to.not.be.instanceOf(type);\n\t  };\n\t\n\t  /**\n\t   * ### .include(haystack, needle, [message])\n\t   *\n\t   * Asserts that `haystack` includes `needle`. Works\n\t   * for strings and arrays.\n\t   *\n\t   *     assert.include('foobar', 'bar', 'foobar contains string \"bar\"');\n\t   *     assert.include([ 1, 2, 3 ], 3, 'array contains value');\n\t   *\n\t   * @name include\n\t   * @param {Array|String} haystack\n\t   * @param {Mixed} needle\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.include = function (exp, inc, msg) {\n\t    new Assertion(exp, msg, assert.include).include(inc);\n\t  };\n\t\n\t  /**\n\t   * ### .notInclude(haystack, needle, [message])\n\t   *\n\t   * Asserts that `haystack` does not include `needle`. Works\n\t   * for strings and arrays.\n\t   *i\n\t   *     assert.notInclude('foobar', 'baz', 'string not include substring');\n\t   *     assert.notInclude([ 1, 2, 3 ], 4, 'array not include contain value');\n\t   *\n\t   * @name notInclude\n\t   * @param {Array|String} haystack\n\t   * @param {Mixed} needle\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.notInclude = function (exp, inc, msg) {\n\t    new Assertion(exp, msg, assert.notInclude).not.include(inc);\n\t  };\n\t\n\t  /**\n\t   * ### .match(value, regexp, [message])\n\t   *\n\t   * Asserts that `value` matches the regular expression `regexp`.\n\t   *\n\t   *     assert.match('foobar', /^foo/, 'regexp matches');\n\t   *\n\t   * @name match\n\t   * @param {Mixed} value\n\t   * @param {RegExp} regexp\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.match = function (exp, re, msg) {\n\t    new Assertion(exp, msg).to.match(re);\n\t  };\n\t\n\t  /**\n\t   * ### .notMatch(value, regexp, [message])\n\t   *\n\t   * Asserts that `value` does not match the regular expression `regexp`.\n\t   *\n\t   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');\n\t   *\n\t   * @name notMatch\n\t   * @param {Mixed} value\n\t   * @param {RegExp} regexp\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.notMatch = function (exp, re, msg) {\n\t    new Assertion(exp, msg).to.not.match(re);\n\t  };\n\t\n\t  /**\n\t   * ### .property(object, property, [message])\n\t   *\n\t   * Asserts that `object` has a property named by `property`.\n\t   *\n\t   *     assert.property({ tea: { green: 'matcha' }}, 'tea');\n\t   *\n\t   * @name property\n\t   * @param {Object} object\n\t   * @param {String} property\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.property = function (obj, prop, msg) {\n\t    new Assertion(obj, msg).to.have.property(prop);\n\t  };\n\t\n\t  /**\n\t   * ### .notProperty(object, property, [message])\n\t   *\n\t   * Asserts that `object` does _not_ have a property named by `property`.\n\t   *\n\t   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');\n\t   *\n\t   * @name notProperty\n\t   * @param {Object} object\n\t   * @param {String} property\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.notProperty = function (obj, prop, msg) {\n\t    new Assertion(obj, msg).to.not.have.property(prop);\n\t  };\n\t\n\t  /**\n\t   * ### .deepProperty(object, property, [message])\n\t   *\n\t   * Asserts that `object` has a property named by `property`, which can be a\n\t   * string using dot- and bracket-notation for deep reference.\n\t   *\n\t   *     assert.deepProperty({ tea: { green: 'matcha' }}, 'tea.green');\n\t   *\n\t   * @name deepProperty\n\t   * @param {Object} object\n\t   * @param {String} property\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.deepProperty = function (obj, prop, msg) {\n\t    new Assertion(obj, msg).to.have.deep.property(prop);\n\t  };\n\t\n\t  /**\n\t   * ### .notDeepProperty(object, property, [message])\n\t   *\n\t   * Asserts that `object` does _not_ have a property named by `property`, which\n\t   * can be a string using dot- and bracket-notation for deep reference.\n\t   *\n\t   *     assert.notDeepProperty({ tea: { green: 'matcha' }}, 'tea.oolong');\n\t   *\n\t   * @name notDeepProperty\n\t   * @param {Object} object\n\t   * @param {String} property\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.notDeepProperty = function (obj, prop, msg) {\n\t    new Assertion(obj, msg).to.not.have.deep.property(prop);\n\t  };\n\t\n\t  /**\n\t   * ### .propertyVal(object, property, value, [message])\n\t   *\n\t   * Asserts that `object` has a property named by `property` with value given\n\t   * by `value`.\n\t   *\n\t   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');\n\t   *\n\t   * @name propertyVal\n\t   * @param {Object} object\n\t   * @param {String} property\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.propertyVal = function (obj, prop, val, msg) {\n\t    new Assertion(obj, msg).to.have.property(prop, val);\n\t  };\n\t\n\t  /**\n\t   * ### .propertyNotVal(object, property, value, [message])\n\t   *\n\t   * Asserts that `object` has a property named by `property`, but with a value\n\t   * different from that given by `value`.\n\t   *\n\t   *     assert.propertyNotVal({ tea: 'is good' }, 'tea', 'is bad');\n\t   *\n\t   * @name propertyNotVal\n\t   * @param {Object} object\n\t   * @param {String} property\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.propertyNotVal = function (obj, prop, val, msg) {\n\t    new Assertion(obj, msg).to.not.have.property(prop, val);\n\t  };\n\t\n\t  /**\n\t   * ### .deepPropertyVal(object, property, value, [message])\n\t   *\n\t   * Asserts that `object` has a property named by `property` with value given\n\t   * by `value`. `property` can use dot- and bracket-notation for deep\n\t   * reference.\n\t   *\n\t   *     assert.deepPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');\n\t   *\n\t   * @name deepPropertyVal\n\t   * @param {Object} object\n\t   * @param {String} property\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.deepPropertyVal = function (obj, prop, val, msg) {\n\t    new Assertion(obj, msg).to.have.deep.property(prop, val);\n\t  };\n\t\n\t  /**\n\t   * ### .deepPropertyNotVal(object, property, value, [message])\n\t   *\n\t   * Asserts that `object` has a property named by `property`, but with a value\n\t   * different from that given by `value`. `property` can use dot- and\n\t   * bracket-notation for deep reference.\n\t   *\n\t   *     assert.deepPropertyNotVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');\n\t   *\n\t   * @name deepPropertyNotVal\n\t   * @param {Object} object\n\t   * @param {String} property\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.deepPropertyNotVal = function (obj, prop, val, msg) {\n\t    new Assertion(obj, msg).to.not.have.deep.property(prop, val);\n\t  };\n\t\n\t  /**\n\t   * ### .lengthOf(object, length, [message])\n\t   *\n\t   * Asserts that `object` has a `length` property with the expected value.\n\t   *\n\t   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');\n\t   *     assert.lengthOf('foobar', 5, 'string has length of 6');\n\t   *\n\t   * @name lengthOf\n\t   * @param {Mixed} object\n\t   * @param {Number} length\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.lengthOf = function (exp, len, msg) {\n\t    new Assertion(exp, msg).to.have.length(len);\n\t  };\n\t\n\t  /**\n\t   * ### .throws(function, [constructor/string/regexp], [string/regexp], [message])\n\t   *\n\t   * Asserts that `function` will throw an error that is an instance of\n\t   * `constructor`, or alternately that it will throw an error with message\n\t   * matching `regexp`.\n\t   *\n\t   *     assert.throw(fn, 'function throws a reference error');\n\t   *     assert.throw(fn, /function throws a reference error/);\n\t   *     assert.throw(fn, ReferenceError);\n\t   *     assert.throw(fn, ReferenceError, 'function throws a reference error');\n\t   *     assert.throw(fn, ReferenceError, /function throws a reference error/);\n\t   *\n\t   * @name throws\n\t   * @alias throw\n\t   * @alias Throw\n\t   * @param {Function} function\n\t   * @param {ErrorConstructor} constructor\n\t   * @param {RegExp} regexp\n\t   * @param {String} message\n\t   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n\t   * @api public\n\t   */\n\t\n\t  assert.Throw = function (fn, errt, errs, msg) {\n\t    if ('string' === typeof errt || errt instanceof RegExp) {\n\t      errs = errt;\n\t      errt = null;\n\t    }\n\t\n\t    var assertErr = new Assertion(fn, msg).to.Throw(errt, errs);\n\t    return flag(assertErr, 'object');\n\t  };\n\t\n\t  /**\n\t   * ### .doesNotThrow(function, [constructor/regexp], [message])\n\t   *\n\t   * Asserts that `function` will _not_ throw an error that is an instance of\n\t   * `constructor`, or alternately that it will not throw an error with message\n\t   * matching `regexp`.\n\t   *\n\t   *     assert.doesNotThrow(fn, Error, 'function does not throw');\n\t   *\n\t   * @name doesNotThrow\n\t   * @param {Function} function\n\t   * @param {ErrorConstructor} constructor\n\t   * @param {RegExp} regexp\n\t   * @param {String} message\n\t   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n\t   * @api public\n\t   */\n\t\n\t  assert.doesNotThrow = function (fn, type, msg) {\n\t    if ('string' === typeof type) {\n\t      msg = type;\n\t      type = null;\n\t    }\n\t\n\t    new Assertion(fn, msg).to.not.Throw(type);\n\t  };\n\t\n\t  /**\n\t   * ### .operator(val1, operator, val2, [message])\n\t   *\n\t   * Compares two values using `operator`.\n\t   *\n\t   *     assert.operator(1, '<', 2, 'everything is ok');\n\t   *     assert.operator(1, '>', 2, 'this will fail');\n\t   *\n\t   * @name operator\n\t   * @param {Mixed} val1\n\t   * @param {String} operator\n\t   * @param {Mixed} val2\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.operator = function (val, operator, val2, msg) {\n\t    if (!~['==', '===', '>', '>=', '<', '<=', '!=', '!=='].indexOf(operator)) {\n\t      throw new Error('Invalid operator \"' + operator + '\"');\n\t    }\n\t    var test = new Assertion(eval(val + operator + val2), msg);\n\t    test.assert(\n\t        true === flag(test, 'object')\n\t      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)\n\t      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );\n\t  };\n\t\n\t  /**\n\t   * ### .closeTo(actual, expected, delta, [message])\n\t   *\n\t   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n\t   *\n\t   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');\n\t   *\n\t   * @name closeTo\n\t   * @param {Number} actual\n\t   * @param {Number} expected\n\t   * @param {Number} delta\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.closeTo = function (act, exp, delta, msg) {\n\t    new Assertion(act, msg).to.be.closeTo(exp, delta);\n\t  };\n\t\n\t  /**\n\t   * ### .sameMembers(set1, set2, [message])\n\t   *\n\t   * Asserts that `set1` and `set2` have the same members.\n\t   * Order is not taken into account.\n\t   *\n\t   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');\n\t   *\n\t   * @name sameMembers\n\t   * @param {Array} set1\n\t   * @param {Array} set2\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.sameMembers = function (set1, set2, msg) {\n\t    new Assertion(set1, msg).to.have.same.members(set2);\n\t  }\n\t\n\t  /**\n\t   * ### .includeMembers(superset, subset, [message])\n\t   *\n\t   * Asserts that `subset` is included in `superset`.\n\t   * Order is not taken into account.\n\t   *\n\t   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1 ], 'include members');\n\t   *\n\t   * @name includeMembers\n\t   * @param {Array} superset\n\t   * @param {Array} subset\n\t   * @param {String} message\n\t   * @api public\n\t   */\n\t\n\t  assert.includeMembers = function (superset, subset, msg) {\n\t    new Assertion(superset, msg).to.include.members(subset);\n\t  }\n\t\n\t  /*!\n\t   * Undocumented / untested\n\t   */\n\t\n\t  assert.ifError = function (val, msg) {\n\t    new Assertion(val, msg).to.not.be.ok;\n\t  };\n\t\n\t  /*!\n\t   * Aliases.\n\t   */\n\t\n\t  (function alias(name, as){\n\t    assert[as] = assert[name];\n\t    return alias;\n\t  })\n\t  ('Throw', 'throw')\n\t  ('Throw', 'throws');\n\t};\n\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports) {\n\n\t/*!\n\t * chai\n\t * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\tmodule.exports = function (chai, util) {\n\t  chai.expect = function (val, message) {\n\t    return new chai.Assertion(val, message);\n\t  };\n\t};\n\t\n\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports) {\n\n\t/*!\n\t * chai\n\t * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\tmodule.exports = function (chai, util) {\n\t  var Assertion = chai.Assertion;\n\t\n\t  function loadShould () {\n\t    // explicitly define this method as function as to have it's name to include as `ssfi`\n\t    function shouldGetter() {\n\t      if (this instanceof String || this instanceof Number) {\n\t        return new Assertion(this.constructor(this), null, shouldGetter);\n\t      } else if (this instanceof Boolean) {\n\t        return new Assertion(this == true, null, shouldGetter);\n\t      }\n\t      return new Assertion(this, null, shouldGetter);\n\t    }\n\t    function shouldSetter(value) {\n\t      // See https://github.com/chaijs/chai/issues/86: this makes\n\t      // `whatever.should = someValue` actually set `someValue`, which is\n\t      // especially useful for `global.should = require('chai').should()`.\n\t      //\n\t      // Note that we have to use [[DefineProperty]] instead of [[Put]]\n\t      // since otherwise we would trigger this very setter!\n\t      Object.defineProperty(this, 'should', {\n\t        value: value,\n\t        enumerable: true,\n\t        configurable: true,\n\t        writable: true\n\t      });\n\t    }\n\t    // modify Object.prototype to have `should`\n\t    Object.defineProperty(Object.prototype, 'should', {\n\t      set: shouldSetter\n\t      , get: shouldGetter\n\t      , configurable: true\n\t    });\n\t\n\t    var should = {};\n\t\n\t    should.equal = function (val1, val2, msg) {\n\t      new Assertion(val1, msg).to.equal(val2);\n\t    };\n\t\n\t    should.Throw = function (fn, errt, errs, msg) {\n\t      new Assertion(fn, msg).to.Throw(errt, errs);\n\t    };\n\t\n\t    should.exist = function (val, msg) {\n\t      new Assertion(val, msg).to.exist;\n\t    }\n\t\n\t    // negation\n\t    should.not = {}\n\t\n\t    should.not.equal = function (val1, val2, msg) {\n\t      new Assertion(val1, msg).to.not.equal(val2);\n\t    };\n\t\n\t    should.not.Throw = function (fn, errt, errs, msg) {\n\t      new Assertion(fn, msg).to.not.Throw(errt, errs);\n\t    };\n\t\n\t    should.not.exist = function (val, msg) {\n\t      new Assertion(val, msg).to.not.exist;\n\t    }\n\t\n\t    should['throw'] = should['Throw'];\n\t    should.not['throw'] = should.not['Throw'];\n\t\n\t    return should;\n\t  };\n\t\n\t  chai.should = loadShould;\n\t  chai.Should = loadShould;\n\t};\n\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Chai - addChainingMethod utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/*!\n\t * Module dependencies\n\t */\n\t\n\tvar transferFlags = __webpack_require__(14);\n\tvar flag = __webpack_require__(2);\n\tvar config = __webpack_require__(1);\n\t\n\t/*!\n\t * Module variables\n\t */\n\t\n\t// Check whether `__proto__` is supported\n\tvar hasProtoSupport = '__proto__' in Object;\n\t\n\t// Without `__proto__` support, this module will need to add properties to a function.\n\t// However, some Function.prototype methods cannot be overwritten,\n\t// and there seems no easy cross-platform way to detect them (@see chaijs/chai/issues/69).\n\tvar excludeNames = /^(?:length|name|arguments|caller)$/;\n\t\n\t// Cache `Function` properties\n\tvar call  = Function.prototype.call,\n\t    apply = Function.prototype.apply;\n\t\n\t/**\n\t * ### addChainableMethod (ctx, name, method, chainingBehavior)\n\t *\n\t * Adds a method to an object, such that the method can also be chained.\n\t *\n\t *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n\t *       var obj = utils.flag(this, 'object');\n\t *       new chai.Assertion(obj).to.be.equal(str);\n\t *     });\n\t *\n\t * Can also be accessed directly from `chai.Assertion`.\n\t *\n\t *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n\t *\n\t * The result can then be used as both a method assertion, executing both `method` and\n\t * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n\t *\n\t *     expect(fooStr).to.be.foo('bar');\n\t *     expect(fooStr).to.be.foo.equal('foo');\n\t *\n\t * @param {Object} ctx object to which the method is added\n\t * @param {String} name of method to add\n\t * @param {Function} method function to be used for `name`, when called\n\t * @param {Function} chainingBehavior function to be called every time the property is accessed\n\t * @name addChainableMethod\n\t * @api public\n\t */\n\t\n\tmodule.exports = function (ctx, name, method, chainingBehavior) {\n\t  if (typeof chainingBehavior !== 'function') {\n\t    chainingBehavior = function () { };\n\t  }\n\t\n\t  var chainableBehavior = {\n\t      method: method\n\t    , chainingBehavior: chainingBehavior\n\t  };\n\t\n\t  // save the methods so we can overwrite them later, if we need to.\n\t  if (!ctx.__methods) {\n\t    ctx.__methods = {};\n\t  }\n\t  ctx.__methods[name] = chainableBehavior;\n\t\n\t  Object.defineProperty(ctx, name,\n\t    { get: function () {\n\t        chainableBehavior.chainingBehavior.call(this);\n\t\n\t        var assert = function assert() {\n\t          var old_ssfi = flag(this, 'ssfi');\n\t          if (old_ssfi && config.includeStack === false)\n\t            flag(this, 'ssfi', assert);\n\t          var result = chainableBehavior.method.apply(this, arguments);\n\t          return result === undefined ? this : result;\n\t        };\n\t\n\t        // Use `__proto__` if available\n\t        if (hasProtoSupport) {\n\t          // Inherit all properties from the object by replacing the `Function` prototype\n\t          var prototype = assert.__proto__ = Object.create(this);\n\t          // Restore the `call` and `apply` methods from `Function`\n\t          prototype.call = call;\n\t          prototype.apply = apply;\n\t        }\n\t        // Otherwise, redefine all properties (slow!)\n\t        else {\n\t          var asserterNames = Object.getOwnPropertyNames(ctx);\n\t          asserterNames.forEach(function (asserterName) {\n\t            if (!excludeNames.test(asserterName)) {\n\t              var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);\n\t              Object.defineProperty(assert, asserterName, pd);\n\t            }\n\t          });\n\t        }\n\t\n\t        transferFlags(this, assert);\n\t        return assert;\n\t      }\n\t    , configurable: true\n\t  });\n\t};\n\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Chai - addMethod utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\tvar config = __webpack_require__(1);\n\t\n\t/**\n\t * ### .addMethod (ctx, name, method)\n\t *\n\t * Adds a method to the prototype of an object.\n\t *\n\t *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n\t *       var obj = utils.flag(this, 'object');\n\t *       new chai.Assertion(obj).to.be.equal(str);\n\t *     });\n\t *\n\t * Can also be accessed directly from `chai.Assertion`.\n\t *\n\t *     chai.Assertion.addMethod('foo', fn);\n\t *\n\t * Then can be used as any other assertion.\n\t *\n\t *     expect(fooStr).to.be.foo('bar');\n\t *\n\t * @param {Object} ctx object to which the method is added\n\t * @param {String} name of method to add\n\t * @param {Function} method function to be used for name\n\t * @name addMethod\n\t * @api public\n\t */\n\tvar flag = __webpack_require__(2);\n\t\n\tmodule.exports = function (ctx, name, method) {\n\t  ctx[name] = function () {\n\t    var old_ssfi = flag(this, 'ssfi');\n\t    if (old_ssfi && config.includeStack === false)\n\t      flag(this, 'ssfi', ctx[name]);\n\t    var result = method.apply(this, arguments);\n\t    return result === undefined ? this : result;\n\t  };\n\t};\n\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports) {\n\n\t/*!\n\t * Chai - addProperty utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/**\n\t * ### addProperty (ctx, name, getter)\n\t *\n\t * Adds a property to the prototype of an object.\n\t *\n\t *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n\t *       var obj = utils.flag(this, 'object');\n\t *       new chai.Assertion(obj).to.be.instanceof(Foo);\n\t *     });\n\t *\n\t * Can also be accessed directly from `chai.Assertion`.\n\t *\n\t *     chai.Assertion.addProperty('foo', fn);\n\t *\n\t * Then can be used as any other assertion.\n\t *\n\t *     expect(myFoo).to.be.foo;\n\t *\n\t * @param {Object} ctx object to which the property is added\n\t * @param {String} name of property to add\n\t * @param {Function} getter function to be used for name\n\t * @name addProperty\n\t * @api public\n\t */\n\t\n\tmodule.exports = function (ctx, name, getter) {\n\t  Object.defineProperty(ctx, name,\n\t    { get: function () {\n\t        var result = getter.call(this);\n\t        return result === undefined ? this : result;\n\t      }\n\t    , configurable: true\n\t  });\n\t};\n\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports) {\n\n\t/*!\n\t * Chai - getEnumerableProperties utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/**\n\t * ### .getEnumerableProperties(object)\n\t *\n\t * This allows the retrieval of enumerable property names of an object,\n\t * inherited or not.\n\t *\n\t * @param {Object} object\n\t * @returns {Array}\n\t * @name getEnumerableProperties\n\t * @api public\n\t */\n\t\n\tmodule.exports = function getEnumerableProperties(object) {\n\t  var result = [];\n\t  for (var name in object) {\n\t    result.push(name);\n\t  }\n\t  return result;\n\t};\n\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Chai - message composition utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/*!\n\t * Module dependancies\n\t */\n\t\n\tvar flag = __webpack_require__(2)\n\t  , getActual = __webpack_require__(11)\n\t  , inspect = __webpack_require__(6)\n\t  , objDisplay = __webpack_require__(13);\n\t\n\t/**\n\t * ### .getMessage(object, message, negateMessage)\n\t *\n\t * Construct the error message based on flags\n\t * and template tags. Template tags will return\n\t * a stringified inspection of the object referenced.\n\t *\n\t * Message template tags:\n\t * - `#{this}` current asserted object\n\t * - `#{act}` actual value\n\t * - `#{exp}` expected value\n\t *\n\t * @param {Object} object (constructed Assertion)\n\t * @param {Arguments} chai.Assertion.prototype.assert arguments\n\t * @name getMessage\n\t * @api public\n\t */\n\t\n\tmodule.exports = function (obj, args) {\n\t  var negate = flag(obj, 'negate')\n\t    , val = flag(obj, 'object')\n\t    , expected = args[3]\n\t    , actual = getActual(obj, args)\n\t    , msg = negate ? args[2] : args[1]\n\t    , flagMsg = flag(obj, 'message');\n\t\n\t  if(typeof msg === \"function\") msg = msg();\n\t  msg = msg || '';\n\t  msg = msg\n\t    .replace(/#{this}/g, objDisplay(val))\n\t    .replace(/#{act}/g, objDisplay(actual))\n\t    .replace(/#{exp}/g, objDisplay(expected));\n\t\n\t  return flagMsg ? flagMsg + ': ' + msg : msg;\n\t};\n\n\n/***/ }),\n/* 38 */\n/***/ (function(module, exports) {\n\n\t/*!\n\t * Chai - getPathValue utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * @see https://github.com/logicalparadox/filtr\n\t * MIT Licensed\n\t */\n\t\n\t/**\n\t * ### .getPathValue(path, object)\n\t *\n\t * This allows the retrieval of values in an\n\t * object given a string path.\n\t *\n\t *     var obj = {\n\t *         prop1: {\n\t *             arr: ['a', 'b', 'c']\n\t *           , str: 'Hello'\n\t *         }\n\t *       , prop2: {\n\t *             arr: [ { nested: 'Universe' } ]\n\t *           , str: 'Hello again!'\n\t *         }\n\t *     }\n\t *\n\t * The following would be the results.\n\t *\n\t *     getPathValue('prop1.str', obj); // Hello\n\t *     getPathValue('prop1.att[2]', obj); // b\n\t *     getPathValue('prop2.arr[0].nested', obj); // Universe\n\t *\n\t * @param {String} path\n\t * @param {Object} object\n\t * @returns {Object} value or `undefined`\n\t * @name getPathValue\n\t * @api public\n\t */\n\t\n\tvar getPathValue = module.exports = function (path, obj) {\n\t  var parsed = parsePath(path);\n\t  return _getPathValue(parsed, obj);\n\t};\n\t\n\t/*!\n\t * ## parsePath(path)\n\t *\n\t * Helper function used to parse string object\n\t * paths. Use in conjunction with `_getPathValue`.\n\t *\n\t *      var parsed = parsePath('myobject.property.subprop');\n\t *\n\t * ### Paths:\n\t *\n\t * * Can be as near infinitely deep and nested\n\t * * Arrays are also valid using the formal `myobject.document[3].property`.\n\t *\n\t * @param {String} path\n\t * @returns {Object} parsed\n\t * @api private\n\t */\n\t\n\tfunction parsePath (path) {\n\t  var str = path.replace(/\\[/g, '.[')\n\t    , parts = str.match(/(\\\\\\.|[^.]+?)+/g);\n\t  return parts.map(function (value) {\n\t    var re = /\\[(\\d+)\\]$/\n\t      , mArr = re.exec(value)\n\t    if (mArr) return { i: parseFloat(mArr[1]) };\n\t    else return { p: value };\n\t  });\n\t};\n\t\n\t/*!\n\t * ## _getPathValue(parsed, obj)\n\t *\n\t * Helper companion function for `.parsePath` that returns\n\t * the value located at the parsed address.\n\t *\n\t *      var value = getPathValue(parsed, obj);\n\t *\n\t * @param {Object} parsed definition from `parsePath`.\n\t * @param {Object} object to search against\n\t * @returns {Object|Undefined} value\n\t * @api private\n\t */\n\t\n\tfunction _getPathValue (parsed, obj) {\n\t  var tmp = obj\n\t    , res;\n\t  for (var i = 0, l = parsed.length; i < l; i++) {\n\t    var part = parsed[i];\n\t    if (tmp) {\n\t      if ('undefined' !== typeof part.p)\n\t        tmp = tmp[part.p];\n\t      else if ('undefined' !== typeof part.i)\n\t        tmp = tmp[part.i];\n\t      if (i == (l - 1)) res = tmp;\n\t    } else {\n\t      res = undefined;\n\t    }\n\t  }\n\t  return res;\n\t};\n\n\n/***/ }),\n/* 39 */\n/***/ (function(module, exports) {\n\n\t/*!\n\t * Chai - getProperties utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/**\n\t * ### .getProperties(object)\n\t *\n\t * This allows the retrieval of property names of an object, enumerable or not,\n\t * inherited or not.\n\t *\n\t * @param {Object} object\n\t * @returns {Array}\n\t * @name getProperties\n\t * @api public\n\t */\n\t\n\tmodule.exports = function getProperties(object) {\n\t  var result = Object.getOwnPropertyNames(subject);\n\t\n\t  function addProperty(property) {\n\t    if (result.indexOf(property) === -1) {\n\t      result.push(property);\n\t    }\n\t  }\n\t\n\t  var proto = Object.getPrototypeOf(subject);\n\t  while (proto !== null) {\n\t    Object.getOwnPropertyNames(proto).forEach(addProperty);\n\t    proto = Object.getPrototypeOf(proto);\n\t  }\n\t\n\t  return result;\n\t};\n\n\n/***/ }),\n/* 40 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * chai\n\t * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/*!\n\t * Main exports\n\t */\n\t\n\tvar exports = module.exports = {};\n\t\n\t/*!\n\t * test utility\n\t */\n\t\n\texports.test = __webpack_require__(44);\n\t\n\t/*!\n\t * type utility\n\t */\n\t\n\texports.type = __webpack_require__(45);\n\t\n\t/*!\n\t * message utility\n\t */\n\t\n\texports.getMessage = __webpack_require__(37);\n\t\n\t/*!\n\t * actual utility\n\t */\n\t\n\texports.getActual = __webpack_require__(11);\n\t\n\t/*!\n\t * Inspect util\n\t */\n\t\n\texports.inspect = __webpack_require__(6);\n\t\n\t/*!\n\t * Object Display util\n\t */\n\t\n\texports.objDisplay = __webpack_require__(13);\n\t\n\t/*!\n\t * Flag utility\n\t */\n\t\n\texports.flag = __webpack_require__(2);\n\t\n\t/*!\n\t * Flag transferring utility\n\t */\n\t\n\texports.transferFlags = __webpack_require__(14);\n\t\n\t/*!\n\t * Deep equal utility\n\t */\n\t\n\texports.eql = __webpack_require__(46);\n\t\n\t/*!\n\t * Deep path value\n\t */\n\t\n\texports.getPathValue = __webpack_require__(38);\n\t\n\t/*!\n\t * Function name\n\t */\n\t\n\texports.getName = __webpack_require__(12);\n\t\n\t/*!\n\t * add Property\n\t */\n\t\n\texports.addProperty = __webpack_require__(35);\n\t\n\t/*!\n\t * add Method\n\t */\n\t\n\texports.addMethod = __webpack_require__(34);\n\t\n\t/*!\n\t * overwrite Property\n\t */\n\t\n\texports.overwriteProperty = __webpack_require__(43);\n\t\n\t/*!\n\t * overwrite Method\n\t */\n\t\n\texports.overwriteMethod = __webpack_require__(42);\n\t\n\t/*!\n\t * Add a chainable method\n\t */\n\t\n\texports.addChainableMethod = __webpack_require__(33);\n\t\n\t/*!\n\t * Overwrite chainable method\n\t */\n\t\n\texports.overwriteChainableMethod = __webpack_require__(41);\n\t\n\n\n/***/ }),\n/* 41 */\n/***/ (function(module, exports) {\n\n\t/*!\n\t * Chai - overwriteChainableMethod utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/**\n\t * ### overwriteChainableMethod (ctx, name, fn)\n\t *\n\t * Overwites an already existing chainable method\n\t * and provides access to the previous function or\n\t * property.  Must return functions to be used for\n\t * name.\n\t *\n\t *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'length',\n\t *       function (_super) {\n\t *       }\n\t *     , function (_super) {\n\t *       }\n\t *     );\n\t *\n\t * Can also be accessed directly from `chai.Assertion`.\n\t *\n\t *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n\t *\n\t * Then can be used as any other assertion.\n\t *\n\t *     expect(myFoo).to.have.length(3);\n\t *     expect(myFoo).to.have.length.above(3);\n\t *\n\t * @param {Object} ctx object whose method / property is to be overwritten\n\t * @param {String} name of method / property to overwrite\n\t * @param {Function} method function that returns a function to be used for name\n\t * @param {Function} chainingBehavior function that returns a function to be used for property\n\t * @name overwriteChainableMethod\n\t * @api public\n\t */\n\t\n\tmodule.exports = function (ctx, name, method, chainingBehavior) {\n\t  var chainableBehavior = ctx.__methods[name];\n\t\n\t  var _chainingBehavior = chainableBehavior.chainingBehavior;\n\t  chainableBehavior.chainingBehavior = function () {\n\t    var result = chainingBehavior(_chainingBehavior).call(this);\n\t    return result === undefined ? this : result;\n\t  };\n\t\n\t  var _method = chainableBehavior.method;\n\t  chainableBehavior.method = function () {\n\t    var result = method(_method).apply(this, arguments);\n\t    return result === undefined ? this : result;\n\t  };\n\t};\n\n\n/***/ }),\n/* 42 */\n/***/ (function(module, exports) {\n\n\t/*!\n\t * Chai - overwriteMethod utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/**\n\t * ### overwriteMethod (ctx, name, fn)\n\t *\n\t * Overwites an already existing method and provides\n\t * access to previous function. Must return function\n\t * to be used for name.\n\t *\n\t *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n\t *       return function (str) {\n\t *         var obj = utils.flag(this, 'object');\n\t *         if (obj instanceof Foo) {\n\t *           new chai.Assertion(obj.value).to.equal(str);\n\t *         } else {\n\t *           _super.apply(this, arguments);\n\t *         }\n\t *       }\n\t *     });\n\t *\n\t * Can also be accessed directly from `chai.Assertion`.\n\t *\n\t *     chai.Assertion.overwriteMethod('foo', fn);\n\t *\n\t * Then can be used as any other assertion.\n\t *\n\t *     expect(myFoo).to.equal('bar');\n\t *\n\t * @param {Object} ctx object whose method is to be overwritten\n\t * @param {String} name of method to overwrite\n\t * @param {Function} method function that returns a function to be used for name\n\t * @name overwriteMethod\n\t * @api public\n\t */\n\t\n\tmodule.exports = function (ctx, name, method) {\n\t  var _method = ctx[name]\n\t    , _super = function () { return this; };\n\t\n\t  if (_method && 'function' === typeof _method)\n\t    _super = _method;\n\t\n\t  ctx[name] = function () {\n\t    var result = method(_super).apply(this, arguments);\n\t    return result === undefined ? this : result;\n\t  }\n\t};\n\n\n/***/ }),\n/* 43 */\n/***/ (function(module, exports) {\n\n\t/*!\n\t * Chai - overwriteProperty utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/**\n\t * ### overwriteProperty (ctx, name, fn)\n\t *\n\t * Overwites an already existing property getter and provides\n\t * access to previous value. Must return function to use as getter.\n\t *\n\t *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n\t *       return function () {\n\t *         var obj = utils.flag(this, 'object');\n\t *         if (obj instanceof Foo) {\n\t *           new chai.Assertion(obj.name).to.equal('bar');\n\t *         } else {\n\t *           _super.call(this);\n\t *         }\n\t *       }\n\t *     });\n\t *\n\t *\n\t * Can also be accessed directly from `chai.Assertion`.\n\t *\n\t *     chai.Assertion.overwriteProperty('foo', fn);\n\t *\n\t * Then can be used as any other assertion.\n\t *\n\t *     expect(myFoo).to.be.ok;\n\t *\n\t * @param {Object} ctx object whose property is to be overwritten\n\t * @param {String} name of property to overwrite\n\t * @param {Function} getter function that returns a getter function to be used for name\n\t * @name overwriteProperty\n\t * @api public\n\t */\n\t\n\tmodule.exports = function (ctx, name, getter) {\n\t  var _get = Object.getOwnPropertyDescriptor(ctx, name)\n\t    , _super = function () {};\n\t\n\t  if (_get && 'function' === typeof _get.get)\n\t    _super = _get.get\n\t\n\t  Object.defineProperty(ctx, name,\n\t    { get: function () {\n\t        var result = getter(_super).call(this);\n\t        return result === undefined ? this : result;\n\t      }\n\t    , configurable: true\n\t  });\n\t};\n\n\n/***/ }),\n/* 44 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Chai - test utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/*!\n\t * Module dependancies\n\t */\n\t\n\tvar flag = __webpack_require__(2);\n\t\n\t/**\n\t * # test(object, expression)\n\t *\n\t * Test and object for expression.\n\t *\n\t * @param {Object} object (constructed Assertion)\n\t * @param {Arguments} chai.Assertion.prototype.assert arguments\n\t */\n\t\n\tmodule.exports = function (obj, args) {\n\t  var negate = flag(obj, 'negate')\n\t    , expr = args[0];\n\t  return negate ? !expr : expr;\n\t};\n\n\n/***/ }),\n/* 45 */\n/***/ (function(module, exports) {\n\n\t/*!\n\t * Chai - type utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/*!\n\t * Detectable javascript natives\n\t */\n\t\n\tvar natives = {\n\t    '[object Arguments]': 'arguments'\n\t  , '[object Array]': 'array'\n\t  , '[object Date]': 'date'\n\t  , '[object Function]': 'function'\n\t  , '[object Number]': 'number'\n\t  , '[object RegExp]': 'regexp'\n\t  , '[object String]': 'string'\n\t};\n\t\n\t/**\n\t * ### type(object)\n\t *\n\t * Better implementation of `typeof` detection that can\n\t * be used cross-browser. Handles the inconsistencies of\n\t * Array, `null`, and `undefined` detection.\n\t *\n\t *     utils.type({}) // 'object'\n\t *     utils.type(null) // `null'\n\t *     utils.type(undefined) // `undefined`\n\t *     utils.type([]) // `array`\n\t *\n\t * @param {Mixed} object to detect type of\n\t * @name type\n\t * @api private\n\t */\n\t\n\tmodule.exports = function (obj) {\n\t  var str = Object.prototype.toString.call(obj);\n\t  if (natives[str]) return natives[str];\n\t  if (obj === null) return 'null';\n\t  if (obj === undefined) return 'undefined';\n\t  if (obj === Object(obj)) return 'object';\n\t  return typeof obj;\n\t};\n\n\n/***/ }),\n/* 46 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(47);\n\n\n/***/ }),\n/* 47 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * deep-eql\n\t * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/*!\n\t * Module dependencies\n\t */\n\t\n\tvar type = __webpack_require__(50);\n\t\n\t/*!\n\t * Buffer.isBuffer browser shim\n\t */\n\t\n\tvar Buffer;\n\ttry { Buffer = __webpack_require__(26).Buffer; }\n\tcatch(ex) {\n\t  Buffer = {};\n\t  Buffer.isBuffer = function() { return false; }\n\t}\n\t\n\t/*!\n\t * Primary Export\n\t */\n\t\n\tmodule.exports = deepEqual;\n\t\n\t/**\n\t * Assert super-strict (egal) equality between\n\t * two objects of any type.\n\t *\n\t * @param {Mixed} a\n\t * @param {Mixed} b\n\t * @param {Array} memoised (optional)\n\t * @return {Boolean} equal match\n\t */\n\t\n\tfunction deepEqual(a, b, m) {\n\t  if (sameValue(a, b)) {\n\t    return true;\n\t  } else if ('date' === type(a)) {\n\t    return dateEqual(a, b);\n\t  } else if ('regexp' === type(a)) {\n\t    return regexpEqual(a, b);\n\t  } else if (Buffer.isBuffer(a)) {\n\t    return bufferEqual(a, b);\n\t  } else if ('arguments' === type(a)) {\n\t    return argumentsEqual(a, b, m);\n\t  } else if (!typeEqual(a, b)) {\n\t    return false;\n\t  } else if (('object' !== type(a) && 'object' !== type(b))\n\t  && ('array' !== type(a) && 'array' !== type(b))) {\n\t    return sameValue(a, b);\n\t  } else {\n\t    return objectEqual(a, b, m);\n\t  }\n\t}\n\t\n\t/*!\n\t * Strict (egal) equality test. Ensures that NaN always\n\t * equals NaN and `-0` does not equal `+0`.\n\t *\n\t * @param {Mixed} a\n\t * @param {Mixed} b\n\t * @return {Boolean} equal match\n\t */\n\t\n\tfunction sameValue(a, b) {\n\t  if (a === b) return a !== 0 || 1 / a === 1 / b;\n\t  return a !== a && b !== b;\n\t}\n\t\n\t/*!\n\t * Compare the types of two given objects and\n\t * return if they are equal. Note that an Array\n\t * has a type of `array` (not `object`) and arguments\n\t * have a type of `arguments` (not `array`/`object`).\n\t *\n\t * @param {Mixed} a\n\t * @param {Mixed} b\n\t * @return {Boolean} result\n\t */\n\t\n\tfunction typeEqual(a, b) {\n\t  return type(a) === type(b);\n\t}\n\t\n\t/*!\n\t * Compare two Date objects by asserting that\n\t * the time values are equal using `saveValue`.\n\t *\n\t * @param {Date} a\n\t * @param {Date} b\n\t * @return {Boolean} result\n\t */\n\t\n\tfunction dateEqual(a, b) {\n\t  if ('date' !== type(b)) return false;\n\t  return sameValue(a.getTime(), b.getTime());\n\t}\n\t\n\t/*!\n\t * Compare two regular expressions by converting them\n\t * to string and checking for `sameValue`.\n\t *\n\t * @param {RegExp} a\n\t * @param {RegExp} b\n\t * @return {Boolean} result\n\t */\n\t\n\tfunction regexpEqual(a, b) {\n\t  if ('regexp' !== type(b)) return false;\n\t  return sameValue(a.toString(), b.toString());\n\t}\n\t\n\t/*!\n\t * Assert deep equality of two `arguments` objects.\n\t * Unfortunately, these must be sliced to arrays\n\t * prior to test to ensure no bad behavior.\n\t *\n\t * @param {Arguments} a\n\t * @param {Arguments} b\n\t * @param {Array} memoize (optional)\n\t * @return {Boolean} result\n\t */\n\t\n\tfunction argumentsEqual(a, b, m) {\n\t  if ('arguments' !== type(b)) return false;\n\t  a = [].slice.call(a);\n\t  b = [].slice.call(b);\n\t  return deepEqual(a, b, m);\n\t}\n\t\n\t/*!\n\t * Get enumerable properties of a given object.\n\t *\n\t * @param {Object} a\n\t * @return {Array} property names\n\t */\n\t\n\tfunction enumerable(a) {\n\t  var res = [];\n\t  for (var key in a) res.push(key);\n\t  return res;\n\t}\n\t\n\t/*!\n\t * Simple equality for flat iterable objects\n\t * such as Arrays or Node.js buffers.\n\t *\n\t * @param {Iterable} a\n\t * @param {Iterable} b\n\t * @return {Boolean} result\n\t */\n\t\n\tfunction iterableEqual(a, b) {\n\t  if (a.length !==  b.length) return false;\n\t\n\t  var i = 0;\n\t  var match = true;\n\t\n\t  for (; i < a.length; i++) {\n\t    if (a[i] !== b[i]) {\n\t      match = false;\n\t      break;\n\t    }\n\t  }\n\t\n\t  return match;\n\t}\n\t\n\t/*!\n\t * Extension to `iterableEqual` specifically\n\t * for Node.js Buffers.\n\t *\n\t * @param {Buffer} a\n\t * @param {Mixed} b\n\t * @return {Boolean} result\n\t */\n\t\n\tfunction bufferEqual(a, b) {\n\t  if (!Buffer.isBuffer(b)) return false;\n\t  return iterableEqual(a, b);\n\t}\n\t\n\t/*!\n\t * Block for `objectEqual` ensuring non-existing\n\t * values don't get in.\n\t *\n\t * @param {Mixed} object\n\t * @return {Boolean} result\n\t */\n\t\n\tfunction isValue(a) {\n\t  return a !== null && a !== undefined;\n\t}\n\t\n\t/*!\n\t * Recursively check the equality of two objects.\n\t * Once basic sameness has been established it will\n\t * defer to `deepEqual` for each enumerable key\n\t * in the object.\n\t *\n\t * @param {Mixed} a\n\t * @param {Mixed} b\n\t * @return {Boolean} result\n\t */\n\t\n\tfunction objectEqual(a, b, m) {\n\t  if (!isValue(a) || !isValue(b)) {\n\t    return false;\n\t  }\n\t\n\t  if (a.prototype !== b.prototype) {\n\t    return false;\n\t  }\n\t\n\t  var i;\n\t  if (m) {\n\t    for (i = 0; i < m.length; i++) {\n\t      if ((m[i][0] === a && m[i][1] === b)\n\t      ||  (m[i][0] === b && m[i][1] === a)) {\n\t        return true;\n\t      }\n\t    }\n\t  } else {\n\t    m = [];\n\t  }\n\t\n\t  try {\n\t    var ka = enumerable(a);\n\t    var kb = enumerable(b);\n\t  } catch (ex) {\n\t    return false;\n\t  }\n\t\n\t  ka.sort();\n\t  kb.sort();\n\t\n\t  if (!iterableEqual(ka, kb)) {\n\t    return false;\n\t  }\n\t\n\t  m.push([ a, b ]);\n\t\n\t  var key;\n\t  for (i = ka.length - 1; i >= 0; i--) {\n\t    key = ka[i];\n\t    if (!deepEqual(a[key], b[key], m)) {\n\t      return false;\n\t    }\n\t  }\n\t\n\t  return true;\n\t}\n\n\n/***/ }),\n/* 48 */\n/***/ (function(module, exports) {\n\n\texports.read = function (buffer, offset, isLE, mLen, nBytes) {\n\t  var e, m\n\t  var eLen = nBytes * 8 - mLen - 1\n\t  var eMax = (1 << eLen) - 1\n\t  var eBias = eMax >> 1\n\t  var nBits = -7\n\t  var i = isLE ? (nBytes - 1) : 0\n\t  var d = isLE ? -1 : 1\n\t  var s = buffer[offset + i]\n\t\n\t  i += d\n\t\n\t  e = s & ((1 << (-nBits)) - 1)\n\t  s >>= (-nBits)\n\t  nBits += eLen\n\t  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\t\n\t  m = e & ((1 << (-nBits)) - 1)\n\t  e >>= (-nBits)\n\t  nBits += mLen\n\t  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\t\n\t  if (e === 0) {\n\t    e = 1 - eBias\n\t  } else if (e === eMax) {\n\t    return m ? NaN : ((s ? -1 : 1) * Infinity)\n\t  } else {\n\t    m = m + Math.pow(2, mLen)\n\t    e = e - eBias\n\t  }\n\t  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n\t}\n\t\n\texports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n\t  var e, m, c\n\t  var eLen = nBytes * 8 - mLen - 1\n\t  var eMax = (1 << eLen) - 1\n\t  var eBias = eMax >> 1\n\t  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n\t  var i = isLE ? 0 : (nBytes - 1)\n\t  var d = isLE ? 1 : -1\n\t  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\t\n\t  value = Math.abs(value)\n\t\n\t  if (isNaN(value) || value === Infinity) {\n\t    m = isNaN(value) ? 1 : 0\n\t    e = eMax\n\t  } else {\n\t    e = Math.floor(Math.log(value) / Math.LN2)\n\t    if (value * (c = Math.pow(2, -e)) < 1) {\n\t      e--\n\t      c *= 2\n\t    }\n\t    if (e + eBias >= 1) {\n\t      value += rt / c\n\t    } else {\n\t      value += rt * Math.pow(2, 1 - eBias)\n\t    }\n\t    if (value * c >= 2) {\n\t      e++\n\t      c /= 2\n\t    }\n\t\n\t    if (e + eBias >= eMax) {\n\t      m = 0\n\t      e = eMax\n\t    } else if (e + eBias >= 1) {\n\t      m = (value * c - 1) * Math.pow(2, mLen)\n\t      e = e + eBias\n\t    } else {\n\t      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n\t      e = 0\n\t    }\n\t  }\n\t\n\t  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\t\n\t  e = (e << mLen) | m\n\t  eLen += mLen\n\t  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\t\n\t  buffer[offset + i - d] |= s * 128\n\t}\n\n\n/***/ }),\n/* 49 */\n/***/ (function(module, exports) {\n\n\tvar toString = {}.toString;\n\t\n\tmodule.exports = Array.isArray || function (arr) {\n\t  return toString.call(arr) == '[object Array]';\n\t};\n\n\n/***/ }),\n/* 50 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(51);\n\n\n/***/ }),\n/* 51 */\n/***/ (function(module, exports) {\n\n\t/*!\n\t * type-detect\n\t * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/*!\n\t * Primary Exports\n\t */\n\t\n\tvar exports = module.exports = getType;\n\t\n\t/*!\n\t * Detectable javascript natives\n\t */\n\t\n\tvar natives = {\n\t    '[object Array]': 'array'\n\t  , '[object RegExp]': 'regexp'\n\t  , '[object Function]': 'function'\n\t  , '[object Arguments]': 'arguments'\n\t  , '[object Date]': 'date'\n\t};\n\t\n\t/**\n\t * ### typeOf (obj)\n\t *\n\t * Use several different techniques to determine\n\t * the type of object being tested.\n\t *\n\t *\n\t * @param {Mixed} object\n\t * @return {String} object type\n\t * @api public\n\t */\n\t\n\tfunction getType (obj) {\n\t  var str = Object.prototype.toString.call(obj);\n\t  if (natives[str]) return natives[str];\n\t  if (obj === null) return 'null';\n\t  if (obj === undefined) return 'undefined';\n\t  if (obj === Object(obj)) return 'object';\n\t  return typeof obj;\n\t}\n\t\n\texports.Library = Library;\n\t\n\t/**\n\t * ### Library\n\t *\n\t * Create a repository for custom type detection.\n\t *\n\t * ```js\n\t * var lib = new type.Library;\n\t * ```\n\t *\n\t */\n\t\n\tfunction Library () {\n\t  this.tests = {};\n\t}\n\t\n\t/**\n\t * #### .of (obj)\n\t *\n\t * Expose replacement `typeof` detection to the library.\n\t *\n\t * ```js\n\t * if ('string' === lib.of('hello world')) {\n\t *   // ...\n\t * }\n\t * ```\n\t *\n\t * @param {Mixed} object to test\n\t * @return {String} type\n\t */\n\t\n\tLibrary.prototype.of = getType;\n\t\n\t/**\n\t * #### .define (type, test)\n\t *\n\t * Add a test to for the `.test()` assertion.\n\t *\n\t * Can be defined as a regular expression:\n\t *\n\t * ```js\n\t * lib.define('int', /^[0-9]+$/);\n\t * ```\n\t *\n\t * ... or as a function:\n\t *\n\t * ```js\n\t * lib.define('bln', function (obj) {\n\t *   if ('boolean' === lib.of(obj)) return true;\n\t *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];\n\t *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();\n\t *   return !! ~blns.indexOf(obj);\n\t * });\n\t * ```\n\t *\n\t * @param {String} type\n\t * @param {RegExp|Function} test\n\t * @api public\n\t */\n\t\n\tLibrary.prototype.define = function (type, test) {\n\t  if (arguments.length === 1) return this.tests[type];\n\t  this.tests[type] = test;\n\t  return this;\n\t};\n\t\n\t/**\n\t * #### .test (obj, test)\n\t *\n\t * Assert that an object is of type. Will first\n\t * check natives, and if that does not pass it will\n\t * use the user defined custom tests.\n\t *\n\t * ```js\n\t * assert(lib.test('1', 'int'));\n\t * assert(lib.test('yes', 'bln'));\n\t * ```\n\t *\n\t * @param {Mixed} object\n\t * @param {String} type\n\t * @return {Boolean} result\n\t * @api public\n\t */\n\t\n\tLibrary.prototype.test = function (obj, type) {\n\t  if (type === getType(obj)) return true;\n\t  var test = this.tests[type];\n\t\n\t  if (test && 'regexp' === getType(test)) {\n\t    return test.test(obj);\n\t  } else if (test && 'function' === getType(test)) {\n\t    return test(obj);\n\t  } else {\n\t    throw new ReferenceError('Type test \"' + type + '\" not defined or invalid.');\n\t  }\n\t};\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// tests.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 66cda6bfee26506be81b","var promisePolyfill = require(\"promise-polyfill\");\r\nif (!global.Promise) {\r\n    global.Promise = promisePolyfill;\r\n}\r\n\r\nmocha.setup('bdd');\r\nchai.should();\r\nrequire(\"./tests\").run(SPScript);\r\n\r\nmocha.run();\n\n\n// WEBPACK FOOTER //\n// ./src/test/test.browser.js","module.exports = {\n\n  /**\n   * ### config.includeStack\n   *\n   * User configurable property, influences whether stack trace\n   * is included in Assertion error message. Default of false\n   * suppresses stack trace in the error message.\n   *\n   *     chai.config.includeStack = true;  // enable stack on error\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n   includeStack: false,\n\n  /**\n   * ### config.showDiff\n   *\n   * User configurable property, influences whether or not\n   * the `showDiff` flag should be included in the thrown\n   * AssertionErrors. `false` will always be `false`; `true`\n   * will be true when the assertion has requested a diff\n   * be shown.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  showDiff: true,\n\n  /**\n   * ### config.truncateThreshold\n   *\n   * User configurable property, sets length threshold for actual and\n   * expected values in assertion errors. If this threshold is exceeded,\n   * the value is truncated.\n   *\n   * Set it to zero if you want to disable truncating altogether.\n   *\n   *     chai.config.truncateThreshold = 0;  // disable truncating\n   *\n   * @param {Number}\n   * @api public\n   */\n\n  truncateThreshold: 40\n\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/config.js\n// module id = 1\n// module chunks = 0","/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### flag(object ,key, [value])\n *\n * Get or set a flag value on an object. If a\n * value is provided it will be set, else it will\n * return the currently set value or `undefined` if\n * the value is not set.\n *\n *     utils.flag(this, 'foo', 'bar'); // setter\n *     utils.flag(this, 'foo'); // getter, returns `bar`\n *\n * @param {Object} object (constructed Assertion\n * @param {String} key\n * @param {Mixed} value (optional)\n * @name flag\n * @api private\n */\n\nmodule.exports = function (obj, key, value) {\n  var flags = obj.__flags || (obj.__flags = Object.create(null));\n  if (arguments.length === 3) {\n    flags[key] = value;\n  } else {\n    return flags[key];\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/flag.js\n// module id = 2\n// module chunks = 0","module.exports = require('./lib/chai');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/index.js\n// module id = 5\n// module chunks = 0","// This is (almost) directly from Node.js utils\n// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js\n\nvar getName = require('./getName');\nvar getProperties = require('./getProperties');\nvar getEnumerableProperties = require('./getEnumerableProperties');\n\nmodule.exports = inspect;\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Boolean} showHidden Flag that shows hidden (not enumerable)\n *    properties of objects.\n * @param {Number} depth Depth in which to descend in object. Default is 2.\n * @param {Boolean} colors Flag to turn on ANSI escape codes to color the\n *    output. Default is false (no coloring).\n */\nfunction inspect(obj, showHidden, depth, colors) {\n  var ctx = {\n    showHidden: showHidden,\n    seen: [],\n    stylize: function (str) { return str; }\n  };\n  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));\n}\n\n// Returns true if object is a DOM element.\nvar isDOMElement = function (object) {\n  if (typeof HTMLElement === 'object') {\n    return object instanceof HTMLElement;\n  } else {\n    return object &&\n      typeof object === 'object' &&\n      object.nodeType === 1 &&\n      typeof object.nodeName === 'string';\n  }\n};\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (value && typeof value.inspect === 'function' &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes);\n    if (typeof ret !== 'string') {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // If this is a DOM element, try to get the outer HTML.\n  if (isDOMElement(value)) {\n    if ('outerHTML' in value) {\n      return value.outerHTML;\n      // This value does not have an outerHTML attribute,\n      //   it could still be an XML element\n    } else {\n      // Attempt to serialize it\n      try {\n        if (document.xmlVersion) {\n          var xmlSerializer = new XMLSerializer();\n          return xmlSerializer.serializeToString(value);\n        } else {\n          // Firefox 11- do not support outerHTML\n          //   It does, however, support innerHTML\n          //   Use the following to render the element\n          var ns = \"http://www.w3.org/1999/xhtml\";\n          var container = document.createElementNS(ns, '_');\n\n          container.appendChild(value.cloneNode(false));\n          html = container.innerHTML\n            .replace('><', '>' + value.innerHTML + '<');\n          container.innerHTML = '';\n          return html;\n        }\n      } catch (err) {\n        // This could be a non-native DOM implementation,\n        //   continue with the normal flow:\n        //   printing the element as if it is an object.\n      }\n    }\n  }\n\n  // Look up the keys of the object.\n  var visibleKeys = getEnumerableProperties(value);\n  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;\n\n  // Some type of object without properties can be shortcutted.\n  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,\n  // a `stack` plus `description` property; ignore those for consistency.\n  if (keys.length === 0 || (isError(value) && (\n      (keys.length === 1 && keys[0] === 'stack') ||\n      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')\n     ))) {\n    if (typeof value === 'function') {\n      var name = getName(value);\n      var nameSuffix = name ? ': ' + name : '';\n      return ctx.stylize('[Function' + nameSuffix + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (typeof value === 'function') {\n    var name = getName(value);\n    var nameSuffix = name ? ': ' + name : '';\n    base = ' [Function' + nameSuffix + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    return formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  switch (typeof value) {\n    case 'undefined':\n      return ctx.stylize('undefined', 'undefined');\n\n    case 'string':\n      var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                               .replace(/'/g, \"\\\\'\")\n                                               .replace(/\\\\\"/g, '\"') + '\\'';\n      return ctx.stylize(simple, 'string');\n\n    case 'number':\n      if (value === 0 && (1/value) === -Infinity) {\n        return ctx.stylize('-0', 'number');\n      }\n      return ctx.stylize('' + value, 'number');\n\n    case 'boolean':\n      return ctx.stylize('' + value, 'boolean');\n  }\n  // For some reason typeof null is \"object\", so special case here.\n  if (value === null) {\n    return ctx.stylize('null', 'null');\n  }\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (Object.prototype.hasOwnProperty.call(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str;\n  if (value.__lookupGetter__) {\n    if (value.__lookupGetter__(key)) {\n      if (value.__lookupSetter__(key)) {\n        str = ctx.stylize('[Getter/Setter]', 'special');\n      } else {\n        str = ctx.stylize('[Getter]', 'special');\n      }\n    } else {\n      if (value.__lookupSetter__(key)) {\n        str = ctx.stylize('[Setter]', 'special');\n      }\n    }\n  }\n  if (visibleKeys.indexOf(key) < 0) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(value[key]) < 0) {\n      if (recurseTimes === null) {\n        str = formatValue(ctx, value[key], null);\n      } else {\n        str = formatValue(ctx, value[key], recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (typeof name === 'undefined') {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\nfunction isArray(ar) {\n  return Array.isArray(ar) ||\n         (typeof ar === 'object' && objectToString(ar) === '[object Array]');\n}\n\nfunction isRegExp(re) {\n  return typeof re === 'object' && objectToString(re) === '[object RegExp]';\n}\n\nfunction isDate(d) {\n  return typeof d === 'object' && objectToString(d) === '[object Date]';\n}\n\nfunction isError(e) {\n  return typeof e === 'object' && objectToString(e) === '[object Error]';\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/inspect.js\n// module id = 6\n// module chunks = 0","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/process/browser.js\n// module id = 7\n// module chunks = 0 1","(function (root) {\n\n  // Store setTimeout reference so promise-polyfill will be unaffected by\n  // other code modifying setTimeout (like sinon.useFakeTimers())\n  var setTimeoutFunc = setTimeout;\n\n  function noop() {}\n  \n  // Polyfill for Function.prototype.bind\n  function bind(fn, thisArg) {\n    return function () {\n      fn.apply(thisArg, arguments);\n    };\n  }\n\n  function Promise(fn) {\n    if (typeof this !== 'object') throw new TypeError('Promises must be constructed via new');\n    if (typeof fn !== 'function') throw new TypeError('not a function');\n    this._state = 0;\n    this._handled = false;\n    this._value = undefined;\n    this._deferreds = [];\n\n    doResolve(fn, this);\n  }\n\n  function handle(self, deferred) {\n    while (self._state === 3) {\n      self = self._value;\n    }\n    if (self._state === 0) {\n      self._deferreds.push(deferred);\n      return;\n    }\n    self._handled = true;\n    Promise._immediateFn(function () {\n      var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;\n      if (cb === null) {\n        (self._state === 1 ? resolve : reject)(deferred.promise, self._value);\n        return;\n      }\n      var ret;\n      try {\n        ret = cb(self._value);\n      } catch (e) {\n        reject(deferred.promise, e);\n        return;\n      }\n      resolve(deferred.promise, ret);\n    });\n  }\n\n  function resolve(self, newValue) {\n    try {\n      // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n      if (newValue === self) throw new TypeError('A promise cannot be resolved with itself.');\n      if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {\n        var then = newValue.then;\n        if (newValue instanceof Promise) {\n          self._state = 3;\n          self._value = newValue;\n          finale(self);\n          return;\n        } else if (typeof then === 'function') {\n          doResolve(bind(then, newValue), self);\n          return;\n        }\n      }\n      self._state = 1;\n      self._value = newValue;\n      finale(self);\n    } catch (e) {\n      reject(self, e);\n    }\n  }\n\n  function reject(self, newValue) {\n    self._state = 2;\n    self._value = newValue;\n    finale(self);\n  }\n\n  function finale(self) {\n    if (self._state === 2 && self._deferreds.length === 0) {\n      Promise._immediateFn(function() {\n        if (!self._handled) {\n          Promise._unhandledRejectionFn(self._value);\n        }\n      });\n    }\n\n    for (var i = 0, len = self._deferreds.length; i < len; i++) {\n      handle(self, self._deferreds[i]);\n    }\n    self._deferreds = null;\n  }\n\n  function Handler(onFulfilled, onRejected, promise) {\n    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n    this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n    this.promise = promise;\n  }\n\n  /**\n   * Take a potentially misbehaving resolver function and make sure\n   * onFulfilled and onRejected are only called once.\n   *\n   * Makes no guarantees about asynchrony.\n   */\n  function doResolve(fn, self) {\n    var done = false;\n    try {\n      fn(function (value) {\n        if (done) return;\n        done = true;\n        resolve(self, value);\n      }, function (reason) {\n        if (done) return;\n        done = true;\n        reject(self, reason);\n      });\n    } catch (ex) {\n      if (done) return;\n      done = true;\n      reject(self, ex);\n    }\n  }\n\n  Promise.prototype['catch'] = function (onRejected) {\n    return this.then(null, onRejected);\n  };\n\n  Promise.prototype.then = function (onFulfilled, onRejected) {\n    var prom = new (this.constructor)(noop);\n\n    handle(this, new Handler(onFulfilled, onRejected, prom));\n    return prom;\n  };\n\n  Promise.all = function (arr) {\n    var args = Array.prototype.slice.call(arr);\n\n    return new Promise(function (resolve, reject) {\n      if (args.length === 0) return resolve([]);\n      var remaining = args.length;\n\n      function res(i, val) {\n        try {\n          if (val && (typeof val === 'object' || typeof val === 'function')) {\n            var then = val.then;\n            if (typeof then === 'function') {\n              then.call(val, function (val) {\n                res(i, val);\n              }, reject);\n              return;\n            }\n          }\n          args[i] = val;\n          if (--remaining === 0) {\n            resolve(args);\n          }\n        } catch (ex) {\n          reject(ex);\n        }\n      }\n\n      for (var i = 0; i < args.length; i++) {\n        res(i, args[i]);\n      }\n    });\n  };\n\n  Promise.resolve = function (value) {\n    if (value && typeof value === 'object' && value.constructor === Promise) {\n      return value;\n    }\n\n    return new Promise(function (resolve) {\n      resolve(value);\n    });\n  };\n\n  Promise.reject = function (value) {\n    return new Promise(function (resolve, reject) {\n      reject(value);\n    });\n  };\n\n  Promise.race = function (values) {\n    return new Promise(function (resolve, reject) {\n      for (var i = 0, len = values.length; i < len; i++) {\n        values[i].then(resolve, reject);\n      }\n    });\n  };\n\n  // Use polyfill for setImmediate for performance gains\n  Promise._immediateFn = (typeof setImmediate === 'function' && function (fn) { setImmediate(fn); }) ||\n    function (fn) {\n      setTimeoutFunc(fn, 0);\n    };\n\n  Promise._unhandledRejectionFn = function _unhandledRejectionFn(err) {\n    if (typeof console !== 'undefined' && console) {\n      console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console\n    }\n  };\n\n  /**\n   * Set the immediate function to execute callbacks\n   * @param fn {function} Function to execute\n   * @deprecated\n   */\n  Promise._setImmediateFn = function _setImmediateFn(fn) {\n    Promise._immediateFn = fn;\n  };\n\n  /**\n   * Change the function to execute on unhandled rejection\n   * @param {function} fn Function to execute on unhandled rejection\n   * @deprecated\n   */\n  Promise._setUnhandledRejectionFn = function _setUnhandledRejectionFn(fn) {\n    Promise._unhandledRejectionFn = fn;\n  };\n  \n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = Promise;\n  } else if (!root.Promise) {\n    root.Promise = Promise;\n  }\n\n})(this);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/promise-polyfill/promise.js\n// module id = 8\n// module chunks = 0 1","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/setimmediate/setImmediate.js\n// module id = 9\n// module chunks = 0 1","var apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\nexports.setImmediate = setImmediate;\nexports.clearImmediate = clearImmediate;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/timers-browserify/main.js\n// module id = 10\n// module chunks = 0 1","/*!\n * Chai - getActual utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * # getActual(object, [actual])\n *\n * Returns the `actual` value for an Assertion\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n */\n\nmodule.exports = function (obj, args) {\n  return args.length > 4 ? args[4] : obj._obj;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/getActual.js\n// module id = 11\n// module chunks = 0","/*!\n * Chai - getName utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * # getName(func)\n *\n * Gets the name of a function, in a cross-browser way.\n *\n * @param {Function} a function (usually a constructor)\n */\n\nmodule.exports = function (func) {\n  if (func.name) return func.name;\n\n  var match = /^\\s?function ([^(]*)\\(/.exec(func);\n  return match && match[1] ? match[1] : \"\";\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/getName.js\n// module id = 12\n// module chunks = 0","/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar inspect = require('./inspect');\nvar config = require('../config');\n\n/**\n * ### .objDisplay (object)\n *\n * Determines if an object or an array matches\n * criteria to be inspected in-line for error\n * messages or should be truncated.\n *\n * @param {Mixed} javascript object to inspect\n * @name objDisplay\n * @api public\n */\n\nmodule.exports = function (obj) {\n  var str = inspect(obj)\n    , type = Object.prototype.toString.call(obj);\n\n  if (config.truncateThreshold && str.length >= config.truncateThreshold) {\n    if (type === '[object Function]') {\n      return !obj.name || obj.name === ''\n        ? '[Function]'\n        : '[Function: ' + obj.name + ']';\n    } else if (type === '[object Array]') {\n      return '[ Array(' + obj.length + ') ]';\n    } else if (type === '[object Object]') {\n      var keys = Object.keys(obj)\n        , kstr = keys.length > 2\n          ? keys.splice(0, 2).join(', ') + ', ...'\n          : keys.join(', ');\n      return '{ Object (' + kstr + ') }';\n    } else {\n      return str;\n    }\n  } else {\n    return str;\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/objDisplay.js\n// module id = 13\n// module chunks = 0","/*!\n * Chai - transferFlags utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### transferFlags(assertion, object, includeAll = true)\n *\n * Transfer all the flags for `assertion` to `object`. If\n * `includeAll` is set to `false`, then the base Chai\n * assertion flags (namely `object`, `ssfi`, and `message`)\n * will not be transferred.\n *\n *\n *     var newAssertion = new Assertion();\n *     utils.transferFlags(assertion, newAssertion);\n *\n *     var anotherAsseriton = new Assertion(myObj);\n *     utils.transferFlags(assertion, anotherAssertion, false);\n *\n * @param {Assertion} assertion the assertion to transfer the flags from\n * @param {Object} object the object to transfer the flags too; usually a new assertion\n * @param {Boolean} includeAll\n * @name getAllFlags\n * @api private\n */\n\nmodule.exports = function (assertion, object, includeAll) {\n  var flags = assertion.__flags || (assertion.__flags = Object.create(null));\n\n  if (!object.__flags) {\n    object.__flags = Object.create(null);\n  }\n\n  includeAll = arguments.length === 3 ? includeAll : true;\n\n  for (var flag in flags) {\n    if (includeAll ||\n        (flag !== 'object' && flag !== 'ssfi' && flag != 'message')) {\n      object.__flags[flag] = flags[flag];\n    }\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/transferFlags.js\n// module id = 14\n// module chunks = 0","/*!\n * assertion-error\n * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>\n * MIT Licensed\n */\n\n/*!\n * Return a function that will copy properties from\n * one object to another excluding any originally\n * listed. Returned function will create a new `{}`.\n *\n * @param {String} excluded properties ...\n * @return {Function}\n */\n\nfunction exclude () {\n  var excludes = [].slice.call(arguments);\n\n  function excludeProps (res, obj) {\n    Object.keys(obj).forEach(function (key) {\n      if (!~excludes.indexOf(key)) res[key] = obj[key];\n    });\n  }\n\n  return function extendExclude () {\n    var args = [].slice.call(arguments)\n      , i = 0\n      , res = {};\n\n    for (; i < args.length; i++) {\n      excludeProps(res, args[i]);\n    }\n\n    return res;\n  };\n};\n\n/*!\n * Primary Exports\n */\n\nmodule.exports = AssertionError;\n\n/**\n * ### AssertionError\n *\n * An extension of the JavaScript `Error` constructor for\n * assertion and validation scenarios.\n *\n * @param {String} message\n * @param {Object} properties to include (optional)\n * @param {callee} start stack function (optional)\n */\n\nfunction AssertionError (message, _props, ssf) {\n  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')\n    , props = extend(_props || {});\n\n  // default values\n  this.message = message || 'Unspecified AssertionError';\n  this.showDiff = false;\n\n  // copy from properties\n  for (var key in props) {\n    this[key] = props[key];\n  }\n\n  // capture stack trace\n  ssf = ssf || arguments.callee;\n  if (ssf && Error.captureStackTrace) {\n    Error.captureStackTrace(this, ssf);\n  }\n}\n\n/*!\n * Inherit from Error.prototype\n */\n\nAssertionError.prototype = Object.create(Error.prototype);\n\n/*!\n * Statically set name\n */\n\nAssertionError.prototype.name = 'AssertionError';\n\n/*!\n * Ensure correct constructor\n */\n\nAssertionError.prototype.constructor = AssertionError;\n\n/**\n * Allow errors to be converted to JSON for static transfer.\n *\n * @param {Boolean} include stack (default: `true`)\n * @return {Object} object that can be `JSON.stringify`\n */\n\nAssertionError.prototype.toJSON = function (stack) {\n  var extend = exclude('constructor', 'toJSON', 'stack')\n    , props = extend({ name: this.name }, this);\n\n  // include stack if exists and not turned off\n  if (false !== stack && this.stack) {\n    props.stack = this.stack;\n  }\n\n  return props;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/assertion-error/index.js\n// module id = 15\n// module chunks = 0","var should = require(\"chai\").should();\r\n\r\nexports.run = function(SPScript) {\r\n\tdescribe(\"var ctx = SPScript.createContext()\", function() {\r\n        var ctx = SPScript.createContext();\r\n        describe(\"Members\", function() {\r\n            it(\"Should create the primary object you use to interact with the site\", function() {\r\n                if (!ctx) throw new Error(\"Context is null\");\r\n                ctx.should.have.property(\"webUrl\");\r\n                ctx.should.have.property(\"executeRequest\");\r\n                ctx.should.have.property(\"get\");\r\n                ctx.should.have.property(\"post\");\r\n                ctx.should.have.property(\"authorizedPost\");\r\n                // ctx.should.have.property(\"web\");\r\n                // ctx.should.have.property(\"lists\");\r\n                // ctx.should.have.property(\"search\");\r\n                // ctx.should.have.property(\"profiles\");\r\n            })\r\n        })\r\n\r\n        describe(\"ctx.get(url, opts)\", function() {\r\n            var promise;\r\n            before(function() {\r\n                promise = ctx.get(\"/lists?$select=Title\");\r\n            })\r\n            it(\"Should return a Promise\", function() {\r\n                if (!promise) throw new Error(\"Promise is null\");\r\n                promise.should.have.property(\"then\");\r\n            });\r\n            it(\"Should resolve to a JS object, not a JSON string\", function(done) {\r\n                promise.then(function(data) {\r\n                    data.should.have.property(\"d\");\r\n                    done();\r\n                })\r\n                .catch(err => done(err))\r\n                \r\n            });\r\n            it(\"Should return valid API results: ctx.get('/lists')\", function(done) {\r\n                promise\r\n                    .then(data => {\r\n                        data.should.have.property(\"d\");\r\n                        data.d.should.have.property(\"results\");\r\n                        data.d.results.should.be.an(\"array\");\r\n                        done();\r\n                    })\r\n                    .catch(err => done(err))\r\n            })\r\n        });\r\n\r\n        describe(\"ctx.getRequestDigest()\", function() {\r\n            it(\"Should resolve to a string request digest\", function(done) {\r\n                ctx.getRequestDigest().then(function(digest) {\r\n                    digest.should.be.a(\"string\");\r\n                    digest.should.not.be.empty;\r\n                    done();\r\n                })\r\n            })\r\n        })\r\n\t});\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/test/tests/contextTests.js","exports.run = function(SPScript, mode) {\r\n    console.log(\"SPScript Env: \" + SPScript._env);\r\n    var should = require(\"chai\").should();\r\n\r\n    describe(\"Global Namespaces\", function() {\r\n        it(\"Should have an _env property\", function() {\r\n            SPScript.should.have.property(\"_env\");\r\n            SPScript._env.should.be.a(\"string\");\r\n        })\r\n        it(\"Should have a utils namespace\", function() {\r\n            SPScript.should.not.be.null;\r\n            SPScript.should.have.property(\"utils\");\r\n        })\r\n\r\n        it(\"Should have a createContext method\", function() {\r\n            SPScript.should.have.property(\"createContext\");\r\n            SPScript.createContext.should.be.a(\"function\");\r\n        })\r\n    })\r\n    require(\"./utilsTests\").run(SPScript.utils);\r\n    require(\"./contextTests\").run(SPScript);\r\n    var ctx = SPScript.createContext();\r\n    require(\"./listTests\").run(ctx);\r\n\r\n};\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/test/tests/index.js","exports.run = function(dao) {\r\n    describe(\"var list = SPScript.createContext().lists(listname)\", function() {\r\n        this.timeout(10000);\r\n        var list = dao.lists(\"TestList\");\r\n        describe(\"list.info()\", function() {\r\n            var listInfo = null;\r\n            before(function(done) {\r\n                list.getInfo().then(function(info) {\r\n                    listInfo = info;\r\n                    done();\r\n                });\r\n            });\r\n            it(\"Should return a promise that resolves to list info\", function() {\r\n                listInfo.should.be.an(\"object\");\r\n            });\r\n            it(\"Should bring back list info like Title, ItemCount, and ListItemEntityTypeFullName\", function() {\r\n                listInfo.should.have.property(\"Title\");\r\n                listInfo.should.have.property(\"ItemCount\");\r\n                listInfo.should.have.property(\"ListItemEntityTypeFullName\");\r\n            });\r\n        });\r\n\r\n        describe(\"list.getItems()\", function() {\r\n            var items = null;\r\n            before(function(done) {\r\n                list.getItems().then(function(results) {\r\n                    items = results;\r\n                    done();\r\n                });\r\n            });\r\n\r\n            it(\"Should return a promise that resolves to an array of items\", function() {\r\n                items.should.be.an(\"array\");\r\n            });\r\n\r\n            it(\"Should return all the items in the list\", function(done) {\r\n                list.getInfo().then(function(listInfo) {\r\n                    items.length.should.equal(listInfo.ItemCount);\r\n                    done();\r\n                });\r\n            });\r\n        });\r\n\r\n        describe(\"list.getItems(odata)\", function() {\r\n            //Get items where BoolColumn == TRUE\r\n            var odata = \"$filter=MyStatus eq 'Green'\";\r\n            var items = null;\r\n            before(function(done) {\r\n                list.getItems(odata).then(function(results) {\r\n                    items = results;\r\n                    done();\r\n                });\r\n            });\r\n            it(\"Should return a promise that resolves to an array of items\", function() {\r\n                items.should.be.an(\"array\");\r\n            });\r\n            it(\"Should return only items that match the OData params\", function() {\r\n                items.forEach(function(item) {\r\n                    item.should.have.property(\"MyStatus\");\r\n                    item.MyStatus.should.equal(\"Green\");\r\n                });\r\n            });\r\n        });\r\n\r\n        describe(\"list.getItemById(id)\", function() {\r\n            var item = null;\r\n            var validId = -1;\r\n            before(function(done) {\r\n                list.getItems()\r\n                    .then(function(allItems) {\r\n                        validId = allItems[0].Id;\r\n                        return validId;\r\n                    })\r\n                    .then(function(id) {\r\n                        return list.getItemById(id);\r\n                    })\r\n                    .then(function(result) {\r\n                        item = result;\r\n                        done();\r\n                    });\r\n            });\r\n            it(\"Should return a promise that resolves to a single item\", function() {\r\n                item.should.be.an(\"object\");\r\n                item.should.have.property(\"Title\");\r\n            });\r\n            it(\"Should resolve an item with a matching ID\", function() {\r\n                item.should.have.property(\"Id\");\r\n                item.Id.should.equal(validId);\r\n            });\r\n            it(\"Should be able to return attachments using the optional odata query\", function(done) {\r\n                list.getItemById(validId, \"$expand=AttachmentFiles\").then(function(item) {\r\n                    item.should.have.property(\"AttachmentFiles\");\r\n                    item.AttachmentFiles.should.have.property(\"results\");\r\n                    item.AttachmentFiles.results.should.be.an(\"Array\");\r\n                    done();\r\n                })\r\n            })\r\n        });\r\n\r\n        describe(\"list.findItems(key, value)\", function() {\r\n            var matches = null;\r\n            before(function(done) {\r\n                list.findItems(\"MyStatus\", \"Green\").then(function(results) {\r\n                    matches = results;\r\n                    done();\r\n                });\r\n            });\r\n            it(\"Should return a promise that resolves to an array of list items\", function() {\r\n                matches.should.be.an(\"array\");\r\n                matches.should.not.be.empty;\r\n            });\r\n            it(\"Should only bring back items the match the key value query\", function() {\r\n                matches.forEach(function(item) {\r\n                    item.should.have.property(\"MyStatus\");\r\n                    item.MyStatus.should.equal(\"Green\");\r\n                });\r\n            });\r\n        });\r\n        describe(\"list.findItem(key, value)\", function() {\r\n            var match = null;\r\n            before(function(done) {\r\n                list.findItem(\"MyStatus\", \"Green\").then(function(result) {\r\n                    match = result;\r\n                    done();\r\n                });\r\n            });\r\n            it(\"Should resolve to one list item\", function() {\r\n                match.should.be.an(\"object\");\r\n            });\r\n            it(\"Should only bring back an item if it matches the key value query\", function() {\r\n                match.should.have.property(\"MyStatus\");\r\n                match.MyStatus.should.equal(\"Green\");\r\n            });\r\n        });\r\n\r\n        describe(\"list.addItem()\", function() {\r\n            var newItem = {\r\n                Title: \"Test Created Item\",\r\n                MyStatus: \"Red\"\r\n            };\r\n            var insertedItem = null;\r\n            before(function(done) {\r\n                list.addItem(newItem).then(function(result) {\r\n                    insertedItem = result;\r\n                    done();\r\n                }).catch(function(error) {\r\n                    console.log(error);\r\n                    done();\r\n                });\r\n            });\r\n            it(\"Should return a promise that resolves with the new list item\", function() {\r\n                insertedItem.should.not.be.null;\r\n                insertedItem.should.be.an(\"object\");\r\n                insertedItem.should.have.property(\"Id\");\r\n            });\r\n            it(\"Should save the item right away so it can be queried.\", function() {\r\n                list.getItemById(insertedItem.Id).then(function(foundItem) {\r\n                    foundItem.should.not.be.null;\r\n                    foundItem.should.have.property(\"Title\");\r\n                    foundItem.Title.should.equal(newItem.Title);\r\n                });\r\n            });\r\n            it(\"Should throw an error if a invalid field is set\", function(done) {\r\n                newItem.InvalidColumn = \"test\";\r\n                list.addItem(newItem)\r\n                    .then(function() {\r\n                        //supposed to fail\r\n                        (\"one\").should.equal(\"two\");\r\n                    })\r\n                    .catch(function(xhr, status, msg) {\r\n                        done();\r\n                    });\r\n            });\r\n        });\r\n\r\n        // var itemIdWithAttachment = null;\r\n        // var attachmentFilename = \"testAttachment.txt\";\r\n        // var attachmentContent = \"test content\";\r\n\r\n        // describe(\"list.addAttachment(id, filename, content)\", function() {\r\n\r\n        //     before(function(done) {\r\n        //         list.getItems(\"$orderby=Id\").then(function(items) {\r\n        //             itemIdWithAttachment = items[items.length - 1].Id;\r\n        //             return list.addAttachment(itemIdWithAttachment, attachmentFilename, attachmentContent);\r\n        //         }).then(function() {\r\n        //             done();\r\n        //         });\r\n        //     });\r\n        //     it(\"Should add an attachment file to the list item\", function(done) {\r\n        //         list.getItemById(itemIdWithAttachment, \"$expand=AttachmentFiles\").then(function(item){\r\n        //             item.should.have.property('AttachmentFiles');\r\n        //             item.AttachmentFiles.should.have.property('results');\r\n        //             item.AttachmentFiles.results.should.be.an('Array');\r\n        //             item.AttachmentFiles.results.should.not.be.empty;\r\n        //             done();\r\n        //         });\r\n        //     })\r\n        // });\r\n\r\n        // describe(\"list.deleteAttachment(id, filename)\", function() {\r\n        //     var getAttachment = function(id, filename) {\r\n        //         return list.getItemById(itemIdWithAttachment, \"$expand=AttachmentFiles\").then(function(item){\r\n        //             var attachments = item.AttachmentFiles.results;\r\n        //             return attachments.find(function(a) { return a.FileName === attachmentFilename});\r\n        //         });\r\n        //     };\r\n        //     before(function(done) {\r\n        //         getAttachment(itemIdWithAttachment, attachmentFilename).then(function(attachment) {\r\n        //             if (attachment) {\r\n        //                 return list.deleteAttachment(itemIdWithAttachment, attachmentFilename);\r\n        //             }\r\n        //             return false;\r\n        //         }).then(function(){\r\n        //             done();\r\n        //         }).catch(function(res) { \r\n        //             done();\r\n        //             console.log(\"REQUEST ERROR\")\r\n        //         });\r\n        //     });\r\n        //     it(\"Should delete the attachment\", function(done) {\r\n        //         getAttachment(itemIdWithAttachment, attachmentFilename).then(function(attachment) {\r\n        //             if (attachment) (\"attachment\").should.equal(\"null\");\r\n        //             done();\r\n        //         });\r\n        //     })\r\n        // });\r\n\r\n        describe(\"list.deleteItem(id)\", function() {\r\n            var itemToDelete = null;\r\n            before(function(done) {\r\n                list.getItems(\"$orderby=Id\").then(function(items) {\r\n                    itemToDelete = items[items.length - 1];\r\n                    return list.deleteItem(itemToDelete.Id);\r\n                }).then(function() {\r\n                    done();\r\n                });\r\n            });\r\n            it(\"Should delete that item\", function(done) {\r\n                list.getItemById(itemToDelete.Id)\r\n                    .then(function() {\r\n                        throw \"Should have failed because item has been deleted\";\r\n                    })\r\n                    .catch(function() {\r\n                        done();\r\n                    });\r\n            });\r\n            it(\"Should reject the promise if the item id can not be found\", function(done) {\r\n                list.deleteItem(99999999).then(function() {\r\n                        throw \"Should have failed because id doesnt exist\";\r\n                    })\r\n                    .catch(function() {\r\n                        done();\r\n                    })\r\n            });\r\n        });\r\n\r\n        describe(\"list.updateItem()\", function() {\r\n            var itemToUpdate = null;\r\n            var updates = {\r\n                Title: \"Updated Title\"\r\n            };\r\n            before(function(done) {\r\n                list.getItems(\"$orderby=Id desc\").then(function(items) {\r\n                    itemToUpdate = items[items.length - 1];\r\n                    done();\r\n                });\r\n            });\r\n            it(\"Should return a promise\", function(done) {\r\n                list.updateItem(itemToUpdate.Id, updates).then(function() {\r\n                    done();\r\n                });\r\n            });\r\n            it(\"Should update only the properties that were passed\", function(done) {\r\n                list.getItemById(itemToUpdate.Id).then(function(item) {\r\n                    item.should.have.property(\"Title\");\r\n                    item.Title.should.equal(updates.Title);\r\n                    done();\r\n                });\r\n            });\r\n        });\r\n\r\n        // describe(\"list.permissions.getRoleAssignments()\", permissionsTests.create(list));\r\n\r\n        // if (utils.isBrowser()) {\r\n        //     describe(\"list.permissions.check()\", permissionsTests.create(list, \"check\"));\r\n        // }\r\n\r\n        // describe(\"list.permissions.check(email)\", permissionsTests.create(list, \"check\", \"andrew@andrewpetersen.onmicrosoft.com\"))\r\n\r\n    });\r\n};\n\n\n// WEBPACK FOOTER //\n// ./src/test/tests/listTests.js","var should = require(\"chai\").should();\r\n\r\nexports.run = function(utils) {\r\n\tdescribe(\"var utils = SPScript.utils\", function() {\r\n        describe(\"utils.parseJSON(data)\", function() {\r\n            it(\"Should exist on the utils object\", function() {\r\n                utils.should.have.property(\"parseJSON\");\r\n                utils.parseJSON.should.be.a(\"function\");\r\n            })\r\n            it(\"Should take a string or an object and return an object\", function() {\r\n                var obj = { one: \"value of one\", two: \"value of two\" };\r\n                var jsonStr = JSON.stringify(obj);\r\n\r\n                var res1 = utils.parseJSON(obj);\r\n                res1.should.not.be.null;\r\n                res1.should.have.property(\"one\");\r\n                res1.one.should.equal(obj.one);\r\n\r\n                var res2 = utils.parseJSON(jsonStr);\r\n                res2.should.not.be.null;\r\n                res2.should.have.property(\"one\");\r\n                res2.one.should.equal(obj.one);\r\n            })\r\n        })\r\n\t})\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/test/tests/utilsTests.js","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return b64.length * 3 / 4 - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, j, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr(len * 3 / 4 - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/base64-js/index.js\n// module id = 25\n// module chunks = 0","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/buffer/index.js\n// module id = 26\n// module chunks = 0","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar used = []\n  , exports = module.exports = {};\n\n/*!\n * Chai version\n */\n\nexports.version = '1.10.0';\n\n/*!\n * Assertion Error\n */\n\nexports.AssertionError = require('assertion-error');\n\n/*!\n * Utils for plugins (not exported)\n */\n\nvar util = require('./chai/utils');\n\n/**\n * # .use(function)\n *\n * Provides a way to extend the internals of Chai\n *\n * @param {Function}\n * @returns {this} for chaining\n * @api public\n */\n\nexports.use = function (fn) {\n  if (!~used.indexOf(fn)) {\n    fn(this, util);\n    used.push(fn);\n  }\n\n  return this;\n};\n\n/*!\n * Configuration\n */\n\nvar config = require('./chai/config');\nexports.config = config;\n\n/*!\n * Primary `Assertion` prototype\n */\n\nvar assertion = require('./chai/assertion');\nexports.use(assertion);\n\n/*!\n * Core Assertions\n */\n\nvar core = require('./chai/core/assertions');\nexports.use(core);\n\n/*!\n * Expect interface\n */\n\nvar expect = require('./chai/interface/expect');\nexports.use(expect);\n\n/*!\n * Should interface\n */\n\nvar should = require('./chai/interface/should');\nexports.use(should);\n\n/*!\n * Assert interface\n */\n\nvar assert = require('./chai/interface/assert');\nexports.use(assert);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai.js\n// module id = 27\n// module chunks = 0","/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('./config');\nvar NOOP = function() { };\n\nmodule.exports = function (_chai, util) {\n  /*!\n   * Module dependencies.\n   */\n\n  var AssertionError = _chai.AssertionError\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  _chai.Assertion = Assertion;\n\n  /*!\n   * Assertion Constructor\n   *\n   * Creates object for chaining.\n   *\n   * @api private\n   */\n\n  function Assertion (obj, msg, stack) {\n    flag(this, 'ssfi', stack || arguments.callee);\n    flag(this, 'object', obj);\n    flag(this, 'message', msg);\n  }\n\n  Object.defineProperty(Assertion, 'includeStack', {\n    get: function() {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      return config.includeStack;\n    },\n    set: function(value) {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      config.includeStack = value;\n    }\n  });\n\n  Object.defineProperty(Assertion, 'showDiff', {\n    get: function() {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      return config.showDiff;\n    },\n    set: function(value) {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      config.showDiff = value;\n    }\n  });\n\n  Assertion.addProperty = function (name, fn) {\n    util.addProperty(this.prototype, name, fn);\n  };\n\n  Assertion.addMethod = function (name, fn) {\n    util.addMethod(this.prototype, name, fn);\n  };\n\n  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {\n    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  Assertion.addChainableNoop = function(name, fn) {\n    util.addChainableMethod(this.prototype, name, NOOP, fn);\n  };\n\n  Assertion.overwriteProperty = function (name, fn) {\n    util.overwriteProperty(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteMethod = function (name, fn) {\n    util.overwriteMethod(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {\n    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  /*!\n   * ### .assert(expression, message, negateMessage, expected, actual)\n   *\n   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n   *\n   * @name assert\n   * @param {Philosophical} expression to be tested\n   * @param {String or Function} message or function that returns message to display if fails\n   * @param {String or Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n   * @param {Mixed} expected value (remember to check for negation)\n   * @param {Mixed} actual (optional) will default to `this.obj`\n   * @api private\n   */\n\n  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {\n    var ok = util.test(this, arguments);\n    if (true !== showDiff) showDiff = false;\n    if (true !== config.showDiff) showDiff = false;\n\n    if (!ok) {\n      var msg = util.getMessage(this, arguments)\n        , actual = util.getActual(this, arguments);\n      throw new AssertionError(msg, {\n          actual: actual\n        , expected: expected\n        , showDiff: showDiff\n      }, (config.includeStack) ? this.assert : flag(this, 'ssfi'));\n    }\n  };\n\n  /*!\n   * ### ._obj\n   *\n   * Quick reference to stored `actual` value for plugin developers.\n   *\n   * @api private\n   */\n\n  Object.defineProperty(Assertion.prototype, '_obj',\n    { get: function () {\n        return flag(this, 'object');\n      }\n    , set: function (val) {\n        flag(this, 'object', val);\n      }\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/assertion.js\n// module id = 28\n// module chunks = 0","/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, _) {\n  var Assertion = chai.Assertion\n    , toString = Object.prototype.toString\n    , flag = _.flag;\n\n  /**\n   * ### Language Chains\n   *\n   * The following are provided as chainable getters to\n   * improve the readability of your assertions. They\n   * do not provide testing capabilities unless they\n   * have been overwritten by a plugin.\n   *\n   * **Chains**\n   *\n   * - to\n   * - be\n   * - been\n   * - is\n   * - that\n   * - and\n   * - has\n   * - have\n   * - with\n   * - at\n   * - of\n   * - same\n   *\n   * @name language chains\n   * @api public\n   */\n\n  [ 'to', 'be', 'been'\n  , 'is', 'and', 'has', 'have'\n  , 'with', 'that', 'at'\n  , 'of', 'same' ].forEach(function (chain) {\n    Assertion.addProperty(chain, function () {\n      return this;\n    });\n  });\n\n  /**\n   * ### .not\n   *\n   * Negates any of assertions following in the chain.\n   *\n   *     expect(foo).to.not.equal('bar');\n   *     expect(goodFn).to.not.throw(Error);\n   *     expect({ foo: 'baz' }).to.have.property('foo')\n   *       .and.not.equal('bar');\n   *\n   * @name not\n   * @api public\n   */\n\n  Assertion.addProperty('not', function () {\n    flag(this, 'negate', true);\n  });\n\n  /**\n   * ### .deep\n   *\n   * Sets the `deep` flag, later used by the `equal` and\n   * `property` assertions.\n   *\n   *     expect(foo).to.deep.equal({ bar: 'baz' });\n   *     expect({ foo: { bar: { baz: 'quux' } } })\n   *       .to.have.deep.property('foo.bar.baz', 'quux');\n   *\n   * @name deep\n   * @api public\n   */\n\n  Assertion.addProperty('deep', function () {\n    flag(this, 'deep', true);\n  });\n\n  /**\n   * ### .a(type)\n   *\n   * The `a` and `an` assertions are aliases that can be\n   * used either as language chains or to assert a value's\n   * type.\n   *\n   *     // typeof\n   *     expect('test').to.be.a('string');\n   *     expect({ foo: 'bar' }).to.be.an('object');\n   *     expect(null).to.be.a('null');\n   *     expect(undefined).to.be.an('undefined');\n   *\n   *     // language chain\n   *     expect(foo).to.be.an.instanceof(Foo);\n   *\n   * @name a\n   * @alias an\n   * @param {String} type\n   * @param {String} message _optional_\n   * @api public\n   */\n\n  function an (type, msg) {\n    if (msg) flag(this, 'message', msg);\n    type = type.toLowerCase();\n    var obj = flag(this, 'object')\n      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';\n\n    this.assert(\n        type === _.type(obj)\n      , 'expected #{this} to be ' + article + type\n      , 'expected #{this} not to be ' + article + type\n    );\n  }\n\n  Assertion.addChainableMethod('an', an);\n  Assertion.addChainableMethod('a', an);\n\n  /**\n   * ### .include(value)\n   *\n   * The `include` and `contain` assertions can be used as either property\n   * based language chains or as methods to assert the inclusion of an object\n   * in an array or a substring in a string. When used as language chains,\n   * they toggle the `contain` flag for the `keys` assertion.\n   *\n   *     expect([1,2,3]).to.include(2);\n   *     expect('foobar').to.contain('foo');\n   *     expect({ foo: 'bar', hello: 'universe' }).to.include.keys('foo');\n   *\n   * @name include\n   * @alias contain\n   * @param {Object|String|Number} obj\n   * @param {String} message _optional_\n   * @api public\n   */\n\n  function includeChainingBehavior () {\n    flag(this, 'contains', true);\n  }\n\n  function include (val, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var expected = false;\n    if (_.type(obj) === 'array' && _.type(val) === 'object') {\n      for (var i in obj) {\n        if (_.eql(obj[i], val)) {\n          expected = true;\n          break;\n        }\n      }\n    } else if (_.type(val) === 'object') {\n      if (!flag(this, 'negate')) {\n        for (var k in val) new Assertion(obj).property(k, val[k]);\n        return;\n      }\n      var subset = {}\n      for (var k in val) subset[k] = obj[k]\n      expected = _.eql(subset, val);\n    } else {\n      expected = obj && ~obj.indexOf(val)\n    }\n    this.assert(\n        expected\n      , 'expected #{this} to include ' + _.inspect(val)\n      , 'expected #{this} to not include ' + _.inspect(val));\n  }\n\n  Assertion.addChainableMethod('include', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contain', include, includeChainingBehavior);\n\n  /**\n   * ### .ok\n   *\n   * Asserts that the target is truthy.\n   *\n   *     expect('everthing').to.be.ok;\n   *     expect(1).to.be.ok;\n   *     expect(false).to.not.be.ok;\n   *     expect(undefined).to.not.be.ok;\n   *     expect(null).to.not.be.ok;\n   *\n   * Can also be used as a function, which prevents some linter errors.\n   *\n   *     expect('everthing').to.be.ok();\n   *     \n   * @name ok\n   * @api public\n   */\n\n  Assertion.addChainableNoop('ok', function () {\n    this.assert(\n        flag(this, 'object')\n      , 'expected #{this} to be truthy'\n      , 'expected #{this} to be falsy');\n  });\n\n  /**\n   * ### .true\n   *\n   * Asserts that the target is `true`.\n   *\n   *     expect(true).to.be.true;\n   *     expect(1).to.not.be.true;\n   *\n   * Can also be used as a function, which prevents some linter errors.\n   *\n   *     expect(true).to.be.true();\n   *\n   * @name true\n   * @api public\n   */\n\n  Assertion.addChainableNoop('true', function () {\n    this.assert(\n        true === flag(this, 'object')\n      , 'expected #{this} to be true'\n      , 'expected #{this} to be false'\n      , this.negate ? false : true\n    );\n  });\n\n  /**\n   * ### .false\n   *\n   * Asserts that the target is `false`.\n   *\n   *     expect(false).to.be.false;\n   *     expect(0).to.not.be.false;\n   *\n   * Can also be used as a function, which prevents some linter errors.\n   *\n   *     expect(false).to.be.false();\n   *\n   * @name false\n   * @api public\n   */\n\n  Assertion.addChainableNoop('false', function () {\n    this.assert(\n        false === flag(this, 'object')\n      , 'expected #{this} to be false'\n      , 'expected #{this} to be true'\n      , this.negate ? true : false\n    );\n  });\n\n  /**\n   * ### .null\n   *\n   * Asserts that the target is `null`.\n   *\n   *     expect(null).to.be.null;\n   *     expect(undefined).not.to.be.null;\n   *\n   * Can also be used as a function, which prevents some linter errors.\n   *\n   *     expect(null).to.be.null();\n   *\n   * @name null\n   * @api public\n   */\n\n  Assertion.addChainableNoop('null', function () {\n    this.assert(\n        null === flag(this, 'object')\n      , 'expected #{this} to be null'\n      , 'expected #{this} not to be null'\n    );\n  });\n\n  /**\n   * ### .undefined\n   *\n   * Asserts that the target is `undefined`.\n   *\n   *     expect(undefined).to.be.undefined;\n   *     expect(null).to.not.be.undefined;\n   *\n   * Can also be used as a function, which prevents some linter errors.\n   *\n   *     expect(undefined).to.be.undefined();\n   *\n   * @name undefined\n   * @api public\n   */\n\n  Assertion.addChainableNoop('undefined', function () {\n    this.assert(\n        undefined === flag(this, 'object')\n      , 'expected #{this} to be undefined'\n      , 'expected #{this} not to be undefined'\n    );\n  });\n\n  /**\n   * ### .exist\n   *\n   * Asserts that the target is neither `null` nor `undefined`.\n   *\n   *     var foo = 'hi'\n   *       , bar = null\n   *       , baz;\n   *\n   *     expect(foo).to.exist;\n   *     expect(bar).to.not.exist;\n   *     expect(baz).to.not.exist;\n   *\n   * Can also be used as a function, which prevents some linter errors.\n   *\n   *     expect(foo).to.exist();\n   *\n   * @name exist\n   * @api public\n   */\n\n  Assertion.addChainableNoop('exist', function () {\n    this.assert(\n        null != flag(this, 'object')\n      , 'expected #{this} to exist'\n      , 'expected #{this} to not exist'\n    );\n  });\n\n\n  /**\n   * ### .empty\n   *\n   * Asserts that the target's length is `0`. For arrays, it checks\n   * the `length` property. For objects, it gets the count of\n   * enumerable keys.\n   *\n   *     expect([]).to.be.empty;\n   *     expect('').to.be.empty;\n   *     expect({}).to.be.empty;\n   *\n   * Can also be used as a function, which prevents some linter errors.\n   *\n   *     expect([]).to.be.empty();\n   *\n   * @name empty\n   * @api public\n   */\n\n  Assertion.addChainableNoop('empty', function () {\n    var obj = flag(this, 'object')\n      , expected = obj;\n\n    if (Array.isArray(obj) || 'string' === typeof object) {\n      expected = obj.length;\n    } else if (typeof obj === 'object') {\n      expected = Object.keys(obj).length;\n    }\n\n    this.assert(\n        !expected\n      , 'expected #{this} to be empty'\n      , 'expected #{this} not to be empty'\n    );\n  });\n\n  /**\n   * ### .arguments\n   *\n   * Asserts that the target is an arguments object.\n   *\n   *     function test () {\n   *       expect(arguments).to.be.arguments;\n   *     }\n   *\n   * Can also be used as a function, which prevents some linter errors.\n   *\n   *     function test () {\n   *       expect(arguments).to.be.arguments();\n   *     }\n   *\n   * @name arguments\n   * @alias Arguments\n   * @api public\n   */\n\n  function checkArguments () {\n    var obj = flag(this, 'object')\n      , type = Object.prototype.toString.call(obj);\n    this.assert(\n        '[object Arguments]' === type\n      , 'expected #{this} to be arguments but got ' + type\n      , 'expected #{this} to not be arguments'\n    );\n  }\n\n  Assertion.addChainableNoop('arguments', checkArguments);\n  Assertion.addChainableNoop('Arguments', checkArguments);\n\n  /**\n   * ### .equal(value)\n   *\n   * Asserts that the target is strictly equal (`===`) to `value`.\n   * Alternately, if the `deep` flag is set, asserts that\n   * the target is deeply equal to `value`.\n   *\n   *     expect('hello').to.equal('hello');\n   *     expect(42).to.equal(42);\n   *     expect(1).to.not.equal(true);\n   *     expect({ foo: 'bar' }).to.not.equal({ foo: 'bar' });\n   *     expect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' });\n   *\n   * @name equal\n   * @alias equals\n   * @alias eq\n   * @alias deep.equal\n   * @param {Mixed} value\n   * @param {String} message _optional_\n   * @api public\n   */\n\n  function assertEqual (val, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'deep')) {\n      return this.eql(val);\n    } else {\n      this.assert(\n          val === obj\n        , 'expected #{this} to equal #{exp}'\n        , 'expected #{this} to not equal #{exp}'\n        , val\n        , this._obj\n        , true\n      );\n    }\n  }\n\n  Assertion.addMethod('equal', assertEqual);\n  Assertion.addMethod('equals', assertEqual);\n  Assertion.addMethod('eq', assertEqual);\n\n  /**\n   * ### .eql(value)\n   *\n   * Asserts that the target is deeply equal to `value`.\n   *\n   *     expect({ foo: 'bar' }).to.eql({ foo: 'bar' });\n   *     expect([ 1, 2, 3 ]).to.eql([ 1, 2, 3 ]);\n   *\n   * @name eql\n   * @alias eqls\n   * @param {Mixed} value\n   * @param {String} message _optional_\n   * @api public\n   */\n\n  function assertEql(obj, msg) {\n    if (msg) flag(this, 'message', msg);\n    this.assert(\n        _.eql(obj, flag(this, 'object'))\n      , 'expected #{this} to deeply equal #{exp}'\n      , 'expected #{this} to not deeply equal #{exp}'\n      , obj\n      , this._obj\n      , true\n    );\n  }\n\n  Assertion.addMethod('eql', assertEql);\n  Assertion.addMethod('eqls', assertEql);\n\n  /**\n   * ### .above(value)\n   *\n   * Asserts that the target is greater than `value`.\n   *\n   *     expect(10).to.be.above(5);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a minimum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.above(2);\n   *     expect([ 1, 2, 3 ]).to.have.length.above(2);\n   *\n   * @name above\n   * @alias gt\n   * @alias greaterThan\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @api public\n   */\n\n  function assertAbove (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len > n\n        , 'expected #{this} to have a length above #{exp} but got #{act}'\n        , 'expected #{this} to not have a length above #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj > n\n        , 'expected #{this} to be above ' + n\n        , 'expected #{this} to be at most ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('above', assertAbove);\n  Assertion.addMethod('gt', assertAbove);\n  Assertion.addMethod('greaterThan', assertAbove);\n\n  /**\n   * ### .least(value)\n   *\n   * Asserts that the target is greater than or equal to `value`.\n   *\n   *     expect(10).to.be.at.least(10);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a minimum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.of.at.least(2);\n   *     expect([ 1, 2, 3 ]).to.have.length.of.at.least(3);\n   *\n   * @name least\n   * @alias gte\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @api public\n   */\n\n  function assertLeast (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len >= n\n        , 'expected #{this} to have a length at least #{exp} but got #{act}'\n        , 'expected #{this} to have a length below #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj >= n\n        , 'expected #{this} to be at least ' + n\n        , 'expected #{this} to be below ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('least', assertLeast);\n  Assertion.addMethod('gte', assertLeast);\n\n  /**\n   * ### .below(value)\n   *\n   * Asserts that the target is less than `value`.\n   *\n   *     expect(5).to.be.below(10);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a maximum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.below(4);\n   *     expect([ 1, 2, 3 ]).to.have.length.below(4);\n   *\n   * @name below\n   * @alias lt\n   * @alias lessThan\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @api public\n   */\n\n  function assertBelow (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len < n\n        , 'expected #{this} to have a length below #{exp} but got #{act}'\n        , 'expected #{this} to not have a length below #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj < n\n        , 'expected #{this} to be below ' + n\n        , 'expected #{this} to be at least ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('below', assertBelow);\n  Assertion.addMethod('lt', assertBelow);\n  Assertion.addMethod('lessThan', assertBelow);\n\n  /**\n   * ### .most(value)\n   *\n   * Asserts that the target is less than or equal to `value`.\n   *\n   *     expect(5).to.be.at.most(5);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a maximum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.of.at.most(4);\n   *     expect([ 1, 2, 3 ]).to.have.length.of.at.most(3);\n   *\n   * @name most\n   * @alias lte\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @api public\n   */\n\n  function assertMost (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len <= n\n        , 'expected #{this} to have a length at most #{exp} but got #{act}'\n        , 'expected #{this} to have a length above #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj <= n\n        , 'expected #{this} to be at most ' + n\n        , 'expected #{this} to be above ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('most', assertMost);\n  Assertion.addMethod('lte', assertMost);\n\n  /**\n   * ### .within(start, finish)\n   *\n   * Asserts that the target is within a range.\n   *\n   *     expect(7).to.be.within(5,10);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a length range. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.within(2,4);\n   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);\n   *\n   * @name within\n   * @param {Number} start lowerbound inclusive\n   * @param {Number} finish upperbound inclusive\n   * @param {String} message _optional_\n   * @api public\n   */\n\n  Assertion.addMethod('within', function (start, finish, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , range = start + '..' + finish;\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len >= start && len <= finish\n        , 'expected #{this} to have a length within ' + range\n        , 'expected #{this} to not have a length within ' + range\n      );\n    } else {\n      this.assert(\n          obj >= start && obj <= finish\n        , 'expected #{this} to be within ' + range\n        , 'expected #{this} to not be within ' + range\n      );\n    }\n  });\n\n  /**\n   * ### .instanceof(constructor)\n   *\n   * Asserts that the target is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , Chai = new Tea('chai');\n   *\n   *     expect(Chai).to.be.an.instanceof(Tea);\n   *     expect([ 1, 2, 3 ]).to.be.instanceof(Array);\n   *\n   * @name instanceof\n   * @param {Constructor} constructor\n   * @param {String} message _optional_\n   * @alias instanceOf\n   * @api public\n   */\n\n  function assertInstanceOf (constructor, msg) {\n    if (msg) flag(this, 'message', msg);\n    var name = _.getName(constructor);\n    this.assert(\n        flag(this, 'object') instanceof constructor\n      , 'expected #{this} to be an instance of ' + name\n      , 'expected #{this} to not be an instance of ' + name\n    );\n  };\n\n  Assertion.addMethod('instanceof', assertInstanceOf);\n  Assertion.addMethod('instanceOf', assertInstanceOf);\n\n  /**\n   * ### .property(name, [value])\n   *\n   * Asserts that the target has a property `name`, optionally asserting that\n   * the value of that property is strictly equal to  `value`.\n   * If the `deep` flag is set, you can use dot- and bracket-notation for deep\n   * references into objects and arrays.\n   *\n   *     // simple referencing\n   *     var obj = { foo: 'bar' };\n   *     expect(obj).to.have.property('foo');\n   *     expect(obj).to.have.property('foo', 'bar');\n   *\n   *     // deep referencing\n   *     var deepObj = {\n   *         green: { tea: 'matcha' }\n   *       , teas: [ 'chai', 'matcha', { tea: 'konacha' } ]\n   *     };\n\n   *     expect(deepObj).to.have.deep.property('green.tea', 'matcha');\n   *     expect(deepObj).to.have.deep.property('teas[1]', 'matcha');\n   *     expect(deepObj).to.have.deep.property('teas[2].tea', 'konacha');\n   *\n   * You can also use an array as the starting point of a `deep.property`\n   * assertion, or traverse nested arrays.\n   *\n   *     var arr = [\n   *         [ 'chai', 'matcha', 'konacha' ]\n   *       , [ { tea: 'chai' }\n   *         , { tea: 'matcha' }\n   *         , { tea: 'konacha' } ]\n   *     ];\n   *\n   *     expect(arr).to.have.deep.property('[0][1]', 'matcha');\n   *     expect(arr).to.have.deep.property('[1][2].tea', 'konacha');\n   *\n   * Furthermore, `property` changes the subject of the assertion\n   * to be the value of that property from the original object. This\n   * permits for further chainable assertions on that property.\n   *\n   *     expect(obj).to.have.property('foo')\n   *       .that.is.a('string');\n   *     expect(deepObj).to.have.property('green')\n   *       .that.is.an('object')\n   *       .that.deep.equals({ tea: 'matcha' });\n   *     expect(deepObj).to.have.property('teas')\n   *       .that.is.an('array')\n   *       .with.deep.property('[2]')\n   *         .that.deep.equals({ tea: 'konacha' });\n   *\n   * @name property\n   * @alias deep.property\n   * @param {String} name\n   * @param {Mixed} value (optional)\n   * @param {String} message _optional_\n   * @returns value of property for chaining\n   * @api public\n   */\n\n  Assertion.addMethod('property', function (name, val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var descriptor = flag(this, 'deep') ? 'deep property ' : 'property '\n      , negate = flag(this, 'negate')\n      , obj = flag(this, 'object')\n      , value = flag(this, 'deep')\n        ? _.getPathValue(name, obj)\n        : obj[name];\n\n    if (negate && undefined !== val) {\n      if (undefined === value) {\n        msg = (msg != null) ? msg + ': ' : '';\n        throw new Error(msg + _.inspect(obj) + ' has no ' + descriptor + _.inspect(name));\n      }\n    } else {\n      this.assert(\n          undefined !== value\n        , 'expected #{this} to have a ' + descriptor + _.inspect(name)\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name));\n    }\n\n    if (undefined !== val) {\n      this.assert(\n          val === value\n        , 'expected #{this} to have a ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + _.inspect(name) + ' of #{act}'\n        , val\n        , value\n      );\n    }\n\n    flag(this, 'object', value);\n  });\n\n\n  /**\n   * ### .ownProperty(name)\n   *\n   * Asserts that the target has an own property `name`.\n   *\n   *     expect('test').to.have.ownProperty('length');\n   *\n   * @name ownProperty\n   * @alias haveOwnProperty\n   * @param {String} name\n   * @param {String} message _optional_\n   * @api public\n   */\n\n  function assertOwnProperty (name, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        obj.hasOwnProperty(name)\n      , 'expected #{this} to have own property ' + _.inspect(name)\n      , 'expected #{this} to not have own property ' + _.inspect(name)\n    );\n  }\n\n  Assertion.addMethod('ownProperty', assertOwnProperty);\n  Assertion.addMethod('haveOwnProperty', assertOwnProperty);\n\n  /**\n   * ### .length(value)\n   *\n   * Asserts that the target's `length` property has\n   * the expected value.\n   *\n   *     expect([ 1, 2, 3]).to.have.length(3);\n   *     expect('foobar').to.have.length(6);\n   *\n   * Can also be used as a chain precursor to a value\n   * comparison for the length property.\n   *\n   *     expect('foo').to.have.length.above(2);\n   *     expect([ 1, 2, 3 ]).to.have.length.above(2);\n   *     expect('foo').to.have.length.below(4);\n   *     expect([ 1, 2, 3 ]).to.have.length.below(4);\n   *     expect('foo').to.have.length.within(2,4);\n   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);\n   *\n   * @name length\n   * @alias lengthOf\n   * @param {Number} length\n   * @param {String} message _optional_\n   * @api public\n   */\n\n  function assertLengthChain () {\n    flag(this, 'doLength', true);\n  }\n\n  function assertLength (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    new Assertion(obj, msg).to.have.property('length');\n    var len = obj.length;\n\n    this.assert(\n        len == n\n      , 'expected #{this} to have a length of #{exp} but got #{act}'\n      , 'expected #{this} to not have a length of #{act}'\n      , n\n      , len\n    );\n  }\n\n  Assertion.addChainableMethod('length', assertLength, assertLengthChain);\n  Assertion.addMethod('lengthOf', assertLength);\n\n  /**\n   * ### .match(regexp)\n   *\n   * Asserts that the target matches a regular expression.\n   *\n   *     expect('foobar').to.match(/^foo/);\n   *\n   * @name match\n   * @param {RegExp} RegularExpression\n   * @param {String} message _optional_\n   * @api public\n   */\n\n  Assertion.addMethod('match', function (re, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        re.exec(obj)\n      , 'expected #{this} to match ' + re\n      , 'expected #{this} not to match ' + re\n    );\n  });\n\n  /**\n   * ### .string(string)\n   *\n   * Asserts that the string target contains another string.\n   *\n   *     expect('foobar').to.have.string('bar');\n   *\n   * @name string\n   * @param {String} string\n   * @param {String} message _optional_\n   * @api public\n   */\n\n  Assertion.addMethod('string', function (str, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    new Assertion(obj, msg).is.a('string');\n\n    this.assert(\n        ~obj.indexOf(str)\n      , 'expected #{this} to contain ' + _.inspect(str)\n      , 'expected #{this} to not contain ' + _.inspect(str)\n    );\n  });\n\n\n  /**\n   * ### .keys(key1, [key2], [...])\n   *\n   * Asserts that the target has exactly the given keys, or\n   * asserts the inclusion of some keys when using the\n   * `include` or `contain` modifiers.\n   *\n   *     expect({ foo: 1, bar: 2 }).to.have.keys(['foo', 'bar']);\n   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.keys('foo', 'bar');\n   *\n   * @name keys\n   * @alias key\n   * @param {String...|Array} keys\n   * @api public\n   */\n\n  function assertKeys (keys) {\n    var obj = flag(this, 'object')\n      , str\n      , ok = true;\n\n    keys = keys instanceof Array\n      ? keys\n      : Array.prototype.slice.call(arguments);\n\n    if (!keys.length) throw new Error('keys required');\n\n    var actual = Object.keys(obj)\n      , expected = keys\n      , len = keys.length;\n\n    // Inclusion\n    ok = keys.every(function(key){\n      return ~actual.indexOf(key);\n    });\n\n    // Strict\n    if (!flag(this, 'negate') && !flag(this, 'contains')) {\n      ok = ok && keys.length == actual.length;\n    }\n\n    // Key string\n    if (len > 1) {\n      keys = keys.map(function(key){\n        return _.inspect(key);\n      });\n      var last = keys.pop();\n      str = keys.join(', ') + ', and ' + last;\n    } else {\n      str = _.inspect(keys[0]);\n    }\n\n    // Form\n    str = (len > 1 ? 'keys ' : 'key ') + str;\n\n    // Have / include\n    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;\n\n    // Assertion\n    this.assert(\n        ok\n      , 'expected #{this} to ' + str\n      , 'expected #{this} to not ' + str\n      , expected.sort()\n      , actual.sort()\n      , true\n    );\n  }\n\n  Assertion.addMethod('keys', assertKeys);\n  Assertion.addMethod('key', assertKeys);\n\n  /**\n   * ### .throw(constructor)\n   *\n   * Asserts that the function target will throw a specific error, or specific type of error\n   * (as determined using `instanceof`), optionally with a RegExp or string inclusion test\n   * for the error's message.\n   *\n   *     var err = new ReferenceError('This is a bad function.');\n   *     var fn = function () { throw err; }\n   *     expect(fn).to.throw(ReferenceError);\n   *     expect(fn).to.throw(Error);\n   *     expect(fn).to.throw(/bad function/);\n   *     expect(fn).to.not.throw('good function');\n   *     expect(fn).to.throw(ReferenceError, /bad function/);\n   *     expect(fn).to.throw(err);\n   *     expect(fn).to.not.throw(new RangeError('Out of range.'));\n   *\n   * Please note that when a throw expectation is negated, it will check each\n   * parameter independently, starting with error constructor type. The appropriate way\n   * to check for the existence of a type of error but for a message that does not match\n   * is to use `and`.\n   *\n   *     expect(fn).to.throw(ReferenceError)\n   *        .and.not.throw(/good function/);\n   *\n   * @name throw\n   * @alias throws\n   * @alias Throw\n   * @param {ErrorConstructor} constructor\n   * @param {String|RegExp} expected error message\n   * @param {String} message _optional_\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @returns error for chaining (null if no error)\n   * @api public\n   */\n\n  function assertThrows (constructor, errMsg, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    new Assertion(obj, msg).is.a('function');\n\n    var thrown = false\n      , desiredError = null\n      , name = null\n      , thrownError = null;\n\n    if (arguments.length === 0) {\n      errMsg = null;\n      constructor = null;\n    } else if (constructor && (constructor instanceof RegExp || 'string' === typeof constructor)) {\n      errMsg = constructor;\n      constructor = null;\n    } else if (constructor && constructor instanceof Error) {\n      desiredError = constructor;\n      constructor = null;\n      errMsg = null;\n    } else if (typeof constructor === 'function') {\n      name = constructor.prototype.name || constructor.name;\n      if (name === 'Error' && constructor !== Error) {\n        name = (new constructor()).name;\n      }\n    } else {\n      constructor = null;\n    }\n\n    try {\n      obj();\n    } catch (err) {\n      // first, check desired error\n      if (desiredError) {\n        this.assert(\n            err === desiredError\n          , 'expected #{this} to throw #{exp} but #{act} was thrown'\n          , 'expected #{this} to not throw #{exp}'\n          , (desiredError instanceof Error ? desiredError.toString() : desiredError)\n          , (err instanceof Error ? err.toString() : err)\n        );\n\n        flag(this, 'object', err);\n        return this;\n      }\n\n      // next, check constructor\n      if (constructor) {\n        this.assert(\n            err instanceof constructor\n          , 'expected #{this} to throw #{exp} but #{act} was thrown'\n          , 'expected #{this} to not throw #{exp} but #{act} was thrown'\n          , name\n          , (err instanceof Error ? err.toString() : err)\n        );\n\n        if (!errMsg) {\n          flag(this, 'object', err);\n          return this;\n        }\n      }\n\n      // next, check message\n      var message = 'object' === _.type(err) && \"message\" in err\n        ? err.message\n        : '' + err;\n\n      if ((message != null) && errMsg && errMsg instanceof RegExp) {\n        this.assert(\n            errMsg.exec(message)\n          , 'expected #{this} to throw error matching #{exp} but got #{act}'\n          , 'expected #{this} to throw error not matching #{exp}'\n          , errMsg\n          , message\n        );\n\n        flag(this, 'object', err);\n        return this;\n      } else if ((message != null) && errMsg && 'string' === typeof errMsg) {\n        this.assert(\n            ~message.indexOf(errMsg)\n          , 'expected #{this} to throw error including #{exp} but got #{act}'\n          , 'expected #{this} to throw error not including #{act}'\n          , errMsg\n          , message\n        );\n\n        flag(this, 'object', err);\n        return this;\n      } else {\n        thrown = true;\n        thrownError = err;\n      }\n    }\n\n    var actuallyGot = ''\n      , expectedThrown = name !== null\n        ? name\n        : desiredError\n          ? '#{exp}' //_.inspect(desiredError)\n          : 'an error';\n\n    if (thrown) {\n      actuallyGot = ' but #{act} was thrown'\n    }\n\n    this.assert(\n        thrown === true\n      , 'expected #{this} to throw ' + expectedThrown + actuallyGot\n      , 'expected #{this} to not throw ' + expectedThrown + actuallyGot\n      , (desiredError instanceof Error ? desiredError.toString() : desiredError)\n      , (thrownError instanceof Error ? thrownError.toString() : thrownError)\n    );\n\n    flag(this, 'object', thrownError);\n  };\n\n  Assertion.addMethod('throw', assertThrows);\n  Assertion.addMethod('throws', assertThrows);\n  Assertion.addMethod('Throw', assertThrows);\n\n  /**\n   * ### .respondTo(method)\n   *\n   * Asserts that the object or class target will respond to a method.\n   *\n   *     Klass.prototype.bar = function(){};\n   *     expect(Klass).to.respondTo('bar');\n   *     expect(obj).to.respondTo('bar');\n   *\n   * To check if a constructor will respond to a static function,\n   * set the `itself` flag.\n   *\n   *     Klass.baz = function(){};\n   *     expect(Klass).itself.to.respondTo('baz');\n   *\n   * @name respondTo\n   * @param {String} method\n   * @param {String} message _optional_\n   * @api public\n   */\n\n  Assertion.addMethod('respondTo', function (method, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , itself = flag(this, 'itself')\n      , context = ('function' === _.type(obj) && !itself)\n        ? obj.prototype[method]\n        : obj[method];\n\n    this.assert(\n        'function' === typeof context\n      , 'expected #{this} to respond to ' + _.inspect(method)\n      , 'expected #{this} to not respond to ' + _.inspect(method)\n    );\n  });\n\n  /**\n   * ### .itself\n   *\n   * Sets the `itself` flag, later used by the `respondTo` assertion.\n   *\n   *     function Foo() {}\n   *     Foo.bar = function() {}\n   *     Foo.prototype.baz = function() {}\n   *\n   *     expect(Foo).itself.to.respondTo('bar');\n   *     expect(Foo).itself.not.to.respondTo('baz');\n   *\n   * @name itself\n   * @api public\n   */\n\n  Assertion.addProperty('itself', function () {\n    flag(this, 'itself', true);\n  });\n\n  /**\n   * ### .satisfy(method)\n   *\n   * Asserts that the target passes a given truth test.\n   *\n   *     expect(1).to.satisfy(function(num) { return num > 0; });\n   *\n   * @name satisfy\n   * @param {Function} matcher\n   * @param {String} message _optional_\n   * @api public\n   */\n\n  Assertion.addMethod('satisfy', function (matcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var result = matcher(obj);\n    this.assert(\n        result\n      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)\n      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)\n      , this.negate ? false : true\n      , result\n    );\n  });\n\n  /**\n   * ### .closeTo(expected, delta)\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     expect(1.5).to.be.closeTo(1, 0.5);\n   *\n   * @name closeTo\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message _optional_\n   * @api public\n   */\n\n  Assertion.addMethod('closeTo', function (expected, delta, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n\n    new Assertion(obj, msg).is.a('number');\n    if (_.type(expected) !== 'number' || _.type(delta) !== 'number') {\n      throw new Error('the arguments to closeTo must be numbers');\n    }\n\n    this.assert(\n        Math.abs(obj - expected) <= delta\n      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta\n      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta\n    );\n  });\n\n  function isSubsetOf(subset, superset, cmp) {\n    return subset.every(function(elem) {\n      if (!cmp) return superset.indexOf(elem) !== -1;\n\n      return superset.some(function(elem2) {\n        return cmp(elem, elem2);\n      });\n    })\n  }\n\n  /**\n   * ### .members(set)\n   *\n   * Asserts that the target is a superset of `set`,\n   * or that the target and `set` have the same strictly-equal (===) members.\n   * Alternately, if the `deep` flag is set, set members are compared for deep\n   * equality.\n   *\n   *     expect([1, 2, 3]).to.include.members([3, 2]);\n   *     expect([1, 2, 3]).to.not.include.members([3, 2, 8]);\n   *\n   *     expect([4, 2]).to.have.members([2, 4]);\n   *     expect([5, 2]).to.not.have.members([5, 2, 1]);\n   *\n   *     expect([{ id: 1 }]).to.deep.include.members([{ id: 1 }]);\n   *\n   * @name members\n   * @param {Array} set\n   * @param {String} message _optional_\n   * @api public\n   */\n\n  Assertion.addMethod('members', function (subset, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n\n    new Assertion(obj).to.be.an('array');\n    new Assertion(subset).to.be.an('array');\n\n    var cmp = flag(this, 'deep') ? _.eql : undefined;\n\n    if (flag(this, 'contains')) {\n      return this.assert(\n          isSubsetOf(subset, obj, cmp)\n        , 'expected #{this} to be a superset of #{act}'\n        , 'expected #{this} to not be a superset of #{act}'\n        , obj\n        , subset\n      );\n    }\n\n    this.assert(\n        isSubsetOf(obj, subset, cmp) && isSubsetOf(subset, obj, cmp)\n        , 'expected #{this} to have the same members as #{act}'\n        , 'expected #{this} to not have the same members as #{act}'\n        , obj\n        , subset\n    );\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/core/assertions.js\n// module id = 29\n// module chunks = 0","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n\nmodule.exports = function (chai, util) {\n\n  /*!\n   * Chai dependencies.\n   */\n\n  var Assertion = chai.Assertion\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  /**\n   * ### assert(expression, message)\n   *\n   * Write your own test expressions.\n   *\n   *     assert('foo' !== 'bar', 'foo is not bar');\n   *     assert(Array.isArray([]), 'empty arrays are arrays');\n   *\n   * @param {Mixed} expression to test for truthiness\n   * @param {String} message to display on error\n   * @name assert\n   * @api public\n   */\n\n  var assert = chai.assert = function (express, errmsg) {\n    var test = new Assertion(null, null, chai.assert);\n    test.assert(\n        express\n      , errmsg\n      , '[ negation message unavailable ]'\n    );\n  };\n\n  /**\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure. Node.js `assert` module-compatible.\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @api public\n   */\n\n  assert.fail = function (actual, expected, message, operator) {\n    message = message || 'assert.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, assert.fail);\n  };\n\n  /**\n   * ### .ok(object, [message])\n   *\n   * Asserts that `object` is truthy.\n   *\n   *     assert.ok('everything', 'everything is ok');\n   *     assert.ok(false, 'this will fail');\n   *\n   * @name ok\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @api public\n   */\n\n  assert.ok = function (val, msg) {\n    new Assertion(val, msg).is.ok;\n  };\n\n  /**\n   * ### .notOk(object, [message])\n   *\n   * Asserts that `object` is falsy.\n   *\n   *     assert.notOk('everything', 'this will fail');\n   *     assert.notOk(false, 'this will pass');\n   *\n   * @name notOk\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notOk = function (val, msg) {\n    new Assertion(val, msg).is.not.ok;\n  };\n\n  /**\n   * ### .equal(actual, expected, [message])\n   *\n   * Asserts non-strict equality (`==`) of `actual` and `expected`.\n   *\n   *     assert.equal(3, '3', '== coerces values to strings');\n   *\n   * @name equal\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @api public\n   */\n\n  assert.equal = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.equal);\n\n    test.assert(\n        exp == flag(test, 'object')\n      , 'expected #{this} to equal #{exp}'\n      , 'expected #{this} to not equal #{act}'\n      , exp\n      , act\n    );\n  };\n\n  /**\n   * ### .notEqual(actual, expected, [message])\n   *\n   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n   *\n   *     assert.notEqual(3, 4, 'these numbers are not equal');\n   *\n   * @name notEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notEqual = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.notEqual);\n\n    test.assert(\n        exp != flag(test, 'object')\n      , 'expected #{this} to not equal #{exp}'\n      , 'expected #{this} to equal #{act}'\n      , exp\n      , act\n    );\n  };\n\n  /**\n   * ### .strictEqual(actual, expected, [message])\n   *\n   * Asserts strict equality (`===`) of `actual` and `expected`.\n   *\n   *     assert.strictEqual(true, true, 'these booleans are strictly equal');\n   *\n   * @name strictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @api public\n   */\n\n  assert.strictEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.equal(exp);\n  };\n\n  /**\n   * ### .notStrictEqual(actual, expected, [message])\n   *\n   * Asserts strict inequality (`!==`) of `actual` and `expected`.\n   *\n   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');\n   *\n   * @name notStrictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.not.equal(exp);\n  };\n\n  /**\n   * ### .deepEqual(actual, expected, [message])\n   *\n   * Asserts that `actual` is deeply equal to `expected`.\n   *\n   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });\n   *\n   * @name deepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @api public\n   */\n\n  assert.deepEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.eql(exp);\n  };\n\n  /**\n   * ### .notDeepEqual(actual, expected, [message])\n   *\n   * Assert that `actual` is not deeply equal to `expected`.\n   *\n   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });\n   *\n   * @name notDeepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notDeepEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.not.eql(exp);\n  };\n\n  /**\n   * ### .isTrue(value, [message])\n   *\n   * Asserts that `value` is true.\n   *\n   *     var teaServed = true;\n   *     assert.isTrue(teaServed, 'the tea has been served');\n   *\n   * @name isTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.isTrue = function (val, msg) {\n    new Assertion(val, msg).is['true'];\n  };\n\n  /**\n   * ### .isFalse(value, [message])\n   *\n   * Asserts that `value` is false.\n   *\n   *     var teaServed = false;\n   *     assert.isFalse(teaServed, 'no tea yet? hmm...');\n   *\n   * @name isFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.isFalse = function (val, msg) {\n    new Assertion(val, msg).is['false'];\n  };\n\n  /**\n   * ### .isNull(value, [message])\n   *\n   * Asserts that `value` is null.\n   *\n   *     assert.isNull(err, 'there was no error');\n   *\n   * @name isNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.isNull = function (val, msg) {\n    new Assertion(val, msg).to.equal(null);\n  };\n\n  /**\n   * ### .isNotNull(value, [message])\n   *\n   * Asserts that `value` is not null.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotNull(tea, 'great, time for tea!');\n   *\n   * @name isNotNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.isNotNull = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(null);\n  };\n\n  /**\n   * ### .isUndefined(value, [message])\n   *\n   * Asserts that `value` is `undefined`.\n   *\n   *     var tea;\n   *     assert.isUndefined(tea, 'no tea defined');\n   *\n   * @name isUndefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.isUndefined = function (val, msg) {\n    new Assertion(val, msg).to.equal(undefined);\n  };\n\n  /**\n   * ### .isDefined(value, [message])\n   *\n   * Asserts that `value` is not `undefined`.\n   *\n   *     var tea = 'cup of chai';\n   *     assert.isDefined(tea, 'tea has been defined');\n   *\n   * @name isDefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.isDefined = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(undefined);\n  };\n\n  /**\n   * ### .isFunction(value, [message])\n   *\n   * Asserts that `value` is a function.\n   *\n   *     function serveTea() { return 'cup of tea'; };\n   *     assert.isFunction(serveTea, 'great, we can have tea now');\n   *\n   * @name isFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.isFunction = function (val, msg) {\n    new Assertion(val, msg).to.be.a('function');\n  };\n\n  /**\n   * ### .isNotFunction(value, [message])\n   *\n   * Asserts that `value` is _not_ a function.\n   *\n   *     var serveTea = [ 'heat', 'pour', 'sip' ];\n   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');\n   *\n   * @name isNotFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.isNotFunction = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('function');\n  };\n\n  /**\n   * ### .isObject(value, [message])\n   *\n   * Asserts that `value` is an object (as revealed by\n   * `Object.prototype.toString`).\n   *\n   *     var selection = { name: 'Chai', serve: 'with spices' };\n   *     assert.isObject(selection, 'tea selection is an object');\n   *\n   * @name isObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.isObject = function (val, msg) {\n    new Assertion(val, msg).to.be.a('object');\n  };\n\n  /**\n   * ### .isNotObject(value, [message])\n   *\n   * Asserts that `value` is _not_ an object.\n   *\n   *     var selection = 'chai'\n   *     assert.isNotObject(selection, 'tea selection is not an object');\n   *     assert.isNotObject(null, 'null is not an object');\n   *\n   * @name isNotObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.isNotObject = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('object');\n  };\n\n  /**\n   * ### .isArray(value, [message])\n   *\n   * Asserts that `value` is an array.\n   *\n   *     var menu = [ 'green', 'chai', 'oolong' ];\n   *     assert.isArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.isArray = function (val, msg) {\n    new Assertion(val, msg).to.be.an('array');\n  };\n\n  /**\n   * ### .isNotArray(value, [message])\n   *\n   * Asserts that `value` is _not_ an array.\n   *\n   *     var menu = 'green|chai|oolong';\n   *     assert.isNotArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isNotArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.isNotArray = function (val, msg) {\n    new Assertion(val, msg).to.not.be.an('array');\n  };\n\n  /**\n   * ### .isString(value, [message])\n   *\n   * Asserts that `value` is a string.\n   *\n   *     var teaOrder = 'chai';\n   *     assert.isString(teaOrder, 'order placed');\n   *\n   * @name isString\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.isString = function (val, msg) {\n    new Assertion(val, msg).to.be.a('string');\n  };\n\n  /**\n   * ### .isNotString(value, [message])\n   *\n   * Asserts that `value` is _not_ a string.\n   *\n   *     var teaOrder = 4;\n   *     assert.isNotString(teaOrder, 'order placed');\n   *\n   * @name isNotString\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.isNotString = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('string');\n  };\n\n  /**\n   * ### .isNumber(value, [message])\n   *\n   * Asserts that `value` is a number.\n   *\n   *     var cups = 2;\n   *     assert.isNumber(cups, 'how many cups');\n   *\n   * @name isNumber\n   * @param {Number} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.isNumber = function (val, msg) {\n    new Assertion(val, msg).to.be.a('number');\n  };\n\n  /**\n   * ### .isNotNumber(value, [message])\n   *\n   * Asserts that `value` is _not_ a number.\n   *\n   *     var cups = '2 cups please';\n   *     assert.isNotNumber(cups, 'how many cups');\n   *\n   * @name isNotNumber\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.isNotNumber = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('number');\n  };\n\n  /**\n   * ### .isBoolean(value, [message])\n   *\n   * Asserts that `value` is a boolean.\n   *\n   *     var teaReady = true\n   *       , teaServed = false;\n   *\n   *     assert.isBoolean(teaReady, 'is the tea ready');\n   *     assert.isBoolean(teaServed, 'has tea been served');\n   *\n   * @name isBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.isBoolean = function (val, msg) {\n    new Assertion(val, msg).to.be.a('boolean');\n  };\n\n  /**\n   * ### .isNotBoolean(value, [message])\n   *\n   * Asserts that `value` is _not_ a boolean.\n   *\n   *     var teaReady = 'yep'\n   *       , teaServed = 'nope';\n   *\n   *     assert.isNotBoolean(teaReady, 'is the tea ready');\n   *     assert.isNotBoolean(teaServed, 'has tea been served');\n   *\n   * @name isNotBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.isNotBoolean = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('boolean');\n  };\n\n  /**\n   * ### .typeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n   *     assert.typeOf('tea', 'string', 'we have a string');\n   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n   *     assert.typeOf(null, 'null', 'we have a null');\n   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');\n   *\n   * @name typeOf\n   * @param {Mixed} value\n   * @param {String} name\n   * @param {String} message\n   * @api public\n   */\n\n  assert.typeOf = function (val, type, msg) {\n    new Assertion(val, msg).to.be.a(type);\n  };\n\n  /**\n   * ### .notTypeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is _not_ `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');\n   *\n   * @name notTypeOf\n   * @param {Mixed} value\n   * @param {String} typeof name\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notTypeOf = function (val, type, msg) {\n    new Assertion(val, msg).to.not.be.a(type);\n  };\n\n  /**\n   * ### .instanceOf(object, constructor, [message])\n   *\n   * Asserts that `value` is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new Tea('chai');\n   *\n   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');\n   *\n   * @name instanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @api public\n   */\n\n  assert.instanceOf = function (val, type, msg) {\n    new Assertion(val, msg).to.be.instanceOf(type);\n  };\n\n  /**\n   * ### .notInstanceOf(object, constructor, [message])\n   *\n   * Asserts `value` is not an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new String('chai');\n   *\n   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');\n   *\n   * @name notInstanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notInstanceOf = function (val, type, msg) {\n    new Assertion(val, msg).to.not.be.instanceOf(type);\n  };\n\n  /**\n   * ### .include(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Works\n   * for strings and arrays.\n   *\n   *     assert.include('foobar', 'bar', 'foobar contains string \"bar\"');\n   *     assert.include([ 1, 2, 3 ], 3, 'array contains value');\n   *\n   * @name include\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @api public\n   */\n\n  assert.include = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.include).include(inc);\n  };\n\n  /**\n   * ### .notInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Works\n   * for strings and arrays.\n   *i\n   *     assert.notInclude('foobar', 'baz', 'string not include substring');\n   *     assert.notInclude([ 1, 2, 3 ], 4, 'array not include contain value');\n   *\n   * @name notInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notInclude).not.include(inc);\n  };\n\n  /**\n   * ### .match(value, regexp, [message])\n   *\n   * Asserts that `value` matches the regular expression `regexp`.\n   *\n   *     assert.match('foobar', /^foo/, 'regexp matches');\n   *\n   * @name match\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @api public\n   */\n\n  assert.match = function (exp, re, msg) {\n    new Assertion(exp, msg).to.match(re);\n  };\n\n  /**\n   * ### .notMatch(value, regexp, [message])\n   *\n   * Asserts that `value` does not match the regular expression `regexp`.\n   *\n   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');\n   *\n   * @name notMatch\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notMatch = function (exp, re, msg) {\n    new Assertion(exp, msg).to.not.match(re);\n  };\n\n  /**\n   * ### .property(object, property, [message])\n   *\n   * Asserts that `object` has a property named by `property`.\n   *\n   *     assert.property({ tea: { green: 'matcha' }}, 'tea');\n   *\n   * @name property\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n  assert.property = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.have.property(prop);\n  };\n\n  /**\n   * ### .notProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`.\n   *\n   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *\n   * @name notProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.not.have.property(prop);\n  };\n\n  /**\n   * ### .deepProperty(object, property, [message])\n   *\n   * Asserts that `object` has a property named by `property`, which can be a\n   * string using dot- and bracket-notation for deep reference.\n   *\n   *     assert.deepProperty({ tea: { green: 'matcha' }}, 'tea.green');\n   *\n   * @name deepProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n  assert.deepProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.have.deep.property(prop);\n  };\n\n  /**\n   * ### .notDeepProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`, which\n   * can be a string using dot- and bracket-notation for deep reference.\n   *\n   *     assert.notDeepProperty({ tea: { green: 'matcha' }}, 'tea.oolong');\n   *\n   * @name notDeepProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notDeepProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.not.have.deep.property(prop);\n  };\n\n  /**\n   * ### .propertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`.\n   *\n   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');\n   *\n   * @name propertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.propertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.have.property(prop, val);\n  };\n\n  /**\n   * ### .propertyNotVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property`, but with a value\n   * different from that given by `value`.\n   *\n   *     assert.propertyNotVal({ tea: 'is good' }, 'tea', 'is bad');\n   *\n   * @name propertyNotVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.propertyNotVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.not.have.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`. `property` can use dot- and bracket-notation for deep\n   * reference.\n   *\n   *     assert.deepPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');\n   *\n   * @name deepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.deepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyNotVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property`, but with a value\n   * different from that given by `value`. `property` can use dot- and\n   * bracket-notation for deep reference.\n   *\n   *     assert.deepPropertyNotVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');\n   *\n   * @name deepPropertyNotVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.deepPropertyNotVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.not.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .lengthOf(object, length, [message])\n   *\n   * Asserts that `object` has a `length` property with the expected value.\n   *\n   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');\n   *     assert.lengthOf('foobar', 5, 'string has length of 6');\n   *\n   * @name lengthOf\n   * @param {Mixed} object\n   * @param {Number} length\n   * @param {String} message\n   * @api public\n   */\n\n  assert.lengthOf = function (exp, len, msg) {\n    new Assertion(exp, msg).to.have.length(len);\n  };\n\n  /**\n   * ### .throws(function, [constructor/string/regexp], [string/regexp], [message])\n   *\n   * Asserts that `function` will throw an error that is an instance of\n   * `constructor`, or alternately that it will throw an error with message\n   * matching `regexp`.\n   *\n   *     assert.throw(fn, 'function throws a reference error');\n   *     assert.throw(fn, /function throws a reference error/);\n   *     assert.throw(fn, ReferenceError);\n   *     assert.throw(fn, ReferenceError, 'function throws a reference error');\n   *     assert.throw(fn, ReferenceError, /function throws a reference error/);\n   *\n   * @name throws\n   * @alias throw\n   * @alias Throw\n   * @param {Function} function\n   * @param {ErrorConstructor} constructor\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @api public\n   */\n\n  assert.Throw = function (fn, errt, errs, msg) {\n    if ('string' === typeof errt || errt instanceof RegExp) {\n      errs = errt;\n      errt = null;\n    }\n\n    var assertErr = new Assertion(fn, msg).to.Throw(errt, errs);\n    return flag(assertErr, 'object');\n  };\n\n  /**\n   * ### .doesNotThrow(function, [constructor/regexp], [message])\n   *\n   * Asserts that `function` will _not_ throw an error that is an instance of\n   * `constructor`, or alternately that it will not throw an error with message\n   * matching `regexp`.\n   *\n   *     assert.doesNotThrow(fn, Error, 'function does not throw');\n   *\n   * @name doesNotThrow\n   * @param {Function} function\n   * @param {ErrorConstructor} constructor\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @api public\n   */\n\n  assert.doesNotThrow = function (fn, type, msg) {\n    if ('string' === typeof type) {\n      msg = type;\n      type = null;\n    }\n\n    new Assertion(fn, msg).to.not.Throw(type);\n  };\n\n  /**\n   * ### .operator(val1, operator, val2, [message])\n   *\n   * Compares two values using `operator`.\n   *\n   *     assert.operator(1, '<', 2, 'everything is ok');\n   *     assert.operator(1, '>', 2, 'this will fail');\n   *\n   * @name operator\n   * @param {Mixed} val1\n   * @param {String} operator\n   * @param {Mixed} val2\n   * @param {String} message\n   * @api public\n   */\n\n  assert.operator = function (val, operator, val2, msg) {\n    if (!~['==', '===', '>', '>=', '<', '<=', '!=', '!=='].indexOf(operator)) {\n      throw new Error('Invalid operator \"' + operator + '\"');\n    }\n    var test = new Assertion(eval(val + operator + val2), msg);\n    test.assert(\n        true === flag(test, 'object')\n      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)\n      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );\n  };\n\n  /**\n   * ### .closeTo(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name closeTo\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @api public\n   */\n\n  assert.closeTo = function (act, exp, delta, msg) {\n    new Assertion(act, msg).to.be.closeTo(exp, delta);\n  };\n\n  /**\n   * ### .sameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members.\n   * Order is not taken into account.\n   *\n   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');\n   *\n   * @name sameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @api public\n   */\n\n  assert.sameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg).to.have.same.members(set2);\n  }\n\n  /**\n   * ### .includeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset`.\n   * Order is not taken into account.\n   *\n   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1 ], 'include members');\n   *\n   * @name includeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @api public\n   */\n\n  assert.includeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg).to.include.members(subset);\n  }\n\n  /*!\n   * Undocumented / untested\n   */\n\n  assert.ifError = function (val, msg) {\n    new Assertion(val, msg).to.not.be.ok;\n  };\n\n  /*!\n   * Aliases.\n   */\n\n  (function alias(name, as){\n    assert[as] = assert[name];\n    return alias;\n  })\n  ('Throw', 'throw')\n  ('Throw', 'throws');\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/interface/assert.js\n// module id = 30\n// module chunks = 0","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  chai.expect = function (val, message) {\n    return new chai.Assertion(val, message);\n  };\n};\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/interface/expect.js\n// module id = 31\n// module chunks = 0","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  var Assertion = chai.Assertion;\n\n  function loadShould () {\n    // explicitly define this method as function as to have it's name to include as `ssfi`\n    function shouldGetter() {\n      if (this instanceof String || this instanceof Number) {\n        return new Assertion(this.constructor(this), null, shouldGetter);\n      } else if (this instanceof Boolean) {\n        return new Assertion(this == true, null, shouldGetter);\n      }\n      return new Assertion(this, null, shouldGetter);\n    }\n    function shouldSetter(value) {\n      // See https://github.com/chaijs/chai/issues/86: this makes\n      // `whatever.should = someValue` actually set `someValue`, which is\n      // especially useful for `global.should = require('chai').should()`.\n      //\n      // Note that we have to use [[DefineProperty]] instead of [[Put]]\n      // since otherwise we would trigger this very setter!\n      Object.defineProperty(this, 'should', {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    }\n    // modify Object.prototype to have `should`\n    Object.defineProperty(Object.prototype, 'should', {\n      set: shouldSetter\n      , get: shouldGetter\n      , configurable: true\n    });\n\n    var should = {};\n\n    should.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.equal(val2);\n    };\n\n    should.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.Throw(errt, errs);\n    };\n\n    should.exist = function (val, msg) {\n      new Assertion(val, msg).to.exist;\n    }\n\n    // negation\n    should.not = {}\n\n    should.not.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.not.equal(val2);\n    };\n\n    should.not.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.not.Throw(errt, errs);\n    };\n\n    should.not.exist = function (val, msg) {\n      new Assertion(val, msg).to.not.exist;\n    }\n\n    should['throw'] = should['Throw'];\n    should.not['throw'] = should.not['Throw'];\n\n    return should;\n  };\n\n  chai.should = loadShould;\n  chai.Should = loadShould;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/interface/should.js\n// module id = 32\n// module chunks = 0","/*!\n * Chai - addChainingMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar transferFlags = require('./transferFlags');\nvar flag = require('./flag');\nvar config = require('../config');\n\n/*!\n * Module variables\n */\n\n// Check whether `__proto__` is supported\nvar hasProtoSupport = '__proto__' in Object;\n\n// Without `__proto__` support, this module will need to add properties to a function.\n// However, some Function.prototype methods cannot be overwritten,\n// and there seems no easy cross-platform way to detect them (@see chaijs/chai/issues/69).\nvar excludeNames = /^(?:length|name|arguments|caller)$/;\n\n// Cache `Function` properties\nvar call  = Function.prototype.call,\n    apply = Function.prototype.apply;\n\n/**\n * ### addChainableMethod (ctx, name, method, chainingBehavior)\n *\n * Adds a method to an object, such that the method can also be chained.\n *\n *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n *\n * The result can then be used as both a method assertion, executing both `method` and\n * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n *\n *     expect(fooStr).to.be.foo('bar');\n *     expect(fooStr).to.be.foo.equal('foo');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for `name`, when called\n * @param {Function} chainingBehavior function to be called every time the property is accessed\n * @name addChainableMethod\n * @api public\n */\n\nmodule.exports = function (ctx, name, method, chainingBehavior) {\n  if (typeof chainingBehavior !== 'function') {\n    chainingBehavior = function () { };\n  }\n\n  var chainableBehavior = {\n      method: method\n    , chainingBehavior: chainingBehavior\n  };\n\n  // save the methods so we can overwrite them later, if we need to.\n  if (!ctx.__methods) {\n    ctx.__methods = {};\n  }\n  ctx.__methods[name] = chainableBehavior;\n\n  Object.defineProperty(ctx, name,\n    { get: function () {\n        chainableBehavior.chainingBehavior.call(this);\n\n        var assert = function assert() {\n          var old_ssfi = flag(this, 'ssfi');\n          if (old_ssfi && config.includeStack === false)\n            flag(this, 'ssfi', assert);\n          var result = chainableBehavior.method.apply(this, arguments);\n          return result === undefined ? this : result;\n        };\n\n        // Use `__proto__` if available\n        if (hasProtoSupport) {\n          // Inherit all properties from the object by replacing the `Function` prototype\n          var prototype = assert.__proto__ = Object.create(this);\n          // Restore the `call` and `apply` methods from `Function`\n          prototype.call = call;\n          prototype.apply = apply;\n        }\n        // Otherwise, redefine all properties (slow!)\n        else {\n          var asserterNames = Object.getOwnPropertyNames(ctx);\n          asserterNames.forEach(function (asserterName) {\n            if (!excludeNames.test(asserterName)) {\n              var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);\n              Object.defineProperty(assert, asserterName, pd);\n            }\n          });\n        }\n\n        transferFlags(this, assert);\n        return assert;\n      }\n    , configurable: true\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/addChainableMethod.js\n// module id = 33\n// module chunks = 0","/*!\n * Chai - addMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('../config');\n\n/**\n * ### .addMethod (ctx, name, method)\n *\n * Adds a method to the prototype of an object.\n *\n *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(fooStr).to.be.foo('bar');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for name\n * @name addMethod\n * @api public\n */\nvar flag = require('./flag');\n\nmodule.exports = function (ctx, name, method) {\n  ctx[name] = function () {\n    var old_ssfi = flag(this, 'ssfi');\n    if (old_ssfi && config.includeStack === false)\n      flag(this, 'ssfi', ctx[name]);\n    var result = method.apply(this, arguments);\n    return result === undefined ? this : result;\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/addMethod.js\n// module id = 34\n// module chunks = 0","/*!\n * Chai - addProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### addProperty (ctx, name, getter)\n *\n * Adds a property to the prototype of an object.\n *\n *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.instanceof(Foo);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.foo;\n *\n * @param {Object} ctx object to which the property is added\n * @param {String} name of property to add\n * @param {Function} getter function to be used for name\n * @name addProperty\n * @api public\n */\n\nmodule.exports = function (ctx, name, getter) {\n  Object.defineProperty(ctx, name,\n    { get: function () {\n        var result = getter.call(this);\n        return result === undefined ? this : result;\n      }\n    , configurable: true\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/addProperty.js\n// module id = 35\n// module chunks = 0","/*!\n * Chai - getEnumerableProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getEnumerableProperties(object)\n *\n * This allows the retrieval of enumerable property names of an object,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @name getEnumerableProperties\n * @api public\n */\n\nmodule.exports = function getEnumerableProperties(object) {\n  var result = [];\n  for (var name in object) {\n    result.push(name);\n  }\n  return result;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/getEnumerableProperties.js\n// module id = 36\n// module chunks = 0","/*!\n * Chai - message composition utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar flag = require('./flag')\n  , getActual = require('./getActual')\n  , inspect = require('./inspect')\n  , objDisplay = require('./objDisplay');\n\n/**\n * ### .getMessage(object, message, negateMessage)\n *\n * Construct the error message based on flags\n * and template tags. Template tags will return\n * a stringified inspection of the object referenced.\n *\n * Message template tags:\n * - `#{this}` current asserted object\n * - `#{act}` actual value\n * - `#{exp}` expected value\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @name getMessage\n * @api public\n */\n\nmodule.exports = function (obj, args) {\n  var negate = flag(obj, 'negate')\n    , val = flag(obj, 'object')\n    , expected = args[3]\n    , actual = getActual(obj, args)\n    , msg = negate ? args[2] : args[1]\n    , flagMsg = flag(obj, 'message');\n\n  if(typeof msg === \"function\") msg = msg();\n  msg = msg || '';\n  msg = msg\n    .replace(/#{this}/g, objDisplay(val))\n    .replace(/#{act}/g, objDisplay(actual))\n    .replace(/#{exp}/g, objDisplay(expected));\n\n  return flagMsg ? flagMsg + ': ' + msg : msg;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/getMessage.js\n// module id = 37\n// module chunks = 0","/*!\n * Chai - getPathValue utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * @see https://github.com/logicalparadox/filtr\n * MIT Licensed\n */\n\n/**\n * ### .getPathValue(path, object)\n *\n * This allows the retrieval of values in an\n * object given a string path.\n *\n *     var obj = {\n *         prop1: {\n *             arr: ['a', 'b', 'c']\n *           , str: 'Hello'\n *         }\n *       , prop2: {\n *             arr: [ { nested: 'Universe' } ]\n *           , str: 'Hello again!'\n *         }\n *     }\n *\n * The following would be the results.\n *\n *     getPathValue('prop1.str', obj); // Hello\n *     getPathValue('prop1.att[2]', obj); // b\n *     getPathValue('prop2.arr[0].nested', obj); // Universe\n *\n * @param {String} path\n * @param {Object} object\n * @returns {Object} value or `undefined`\n * @name getPathValue\n * @api public\n */\n\nvar getPathValue = module.exports = function (path, obj) {\n  var parsed = parsePath(path);\n  return _getPathValue(parsed, obj);\n};\n\n/*!\n * ## parsePath(path)\n *\n * Helper function used to parse string object\n * paths. Use in conjunction with `_getPathValue`.\n *\n *      var parsed = parsePath('myobject.property.subprop');\n *\n * ### Paths:\n *\n * * Can be as near infinitely deep and nested\n * * Arrays are also valid using the formal `myobject.document[3].property`.\n *\n * @param {String} path\n * @returns {Object} parsed\n * @api private\n */\n\nfunction parsePath (path) {\n  var str = path.replace(/\\[/g, '.[')\n    , parts = str.match(/(\\\\\\.|[^.]+?)+/g);\n  return parts.map(function (value) {\n    var re = /\\[(\\d+)\\]$/\n      , mArr = re.exec(value)\n    if (mArr) return { i: parseFloat(mArr[1]) };\n    else return { p: value };\n  });\n};\n\n/*!\n * ## _getPathValue(parsed, obj)\n *\n * Helper companion function for `.parsePath` that returns\n * the value located at the parsed address.\n *\n *      var value = getPathValue(parsed, obj);\n *\n * @param {Object} parsed definition from `parsePath`.\n * @param {Object} object to search against\n * @returns {Object|Undefined} value\n * @api private\n */\n\nfunction _getPathValue (parsed, obj) {\n  var tmp = obj\n    , res;\n  for (var i = 0, l = parsed.length; i < l; i++) {\n    var part = parsed[i];\n    if (tmp) {\n      if ('undefined' !== typeof part.p)\n        tmp = tmp[part.p];\n      else if ('undefined' !== typeof part.i)\n        tmp = tmp[part.i];\n      if (i == (l - 1)) res = tmp;\n    } else {\n      res = undefined;\n    }\n  }\n  return res;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/getPathValue.js\n// module id = 38\n// module chunks = 0","/*!\n * Chai - getProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getProperties(object)\n *\n * This allows the retrieval of property names of an object, enumerable or not,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @name getProperties\n * @api public\n */\n\nmodule.exports = function getProperties(object) {\n  var result = Object.getOwnPropertyNames(subject);\n\n  function addProperty(property) {\n    if (result.indexOf(property) === -1) {\n      result.push(property);\n    }\n  }\n\n  var proto = Object.getPrototypeOf(subject);\n  while (proto !== null) {\n    Object.getOwnPropertyNames(proto).forEach(addProperty);\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return result;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/getProperties.js\n// module id = 39\n// module chunks = 0","/*!\n * chai\n * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Main exports\n */\n\nvar exports = module.exports = {};\n\n/*!\n * test utility\n */\n\nexports.test = require('./test');\n\n/*!\n * type utility\n */\n\nexports.type = require('./type');\n\n/*!\n * message utility\n */\n\nexports.getMessage = require('./getMessage');\n\n/*!\n * actual utility\n */\n\nexports.getActual = require('./getActual');\n\n/*!\n * Inspect util\n */\n\nexports.inspect = require('./inspect');\n\n/*!\n * Object Display util\n */\n\nexports.objDisplay = require('./objDisplay');\n\n/*!\n * Flag utility\n */\n\nexports.flag = require('./flag');\n\n/*!\n * Flag transferring utility\n */\n\nexports.transferFlags = require('./transferFlags');\n\n/*!\n * Deep equal utility\n */\n\nexports.eql = require('deep-eql');\n\n/*!\n * Deep path value\n */\n\nexports.getPathValue = require('./getPathValue');\n\n/*!\n * Function name\n */\n\nexports.getName = require('./getName');\n\n/*!\n * add Property\n */\n\nexports.addProperty = require('./addProperty');\n\n/*!\n * add Method\n */\n\nexports.addMethod = require('./addMethod');\n\n/*!\n * overwrite Property\n */\n\nexports.overwriteProperty = require('./overwriteProperty');\n\n/*!\n * overwrite Method\n */\n\nexports.overwriteMethod = require('./overwriteMethod');\n\n/*!\n * Add a chainable method\n */\n\nexports.addChainableMethod = require('./addChainableMethod');\n\n/*!\n * Overwrite chainable method\n */\n\nexports.overwriteChainableMethod = require('./overwriteChainableMethod');\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/index.js\n// module id = 40\n// module chunks = 0","/*!\n * Chai - overwriteChainableMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### overwriteChainableMethod (ctx, name, fn)\n *\n * Overwites an already existing chainable method\n * and provides access to the previous function or\n * property.  Must return functions to be used for\n * name.\n *\n *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'length',\n *       function (_super) {\n *       }\n *     , function (_super) {\n *       }\n *     );\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.have.length(3);\n *     expect(myFoo).to.have.length.above(3);\n *\n * @param {Object} ctx object whose method / property is to be overwritten\n * @param {String} name of method / property to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @param {Function} chainingBehavior function that returns a function to be used for property\n * @name overwriteChainableMethod\n * @api public\n */\n\nmodule.exports = function (ctx, name, method, chainingBehavior) {\n  var chainableBehavior = ctx.__methods[name];\n\n  var _chainingBehavior = chainableBehavior.chainingBehavior;\n  chainableBehavior.chainingBehavior = function () {\n    var result = chainingBehavior(_chainingBehavior).call(this);\n    return result === undefined ? this : result;\n  };\n\n  var _method = chainableBehavior.method;\n  chainableBehavior.method = function () {\n    var result = method(_method).apply(this, arguments);\n    return result === undefined ? this : result;\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/overwriteChainableMethod.js\n// module id = 41\n// module chunks = 0","/*!\n * Chai - overwriteMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### overwriteMethod (ctx, name, fn)\n *\n * Overwites an already existing method and provides\n * access to previous function. Must return function\n * to be used for name.\n *\n *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n *       return function (str) {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.value).to.equal(str);\n *         } else {\n *           _super.apply(this, arguments);\n *         }\n *       }\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.equal('bar');\n *\n * @param {Object} ctx object whose method is to be overwritten\n * @param {String} name of method to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @name overwriteMethod\n * @api public\n */\n\nmodule.exports = function (ctx, name, method) {\n  var _method = ctx[name]\n    , _super = function () { return this; };\n\n  if (_method && 'function' === typeof _method)\n    _super = _method;\n\n  ctx[name] = function () {\n    var result = method(_super).apply(this, arguments);\n    return result === undefined ? this : result;\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/overwriteMethod.js\n// module id = 42\n// module chunks = 0","/*!\n * Chai - overwriteProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### overwriteProperty (ctx, name, fn)\n *\n * Overwites an already existing property getter and provides\n * access to previous value. Must return function to use as getter.\n *\n *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n *       return function () {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.name).to.equal('bar');\n *         } else {\n *           _super.call(this);\n *         }\n *       }\n *     });\n *\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.ok;\n *\n * @param {Object} ctx object whose property is to be overwritten\n * @param {String} name of property to overwrite\n * @param {Function} getter function that returns a getter function to be used for name\n * @name overwriteProperty\n * @api public\n */\n\nmodule.exports = function (ctx, name, getter) {\n  var _get = Object.getOwnPropertyDescriptor(ctx, name)\n    , _super = function () {};\n\n  if (_get && 'function' === typeof _get.get)\n    _super = _get.get\n\n  Object.defineProperty(ctx, name,\n    { get: function () {\n        var result = getter(_super).call(this);\n        return result === undefined ? this : result;\n      }\n    , configurable: true\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/overwriteProperty.js\n// module id = 43\n// module chunks = 0","/*!\n * Chai - test utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar flag = require('./flag');\n\n/**\n * # test(object, expression)\n *\n * Test and object for expression.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n */\n\nmodule.exports = function (obj, args) {\n  var negate = flag(obj, 'negate')\n    , expr = args[0];\n  return negate ? !expr : expr;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/test.js\n// module id = 44\n// module chunks = 0","/*!\n * Chai - type utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Detectable javascript natives\n */\n\nvar natives = {\n    '[object Arguments]': 'arguments'\n  , '[object Array]': 'array'\n  , '[object Date]': 'date'\n  , '[object Function]': 'function'\n  , '[object Number]': 'number'\n  , '[object RegExp]': 'regexp'\n  , '[object String]': 'string'\n};\n\n/**\n * ### type(object)\n *\n * Better implementation of `typeof` detection that can\n * be used cross-browser. Handles the inconsistencies of\n * Array, `null`, and `undefined` detection.\n *\n *     utils.type({}) // 'object'\n *     utils.type(null) // `null'\n *     utils.type(undefined) // `undefined`\n *     utils.type([]) // `array`\n *\n * @param {Mixed} object to detect type of\n * @name type\n * @api private\n */\n\nmodule.exports = function (obj) {\n  var str = Object.prototype.toString.call(obj);\n  if (natives[str]) return natives[str];\n  if (obj === null) return 'null';\n  if (obj === undefined) return 'undefined';\n  if (obj === Object(obj)) return 'object';\n  return typeof obj;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chai/lib/chai/utils/type.js\n// module id = 45\n// module chunks = 0","module.exports = require('./lib/eql');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/deep-eql/index.js\n// module id = 46\n// module chunks = 0","/*!\n * deep-eql\n * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar type = require('type-detect');\n\n/*!\n * Buffer.isBuffer browser shim\n */\n\nvar Buffer;\ntry { Buffer = require('buffer').Buffer; }\ncatch(ex) {\n  Buffer = {};\n  Buffer.isBuffer = function() { return false; }\n}\n\n/*!\n * Primary Export\n */\n\nmodule.exports = deepEqual;\n\n/**\n * Assert super-strict (egal) equality between\n * two objects of any type.\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @param {Array} memoised (optional)\n * @return {Boolean} equal match\n */\n\nfunction deepEqual(a, b, m) {\n  if (sameValue(a, b)) {\n    return true;\n  } else if ('date' === type(a)) {\n    return dateEqual(a, b);\n  } else if ('regexp' === type(a)) {\n    return regexpEqual(a, b);\n  } else if (Buffer.isBuffer(a)) {\n    return bufferEqual(a, b);\n  } else if ('arguments' === type(a)) {\n    return argumentsEqual(a, b, m);\n  } else if (!typeEqual(a, b)) {\n    return false;\n  } else if (('object' !== type(a) && 'object' !== type(b))\n  && ('array' !== type(a) && 'array' !== type(b))) {\n    return sameValue(a, b);\n  } else {\n    return objectEqual(a, b, m);\n  }\n}\n\n/*!\n * Strict (egal) equality test. Ensures that NaN always\n * equals NaN and `-0` does not equal `+0`.\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @return {Boolean} equal match\n */\n\nfunction sameValue(a, b) {\n  if (a === b) return a !== 0 || 1 / a === 1 / b;\n  return a !== a && b !== b;\n}\n\n/*!\n * Compare the types of two given objects and\n * return if they are equal. Note that an Array\n * has a type of `array` (not `object`) and arguments\n * have a type of `arguments` (not `array`/`object`).\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @return {Boolean} result\n */\n\nfunction typeEqual(a, b) {\n  return type(a) === type(b);\n}\n\n/*!\n * Compare two Date objects by asserting that\n * the time values are equal using `saveValue`.\n *\n * @param {Date} a\n * @param {Date} b\n * @return {Boolean} result\n */\n\nfunction dateEqual(a, b) {\n  if ('date' !== type(b)) return false;\n  return sameValue(a.getTime(), b.getTime());\n}\n\n/*!\n * Compare two regular expressions by converting them\n * to string and checking for `sameValue`.\n *\n * @param {RegExp} a\n * @param {RegExp} b\n * @return {Boolean} result\n */\n\nfunction regexpEqual(a, b) {\n  if ('regexp' !== type(b)) return false;\n  return sameValue(a.toString(), b.toString());\n}\n\n/*!\n * Assert deep equality of two `arguments` objects.\n * Unfortunately, these must be sliced to arrays\n * prior to test to ensure no bad behavior.\n *\n * @param {Arguments} a\n * @param {Arguments} b\n * @param {Array} memoize (optional)\n * @return {Boolean} result\n */\n\nfunction argumentsEqual(a, b, m) {\n  if ('arguments' !== type(b)) return false;\n  a = [].slice.call(a);\n  b = [].slice.call(b);\n  return deepEqual(a, b, m);\n}\n\n/*!\n * Get enumerable properties of a given object.\n *\n * @param {Object} a\n * @return {Array} property names\n */\n\nfunction enumerable(a) {\n  var res = [];\n  for (var key in a) res.push(key);\n  return res;\n}\n\n/*!\n * Simple equality for flat iterable objects\n * such as Arrays or Node.js buffers.\n *\n * @param {Iterable} a\n * @param {Iterable} b\n * @return {Boolean} result\n */\n\nfunction iterableEqual(a, b) {\n  if (a.length !==  b.length) return false;\n\n  var i = 0;\n  var match = true;\n\n  for (; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      match = false;\n      break;\n    }\n  }\n\n  return match;\n}\n\n/*!\n * Extension to `iterableEqual` specifically\n * for Node.js Buffers.\n *\n * @param {Buffer} a\n * @param {Mixed} b\n * @return {Boolean} result\n */\n\nfunction bufferEqual(a, b) {\n  if (!Buffer.isBuffer(b)) return false;\n  return iterableEqual(a, b);\n}\n\n/*!\n * Block for `objectEqual` ensuring non-existing\n * values don't get in.\n *\n * @param {Mixed} object\n * @return {Boolean} result\n */\n\nfunction isValue(a) {\n  return a !== null && a !== undefined;\n}\n\n/*!\n * Recursively check the equality of two objects.\n * Once basic sameness has been established it will\n * defer to `deepEqual` for each enumerable key\n * in the object.\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @return {Boolean} result\n */\n\nfunction objectEqual(a, b, m) {\n  if (!isValue(a) || !isValue(b)) {\n    return false;\n  }\n\n  if (a.prototype !== b.prototype) {\n    return false;\n  }\n\n  var i;\n  if (m) {\n    for (i = 0; i < m.length; i++) {\n      if ((m[i][0] === a && m[i][1] === b)\n      ||  (m[i][0] === b && m[i][1] === a)) {\n        return true;\n      }\n    }\n  } else {\n    m = [];\n  }\n\n  try {\n    var ka = enumerable(a);\n    var kb = enumerable(b);\n  } catch (ex) {\n    return false;\n  }\n\n  ka.sort();\n  kb.sort();\n\n  if (!iterableEqual(ka, kb)) {\n    return false;\n  }\n\n  m.push([ a, b ]);\n\n  var key;\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], m)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/deep-eql/lib/eql.js\n// module id = 47\n// module chunks = 0","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ieee754/index.js\n// module id = 48\n// module chunks = 0","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/isarray/index.js\n// module id = 49\n// module chunks = 0","module.exports = require('./lib/type');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/type-detect/index.js\n// module id = 50\n// module chunks = 0","/*!\n * type-detect\n * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Primary Exports\n */\n\nvar exports = module.exports = getType;\n\n/*!\n * Detectable javascript natives\n */\n\nvar natives = {\n    '[object Array]': 'array'\n  , '[object RegExp]': 'regexp'\n  , '[object Function]': 'function'\n  , '[object Arguments]': 'arguments'\n  , '[object Date]': 'date'\n};\n\n/**\n * ### typeOf (obj)\n *\n * Use several different techniques to determine\n * the type of object being tested.\n *\n *\n * @param {Mixed} object\n * @return {String} object type\n * @api public\n */\n\nfunction getType (obj) {\n  var str = Object.prototype.toString.call(obj);\n  if (natives[str]) return natives[str];\n  if (obj === null) return 'null';\n  if (obj === undefined) return 'undefined';\n  if (obj === Object(obj)) return 'object';\n  return typeof obj;\n}\n\nexports.Library = Library;\n\n/**\n * ### Library\n *\n * Create a repository for custom type detection.\n *\n * ```js\n * var lib = new type.Library;\n * ```\n *\n */\n\nfunction Library () {\n  this.tests = {};\n}\n\n/**\n * #### .of (obj)\n *\n * Expose replacement `typeof` detection to the library.\n *\n * ```js\n * if ('string' === lib.of('hello world')) {\n *   // ...\n * }\n * ```\n *\n * @param {Mixed} object to test\n * @return {String} type\n */\n\nLibrary.prototype.of = getType;\n\n/**\n * #### .define (type, test)\n *\n * Add a test to for the `.test()` assertion.\n *\n * Can be defined as a regular expression:\n *\n * ```js\n * lib.define('int', /^[0-9]+$/);\n * ```\n *\n * ... or as a function:\n *\n * ```js\n * lib.define('bln', function (obj) {\n *   if ('boolean' === lib.of(obj)) return true;\n *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];\n *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();\n *   return !! ~blns.indexOf(obj);\n * });\n * ```\n *\n * @param {String} type\n * @param {RegExp|Function} test\n * @api public\n */\n\nLibrary.prototype.define = function (type, test) {\n  if (arguments.length === 1) return this.tests[type];\n  this.tests[type] = test;\n  return this;\n};\n\n/**\n * #### .test (obj, test)\n *\n * Assert that an object is of type. Will first\n * check natives, and if that does not pass it will\n * use the user defined custom tests.\n *\n * ```js\n * assert(lib.test('1', 'int'));\n * assert(lib.test('yes', 'bln'));\n * ```\n *\n * @param {Mixed} object\n * @param {String} type\n * @return {Boolean} result\n * @api public\n */\n\nLibrary.prototype.test = function (obj, type) {\n  if (type === getType(obj)) return true;\n  var test = this.tests[type];\n\n  if (test && 'regexp' === getType(test)) {\n    return test.test(obj);\n  } else if (test && 'function' === getType(test)) {\n    return test(obj);\n  } else {\n    throw new ReferenceError('Type test \"' + type + '\" not defined or invalid.');\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/type-detect/lib/type.js\n// module id = 51\n// module chunks = 0"],"sourceRoot":""}