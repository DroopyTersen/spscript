{
  "errors": [],
  "warnings": [
    "spscript.js from UglifyJs\nDropping side-effect-free statement [./lib/utils.js:172,28]\nSide effects in initialization of unused variable isBrowser [./lib/utils.js:7,0]\nSide effects in initialization of unused variable validateODataV2 [./lib/utils.js:43,0]\nSide effects in initialization of unused variable arrayFromBitMask [./lib/utils.js:54,0]\nSide effects in initialization of unused variable waitForLibrary [./lib/utils.js:102,0]\nSide effects in initialization of unused variable getScripts [./lib/utils.js:142,0]\nSide effects in initialization of unused variable getArrayBuffer [./lib/utils.js:179,0]\nSide effects in initialization of unused variable loadCss [./lib/utils.js:192,0]\nSide effects in initialization of unused variable handleErrorResponse [./lib/utils.js:200,0]\nSide effects in initialization of unused variable utils [./lib/requestHeaders.js:5,0]\nSide effects in initialization of unused variable getFilestreamHeaders [./lib/requestHeaders.js:19,0]\nSide effects in initialization of unused variable fromObj [./lib/queryString.js:21,0]\nCondition always true [./~/mustache/mustache.js:11,3]\nDropping unreachable code [./~/mustache/mustache.js:14,0]\nSide effects in initialization of unused variable registerFormField [./lib/csr.js:31,0]\nSide effects in initialization of unused variable registerDisplayField [./lib/csr.js:38,0]\nSide effects in initialization of unused variable registerView [./lib/csr.js:61,0]\nSide effects in initialization of unused variable utils [./lib/filesystem.js:3,0]\nDropping unused variable self [./lib/restDao.js:22,0]"
  ],
  "version": "1.13.2",
  "hash": "81e7eab4033a5e7520ad",
  "time": 956,
  "publicPath": "",
  "assetsByChunkName": {
    "spscript": [
      "spscript.js",
      "spscript.js.map"
    ]
  },
  "assets": [
    {
      "name": "spscript.js",
      "size": 35744,
      "chunks": [
        0
      ],
      "chunkNames": [
        "spscript"
      ],
      "emitted": true
    },
    {
      "name": "spscript.js.map",
      "size": 286761,
      "chunks": [
        0
      ],
      "chunkNames": [
        "spscript"
      ],
      "emitted": true
    }
  ],
  "chunks": [
    {
      "id": 0,
      "rendered": true,
      "initial": true,
      "entry": true,
      "extraAsync": false,
      "size": 106533,
      "names": [
        "spscript"
      ],
      "files": [
        "spscript.js",
        "spscript.js.map"
      ],
      "hash": "03d6666b92c3c920c23b",
      "parents": [],
      "modules": [
        {
          "id": 0,
          "identifier": "C:\\gitwip\\spscript\\entries\\spscript.js",
          "name": "./entries/spscript.js",
          "index": 0,
          "index2": 22,
          "size": 624,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": null,
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [],
          "source": "// var promisePolyfill = require(\"es6-promise\");\r\nvar promisePolyfill = require(\"promise-polyfill\");\r\n\r\nif (!global.Promise) {\r\n\tglobal.Promise = promisePolyfill;\r\n}\r\nvar SPScript = {};\r\nSPScript.RestDao = require(\"../lib/restDao\");\r\nSPScript.queryString = require(\"../lib/queryString\");\r\nSPScript.templating = require(\"mustache\");\r\nSPScript.templating.renderTemplate = SPScript.templating.render;\r\nSPScript.utils = require(\"../lib/utils\");\r\nSPScript.ajax = require(\"../lib/ajax\");\r\nSPScript.CSR = require(\"../lib/csr\");\r\nSPScript.headers = require(\"../lib/requestHeaders\");\r\nmodule.exports = global.SPScript = SPScript;\r\n\r\n"
        },
        {
          "id": 1,
          "identifier": "C:\\gitwip\\spscript\\lib\\utils.js",
          "name": "./lib/utils.js",
          "index": 7,
          "index2": 3,
          "size": 7685,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\gitwip\\spscript\\entries\\spscript.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 0,
              "moduleIdentifier": "C:\\gitwip\\spscript\\entries\\spscript.js",
              "module": "./entries/spscript.js",
              "moduleName": "./entries/spscript.js",
              "type": "cjs require",
              "userRequest": "../lib/utils",
              "loc": "12:17-40"
            },
            {
              "moduleId": 2,
              "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\requestHeaders.js",
              "module": "./lib/requestHeaders.js",
              "moduleName": "./lib/requestHeaders.js",
              "type": "cjs require",
              "userRequest": "./utils",
              "loc": "5:12-30"
            },
            {
              "moduleId": 5,
              "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\permissions.js",
              "module": "./lib/permissions.js",
              "moduleName": "./lib/permissions.js",
              "type": "cjs require",
              "userRequest": "./utils",
              "loc": "3:12-30"
            },
            {
              "moduleId": 8,
              "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\baseDao.js",
              "module": "./lib/baseDao.js",
              "moduleName": "./lib/baseDao.js",
              "type": "cjs require",
              "userRequest": "./utils",
              "loc": "9:12-30"
            },
            {
              "moduleId": 11,
              "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\customActions.js",
              "module": "./lib/customActions.js",
              "moduleName": "./lib/customActions.js",
              "type": "cjs require",
              "userRequest": "./utils",
              "loc": "5:12-30"
            },
            {
              "moduleId": 12,
              "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\filesystem.js",
              "module": "./lib/filesystem.js",
              "moduleName": "./lib/filesystem.js",
              "type": "cjs require",
              "userRequest": "./utils",
              "loc": "3:12-30"
            },
            {
              "moduleId": 13,
              "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\list.js",
              "module": "./lib/list.js",
              "moduleName": "./lib/list.js",
              "type": "cjs require",
              "userRequest": "./utils",
              "loc": "5:12-30"
            },
            {
              "moduleId": 14,
              "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\profiles.js",
              "module": "./lib/profiles.js",
              "moduleName": "./lib/profiles.js",
              "type": "cjs require",
              "userRequest": "./utils",
              "loc": "3:12-30"
            },
            {
              "moduleId": 15,
              "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\restDao.js",
              "module": "./lib/restDao.js",
              "moduleName": "./lib/restDao.js",
              "type": "cjs require",
              "userRequest": "./utils",
              "loc": "7:12-30"
            },
            {
              "moduleId": 16,
              "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\search.js",
              "module": "./lib/search.js",
              "moduleName": "./lib/search.js",
              "type": "cjs require",
              "userRequest": "./utils",
              "loc": "4:12-30"
            },
            {
              "moduleId": 17,
              "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\web.js",
              "module": "./lib/web.js",
              "moduleName": "./lib/web.js",
              "type": "cjs require",
              "userRequest": "./utils",
              "loc": "5:12-30"
            }
          ],
          "source": "\"use strict\";\n\n/**\r\n* @namespace SPScript.utils\r\n*/\n\nvar isBrowser = exports.isBrowser = function () {\n\treturn !(typeof window === 'undefined');\n};\n/**\r\n * If you pass in string, it will try to run JSON.parse(). The SPScript get() and post() methods already run the response through this method, so you'd really only need this if you are doing a manual ajax request. Different browsers handle JSON response differently so it is safest to call this method if you aren't going through SPScript.\r\n * @param {string} data - Raw response from JSON request\r\n * @returns {object} - JSON parsed object. Returns null if JSON.parse fails\r\n * @function parseJSON\r\n * @memberof SPScript.utils\r\n * @example\r\n * dao.executeRequest('/web/contentTypes')\r\n *\t\t.then(SPScript.utils.parseJSON)\r\n *\t\t.then(function(data) { console.log(data.d.results)})\r\n */\nvar parseJSON = exports.parseJSON = function (data) {\n\tif (typeof data === \"string\") {\n\t\ttry {\n\t\t\tdata = JSON.parse(data);\n\t\t} catch (e) {\n\t\t\treturn null;\n\t\t}\n\t}\n\treturn data;\n};\n\n/**\r\n * Helps parse raw json response to remove ceremonious OData data.d namespace. Tries JSON.parse() and then pulling out actual result from data.d or data.d.results\r\n * @function validateODataV2\r\n * @memberof SPScript.utils\r\n * @param {string|object} data - Raw response from JSON request\r\n * @returns {object} - JSON parsed object with that removes data.d OData structure \r\n * @example\r\n * dao.get('/web/contentTypes')\r\n *\t\t.then(SPScript.utils.validateODataV2)\r\n *\t\t.then(function(contentTypes) { console.log(contentTypes)})\r\n */\nvar validateODataV2 = exports.validateODataV2 = function (data) {\n\tvar results = parseJSON(data);\n\tif (data.d && data.d.results && data.d.results.length != null) {\n\t\tresults = data.d.results;\n\t} else if (data.d) {\n\t\tresults = data.d;\n\t}\n\treturn results;\n};\n\n//'Borrowed' from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\nvar arrayFromBitMask = exports.arrayFromBitMask = function (nMask) {\n\t// nMask must be between -2147483648 and 2147483647\n\tif (typeof nMask === \"string\") {\n\t\tnMask = parseInt(nMask);\n\t}\n\t// if (nMask > 0x7fffffff || nMask < -0x80000000) {\n\t// \tthrow new TypeError(\"arrayFromMask - out of range\");\n\t// }\n\tfor (var nShifted = nMask, aFromMask = []; nShifted; aFromMask.push(Boolean(nShifted & 1)), nShifted >>>= 1) {}\n\treturn aFromMask;\n};\n\nvar _waitForLibraries = function _waitForLibraries(namespaces, resolve) {\n\tvar missing = namespaces.filter(function (namespace) {\n\t\treturn !validateNamespace(namespace);\n\t});\n\n\tif (missing.length === 0) resolve();else setTimeout(function () {\n\t\treturn _waitForLibraries(namespaces, resolve);\n\t}, 25);\n};\n\n/**\r\n * A method to allow you to wait for script dependencies to load.\r\n * @param {Array} namespaces - An array of global namespaces, things on the global 'window'. For example, when jQuery is on the page, window.jQuery is valid.  So 'jQuery' is the namespace.\r\n * @returns {Promise} - A Promise that resolves when all your namespaces are on the page\r\n * @function waitForLibraries\r\n * @memberof SPScript.utils\r\n * @example\r\n * function doMyStuff() { };\r\n * SPScript.utils.waitForLibraries([\"jQuery\", \"SP.UI.Dialog\"]).then(doMyStuff);\r\n */\nvar waitForLibraries = exports.waitForLibraries = function (namespaces) {\n\treturn new Promise(function (resolve, reject) {\n\t\treturn _waitForLibraries(namespaces, resolve);\n\t});\n};\n\n/**\r\n * A method to allow you to wait for a single script dependency to load.\r\n * @param {string} namespace - A global namespace. For example, when jQuery is on the page, window.jQuery is valid. So 'jQuery' is the namespace.\r\n * @returns {Promise} - A Promise that resolves when all your namespace is on the page\r\n * @function waitForLibrary\r\n * @memberof SPScript.utils\r\n * @example\r\n * function doMyStuff() { };\r\n * SPScript.utils.waitForLibrary(\"jQuery\").then(doMyStuff);\r\n */\nvar waitForLibrary = exports.waitForLibrary = function (namespace) {\n\treturn waitForLibraries([namespace]);\n};\n\n/**\r\n * A method to check if a given namespace is on the global object (window).\r\n * @param {string} namespace - A global namespace\r\n * @returns {Bool} - True or False if the namespace is on the page\r\n * @function validateNamespace\r\n * @memberof SPScript.utils\r\n * @example\r\n * var canUseModals = SPScript.utils.validateNamespace(\"SP.UI.Dialog\");\r\n */\nvar validateNamespace = exports.validateNamespace = function (namespace) {\n\tvar scope = window;\n\tvar sections = namespace.split(\".\");\n\tvar sectionsLength = sections.length;\n\tfor (var i = 0; i < sectionsLength; i++) {\n\t\tvar prop = sections[i];\n\t\tif (prop in scope) {\n\t\t\tscope = scope[prop];\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n};\n\n/**\r\n * A method to load a javascript file onto your page\r\n * @param {Array<string>} urls - An Array of urls to javascript files you want to load on your page\r\n * @returns {Promise} - A Promise that resolves when all the files are done loading\r\n * @function getScripts\r\n * @memberof SPScript.utils\r\n * @example\r\n * function doMyStuff() { };\r\n * var momentjsUrl = \"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.13.0/moment.min.js\"\r\n * var jQueryUrl = \"https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.3/jquery.min.js\"\r\n * SPScript.utils.getScript([momentjsUrl, jQueryUrl]).then(doMyStuff);\r\n */\nvar getScripts = exports.getScripts = function (urls) {\n\treturn Promise.all(urls.map(getScript));\n};\n\n/**\r\n * A method to load a javascript file onto your page\r\n * @param {string} url - Url to the java script file you want to load\r\n * @returns {Promise} - A Promise that resolves when the file is done loading\r\n * @function getScript\r\n * @memberof SPScript.utils\r\n * @example\r\n * function doMyStuff() { };\r\n * var momentjsUrl = \"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.13.0/moment.min.js\"\r\n * SPScript.utils.getScript(momentjsUrl).then(doMyStuff);\r\n */\nvar getScript = exports.getScript = function (url) {\n\treturn new Promise(function (resolve, reject) {\n\t\tvar scriptTag = window.document.createElement(\"script\");\n\t\tvar firstScriptTag = document.getElementsByTagName('script')[0];\n\t\tscriptTag.async = 1;\n\t\tfirstScriptTag.parentNode.insertBefore(scriptTag, firstScriptTag);\n\n\t\tscriptTag.onload = scriptTag.onreadystatechange = function (arg, isAbort) {\n\t\t\t// if its been aborted, readyState is gone, or readyState is in a 'done' status\n\t\t\tif (isAbort || !scriptTag.readyState || /loaded|complete/.test(scriptTag.readyState)) {\n\t\t\t\t//clean up\n\t\t\t\tscriptTag.onload = scriptTag.onreadystatechange = null;\n\t\t\t\tscriptTag = undefined;\n\n\t\t\t\t// resolve/reject the promise\n\t\t\t\tif (!isAbort) resolve();else reject;\n\t\t\t}\n\t\t};\n\t\tscriptTag.src = url;\n\t});\n};\n\nvar getArrayBuffer = exports.getArrayBuffer = function (file) {\n\tif (file && file instanceof File) {\n\t\treturn new Promise(function (resolve, reject) {\n\t\t\tvar reader = new FileReader();\n\t\t\treader.onload = function (e) {\n\t\t\t\tresolve(e.target.result);\n\t\t\t};\n\t\t\treader.readAsArrayBuffer(file);\n\t\t});\n\t} else {\n\t\tthrow \"SPScript.utils.getArrayBuffer: Cant get ArrayBuffer if you don't pass in a file\";\n\t}\n};\nvar loadCss = exports.loadCss = function (url) {\n\tvar link = document.createElement(\"link\");\n\tlink.setAttribute(\"rel\", \"stylesheet\");\n\tlink.setAttribute(\"type\", \"text/css\");\n\tlink.setAttribute(\"href\", url);\n\tdocument.querySelector(\"head\").appendChild(link);\n};\n\nvar handleErrorResponse = exports.handleErrorResponse = function (err, res) {\n\tconsole.log(\"REQUEST ERROR - \" + err.statusCode || err.code);\n\tvar msg = err.body;\n\ttry {\n\t\tvar data = err.body;\n\t\tif (typeof data === \"string\") data = JSON.parse(err.body);\n\t\tif (data.error) msg = data.error.message.value;\n\t} catch (ex) {}\n\tconsole.log(msg);\n\treturn err;\n};\n//# sourceMappingURL=utils.js.map"
        },
        {
          "id": 2,
          "identifier": "C:\\gitwip\\spscript\\lib\\requestHeaders.js",
          "name": "./lib/requestHeaders.js",
          "index": 9,
          "index2": 5,
          "size": 1490,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\gitwip\\spscript\\entries\\spscript.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 0,
              "moduleIdentifier": "C:\\gitwip\\spscript\\entries\\spscript.js",
              "module": "./entries/spscript.js",
              "moduleName": "./entries/spscript.js",
              "type": "cjs require",
              "userRequest": "../lib/requestHeaders",
              "loc": "15:19-51"
            },
            {
              "moduleId": 8,
              "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\baseDao.js",
              "module": "./lib/baseDao.js",
              "moduleName": "./lib/baseDao.js",
              "type": "cjs require",
              "userRequest": "./requestHeaders",
              "loc": "11:18-45"
            },
            {
              "moduleId": 11,
              "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\customActions.js",
              "module": "./lib/customActions.js",
              "moduleName": "./lib/customActions.js",
              "type": "cjs require",
              "userRequest": "./requestHeaders",
              "loc": "6:14-41"
            },
            {
              "moduleId": 13,
              "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\list.js",
              "module": "./lib/list.js",
              "moduleName": "./lib/list.js",
              "type": "cjs require",
              "userRequest": "./requestHeaders",
              "loc": "7:14-41"
            },
            {
              "moduleId": 14,
              "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\profiles.js",
              "module": "./lib/profiles.js",
              "moduleName": "./lib/profiles.js",
              "type": "cjs require",
              "userRequest": "./requestHeaders",
              "loc": "4:14-41"
            },
            {
              "moduleId": 17,
              "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\web.js",
              "module": "./lib/web.js",
              "moduleName": "./lib/web.js",
              "type": "cjs require",
              "userRequest": "./requestHeaders",
              "loc": "7:14-41"
            }
          ],
          "source": "\"use strict\";\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar utils = require(\"./utils\");\n\nvar jsonMimeType = exports.jsonMimeType = \"application/json;odata=verbose\";\nvar getStandardHeaders = exports.getStandardHeaders = function (digest) {\n\tvar headers = {\n\t\t\"Accept\": jsonMimeType,\n\t\t\"Content-Type\": jsonMimeType\n\t};\n\tif (digest) headers[\"X-RequestDigest\"] = digest;\n\treturn headers;\n};\n\nexports.getAddHeaders = getStandardHeaders;\n\nvar getFilestreamHeaders = exports.getFilestreamHeaders = function (digest) {\n\treturn {\n\t\t'Accept': jsonMimeType,\n\t\t'X-RequestDigest': digest,\n\t\t'Content-Type': \"application/octet-stream\",\n\t\t'binaryStringRequestBody': \"true\"\n\t};\n};\n\nvar getActionHeaders = exports.getActionHeaders = function (verb, digest) {\n\tif (!verb) return getStandardHeaders(digest);\n\treturn _extends({}, getStandardHeaders(digest), {\n\t\t\"X-HTTP-Method\": verb\n\t});\n};\n\nvar decorateETag = function decorateETag(headers, etag) {\n\tif (etag) headers[\"If-Match\"] = etag;\n\treturn headers;\n};\n\nexports.getUpdateHeaders = function (digest, etag) {\n\treturn decorateETag(getActionHeaders(\"MERGE\", digest), etag);\n};\nexports.getDeleteHeaders = function (digest, etag) {\n\treturn decorateETag(getActionHeaders(\"DELETE\", digest), etag);\n};\n//# sourceMappingURL=requestHeaders.js.map"
        },
        {
          "id": 3,
          "identifier": "C:\\gitwip\\spscript\\node_modules\\timers-browserify\\main.js",
          "name": "./~/timers-browserify/main.js",
          "index": 2,
          "index2": 0,
          "size": 2105,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\gitwip\\spscript\\node_modules\\promise-polyfill\\promise.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 3,
              "moduleIdentifier": "C:\\gitwip\\spscript\\node_modules\\timers-browserify\\main.js",
              "module": "./~/timers-browserify/main.js",
              "moduleName": "./~/timers-browserify/main.js",
              "type": "cjs require",
              "userRequest": "setImmediate",
              "loc": "1:0-73"
            },
            {
              "moduleId": 3,
              "moduleIdentifier": "C:\\gitwip\\spscript\\node_modules\\timers-browserify\\main.js",
              "module": "./~/timers-browserify/main.js",
              "moduleName": "./~/timers-browserify/main.js",
              "type": "cjs require",
              "userRequest": "clearImmediate",
              "loc": "1:0-73"
            },
            {
              "moduleId": 18,
              "moduleIdentifier": "C:\\gitwip\\spscript\\node_modules\\promise-polyfill\\promise.js",
              "module": "./~/promise-polyfill/promise.js",
              "moduleName": "./~/promise-polyfill/promise.js",
              "type": "cjs require",
              "userRequest": "setImmediate",
              "loc": "1:0-73"
            }
          ],
          "source": "var nextTick = require('process/browser.js').nextTick;\nvar apply = Function.prototype.apply;\nvar slice = Array.prototype.slice;\nvar immediateIds = {};\nvar nextImmediateId = 0;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) { timeout.close(); };\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n  var id = nextImmediateId++;\n  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n  immediateIds[id] = true;\n\n  nextTick(function onNextTick() {\n    if (immediateIds[id]) {\n      // fn.call() is faster so we optimize for the common use-case\n      // @see http://jsperf.com/call-apply-segu\n      if (args) {\n        fn.apply(null, args);\n      } else {\n        fn.call(null);\n      }\n      // Prevent ids from leaking\n      exports.clearImmediate(id);\n    }\n  });\n\n  return id;\n};\n\nexports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n  delete immediateIds[id];\n};"
        },
        {
          "id": 4,
          "identifier": "C:\\gitwip\\spscript\\lib\\ajax.js",
          "name": "./lib/ajax.js",
          "index": 19,
          "index2": 17,
          "size": 2742,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\gitwip\\spscript\\entries\\spscript.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 0,
              "moduleIdentifier": "C:\\gitwip\\spscript\\entries\\spscript.js",
              "module": "./entries/spscript.js",
              "moduleName": "./entries/spscript.js",
              "type": "cjs require",
              "userRequest": "../lib/ajax",
              "loc": "13:16-38"
            },
            {
              "moduleId": 15,
              "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\restDao.js",
              "module": "./lib/restDao.js",
              "moduleName": "./lib/restDao.js",
              "type": "cjs require",
              "userRequest": "./ajax",
              "loc": "6:11-28"
            }
          ],
          "source": "\"use strict\";\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n/**\r\n* @namespace SPScript.ajax\r\n*/\n\nvar defaults = {\n\tmethod: \"GET\",\n\tasync: true,\n\ttype: \"json\", //XMLHttpRequest.responseType\n\tdata: undefined\n};\n\nvar validMethods = [\"GET\", \"POST\", \"PUT\", \"HEAD\", \"DELETE\", \"PATCH\"];\n\nvar errorHandlers = [];\n\nvar validateOptions = function validateOptions(options) {\n\tif (!options || !options.url || validMethods.indexOf(options.method) < 0) return false;else return true;\n};\n\nvar setHeaders = function setHeaders(xhr, headersObj) {\n\tif (headersObj) {\n\t\tObject.keys(headersObj).forEach(function (key) {\n\t\t\txhr.setRequestHeader(key, headersObj[key]);\n\t\t});\n\t}\n};\n\n/**\r\n * Performs and AJAX request based on options you pass you. Your options must at least have a url.\r\n * @param {object} options - Request options like { url, headers, method };\r\n * @returns {Promise} - A ES6 Promise that resolves or rejects when the request comes back\r\n * @function ajax\r\n * @memberof SPScript.ajax\r\n * @example\r\n * var ajaxOptions = { \r\n *    url: '/_api/web/contentTypes', \r\n *    method: \"GET\", \r\n *    headers: { Accept: \"application/json;odata=verbose\" } \r\n * };\r\n * SPScript.utils.ajax(ajaxOptions)\r\n *\t\t.then(SPScript.utils.parseJSON)\r\n *\t\t.then(function(data){ console.log(data.d.results) })\r\n *\t\t.catch(function(error) { console.log(error)})\r\n */\nvar ajax = function ajax(options) {\n\tvar opts = _extends({}, defaults, options);\n\tif (!validateOptions(options)) return Promise.reject(new Error(\"Invalid options passed into ajax call.\"));\n\n\tvar xhr = new XMLHttpRequest();\n\tif (xhr == null) return Promise.reject(new Error(\"Your browser doesn't support XMLHttpRequest (ajax).\"));\n\n\txhr.open(opts.method, opts.url, opts.async);\n\tsetHeaders(xhr, opts.headers);\n\txhr.responseType = opts.type;\n\n\treturn new Promise(function (resolve, reject) {\n\t\txhr.onreadystatechange = function () {\n\t\t\t//completed\n\t\t\tif (xhr.readyState === 4) {\n\t\t\t\t// SUCCESS\n\t\t\t\tif (xhr.status < 400 && xhr.status >= 100) {\n\t\t\t\t\tresolve(xhr.response);\n\t\t\t\t} else {\n\t\t\t\t\tvar error = new Error(\"AJAX Request Error: Response Code = \" + xhr.status);\n\t\t\t\t\terror.statusCode = xhr.status;\n\t\t\t\t\terror.body = xhr.response;\n\t\t\t\t\terrorHandlers.forEach(function (fn) {\n\t\t\t\t\t\treturn fn(error, xhr);\n\t\t\t\t\t});\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\txhr.send(opts.data);\n\t});\n};\n\najax.addErrorHandler = function (fn) {\n\treturn errorHandlers.push(fn);\n};\najax.setDefaults = function (options) {\n\treturn _extends(defaults, options);\n};\n\nmodule.exports = ajax;\n//# sourceMappingURL=ajax.js.map"
        },
        {
          "id": 5,
          "identifier": "C:\\gitwip\\spscript\\lib\\permissions.js",
          "name": "./lib/permissions.js",
          "index": 8,
          "index2": 4,
          "size": 7746,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\gitwip\\spscript\\lib\\web.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 13,
              "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\list.js",
              "module": "./lib/list.js",
              "moduleName": "./lib/list.js",
              "type": "cjs require",
              "userRequest": "./permissions",
              "loc": "6:18-42"
            },
            {
              "moduleId": 17,
              "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\web.js",
              "module": "./lib/web.js",
              "moduleName": "./lib/web.js",
              "type": "cjs require",
              "userRequest": "./permissions",
              "loc": "6:18-42"
            }
          ],
          "source": "\"use strict\";\n\nvar utils = require(\"./utils\");\n\n/**\r\n * Allows you to to check on the security of a list or site. You shouldn't be creating instances of the this class, you will get it from the Web or List class.\r\n * @class\r\n * @param {string} baseUrl - Url to the securable\r\n * @param {IBaseDao} dao - Data access object used to make requests.\r\n * @example <caption>Access Permissions class using the 'permissions' property on a Web</caption>\r\n * var dao = new SPScript.RestDao(_spPageContextInfo.webAbsoluteUrl);\r\n *\r\n * dao.web.permissions.getRoleAssignments()\r\n *     .then(function(roleAssignments) { console.log(roleAssignments) });\r\n * @example <caption>Access Permissions class using the 'permissions' property on a List</caption>\r\n * dao.lists(\"Restricted Library\").permissions.getRoleAssignments()\r\n *     .then(function(roleAssignments) { console.log(roleAssignments) });\r\n */\nvar Permissions = function Permissions(baseUrl, dao) {\n   this._dao = dao;\n   this.baseUrl = baseUrl;\n};\n\n/**\r\n * Gets all the role assignments on that securable\r\n * @returns {Promise<Array<RoleAssignment>>} - A Promise that resolves to an array of role assignments\r\n * @example\r\n * dao.web.permissions.getRoleAssignments()\r\n *     .then(function(roleAssignments) { console.log(roleAssignments) });\r\n */\nPermissions.prototype.getRoleAssignments = function () {\n   var url = this.baseUrl + \"/RoleAssignments?$expand=Member,RoleDefinitionBindings\";\n   return this._dao.get(url).then(utils.validateODataV2).then(function (results) {\n      return results.map(transforms.roleAssignment);\n   });\n};\n\n/**\r\n * Gets all the role assignments on that securable. If you don't pass an email, it will use the current user.\r\n * @param {string} [email] - If you don't pass an email it will use current user\r\n * @returns {Promise<Array>} - A Promise that resolves to an array of string base permission values\r\n * @example <caption>Get the current users permissions on a site</caption>\r\n * dao.web.permissions.check()\r\n *     .then(function(basePermissions) { console.log(basePermissions) });\r\n * @example <caption>Get a specified user's permissions on a list</caption>\r\n * var email = \"andrew@andrewpetersen.onmicrosoft.com\"\r\n * dao.lists(\"Restricted Library\").permissions.check(email)\r\n *     .then(function(basePermissions) { console.log(basePermissions) });\r\n */\nPermissions.prototype.check = function (email) {\n   var _this = this;\n\n   var checkPrivs = function checkPrivs(user) {\n      var login = encodeURIComponent(user.LoginName);\n      var url = _this.baseUrl + \"/getusereffectivepermissions(@v)?@v='\" + login + \"'\";\n      return _this._dao.get(url).then(utils.validateODataV2);\n   };\n\n   //if no email, and no current user id, reject\n   if (!email && !utils.isBrowser()) {\n      return Promise.reject(\"Can't Check Permissions.  No email passed and no current user\");\n   }\n\n   // If no email is passed, then get current user, else get user by email\n   var req = !email ? this._dao.get('/web/getuserbyid(' + _spPageContextInfo.userId + ')').then(function (data) {\n      return data.d;\n   }) : this._dao.web.getUser(email);\n\n   return req.then(checkPrivs).then(function (privs) {\n      return permissionMaskToStrings(privs.GetUserEffectivePermissions.Low, privs.GetUserEffectivePermissions.High);\n   });\n};\n\n/**\r\n * Represents a permission on the securable\r\n * @typedef {Object} RoleMember\r\n * @property {string} login - Login Name\r\n * @property {string} name - User or Group title\r\n * @property {string} id - Member Id\r\n */\n\n/**\r\n * Represents a permission on the securable\r\n * @typedef {Object} RoleDef\r\n * @property {string} name - Role Definition name\r\n * @property {string} description - Role Definition description\r\n * @property {Array} basePermissions - Array of base permission strings\r\n */\n\n/**\r\n * Represents a permission on the securable\r\n * @typedef {Object} RoleAssignment\r\n * @property {RoleMember} member - User or group\r\n * @property {Array<RoleDef>} roles - An array of role definitions\r\n */\nvar transforms = {\n   roleAssignment: function roleAssignment(raw) {\n      var priv = {\n         member: {\n            login: raw.Member.LoginName,\n            name: raw.Member.Title,\n            id: raw.Member.Id\n         }\n      };\n      priv.roles = raw.RoleDefinitionBindings.results.map(function (roleDef) {\n         return {\n            name: roleDef.Name,\n            description: roleDef.Description,\n            basePermissions: permissionMaskToStrings(roleDef.BasePermissions.Low, roleDef.BasePermissions.High)\n         };\n      });\n      return priv;\n   }\n};\n\nvar permissionMaskToStrings = function permissionMaskToStrings(lowMask, highMask) {\n   var basePermissions = [];\n   spBasePermissions.forEach(function (basePermission) {\n      if ((basePermission.low & lowMask) > 0 || (basePermission.high & highMask) > 0) {\n         basePermissions.push(basePermission.name);\n      }\n   });\n   return basePermissions;\n};\n\n// Scraped it from SP.PermissionKind.\n// Storing it in here to remove sp.js dependency\n\n// var basePermissions = [];\n// Object.keys(SP.PermissionKind).forEach(function(key) {\n// \tvar perm = new SP.BasePermissions();\n//     perm.set(SP.PermissionKind[key]);\n//     var permisison = {\n//     \tname: key,\n//     \tlow: perm.$A_1,\n//     \thigh: perm.$9_1\n//     };\n//     basePermissions.push(permisison);\n// });\n\nvar spBasePermissions = [{\n   \"name\": \"emptyMask\",\n   \"low\": 0,\n   \"high\": 0\n}, {\n   \"name\": \"viewListItems\",\n   \"low\": 1,\n   \"high\": 0\n}, {\n   \"name\": \"addListItems\",\n   \"low\": 2,\n   \"high\": 0\n}, {\n   \"name\": \"editListItems\",\n   \"low\": 4,\n   \"high\": 0\n}, {\n   \"name\": \"deleteListItems\",\n   \"low\": 8,\n   \"high\": 0\n}, {\n   \"name\": \"approveItems\",\n   \"low\": 16,\n   \"high\": 0\n}, {\n   \"name\": \"openItems\",\n   \"low\": 32,\n   \"high\": 0\n}, {\n   \"name\": \"viewVersions\",\n   \"low\": 64,\n   \"high\": 0\n}, {\n   \"name\": \"deleteVersions\",\n   \"low\": 128,\n   \"high\": 0\n}, {\n   \"name\": \"cancelCheckout\",\n   \"low\": 256,\n   \"high\": 0\n}, {\n   \"name\": \"managePersonalViews\",\n   \"low\": 512,\n   \"high\": 0\n}, {\n   \"name\": \"manageLists\",\n   \"low\": 2048,\n   \"high\": 0\n}, {\n   \"name\": \"viewFormPages\",\n   \"low\": 4096,\n   \"high\": 0\n}, {\n   \"name\": \"anonymousSearchAccessList\",\n   \"low\": 8192,\n   \"high\": 0\n}, {\n   \"name\": \"open\",\n   \"low\": 65536,\n   \"high\": 0\n}, {\n   \"name\": \"viewPages\",\n   \"low\": 131072,\n   \"high\": 0\n}, {\n   \"name\": \"addAndCustomizePages\",\n   \"low\": 262144,\n   \"high\": 0\n}, {\n   \"name\": \"applyThemeAndBorder\",\n   \"low\": 524288,\n   \"high\": 0\n}, {\n   \"name\": \"applyStyleSheets\",\n   \"low\": 1048576,\n   \"high\": 0\n}, {\n   \"name\": \"viewUsageData\",\n   \"low\": 2097152,\n   \"high\": 0\n}, {\n   \"name\": \"createSSCSite\",\n   \"low\": 4194304,\n   \"high\": 0\n}, {\n   \"name\": \"manageSubwebs\",\n   \"low\": 8388608,\n   \"high\": 0\n}, {\n   \"name\": \"createGroups\",\n   \"low\": 16777216,\n   \"high\": 0\n}, {\n   \"name\": \"managePermissions\",\n   \"low\": 33554432,\n   \"high\": 0\n}, {\n   \"name\": \"browseDirectories\",\n   \"low\": 67108864,\n   \"high\": 0\n}, {\n   \"name\": \"browseUserInfo\",\n   \"low\": 134217728,\n   \"high\": 0\n}, {\n   \"name\": \"addDelPrivateWebParts\",\n   \"low\": 268435456,\n   \"high\": 0\n}, {\n   \"name\": \"updatePersonalWebParts\",\n   \"low\": 536870912,\n   \"high\": 0\n}, {\n   \"name\": \"manageWeb\",\n   \"low\": 1073741824,\n   \"high\": 0\n}, {\n   \"name\": \"anonymousSearchAccessWebLists\",\n   \"low\": -2147483648,\n   \"high\": 0\n}, {\n   \"name\": \"useClientIntegration\",\n   \"low\": 0,\n   \"high\": 16\n}, {\n   \"name\": \"useRemoteAPIs\",\n   \"low\": 0,\n   \"high\": 32\n}, {\n   \"name\": \"manageAlerts\",\n   \"low\": 0,\n   \"high\": 64\n}, {\n   \"name\": \"createAlerts\",\n   \"low\": 0,\n   \"high\": 128\n}, {\n   \"name\": \"editMyUserInfo\",\n   \"low\": 0,\n   \"high\": 256\n}, {\n   \"name\": \"enumeratePermissions\",\n   \"low\": 0,\n   \"high\": 1073741824\n}];\n\nmodule.exports = Permissions;\n//# sourceMappingURL=permissions.js.map"
        },
        {
          "id": 6,
          "identifier": "C:\\gitwip\\spscript\\lib\\queryString.js",
          "name": "./lib/queryString.js",
          "index": 14,
          "index2": 13,
          "size": 2164,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\gitwip\\spscript\\entries\\spscript.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 0,
              "moduleIdentifier": "C:\\gitwip\\spscript\\entries\\spscript.js",
              "module": "./entries/spscript.js",
              "moduleName": "./entries/spscript.js",
              "type": "cjs require",
              "userRequest": "../lib/queryString",
              "loc": "9:23-52"
            },
            {
              "moduleId": 16,
              "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\search.js",
              "module": "./lib/search.js",
              "moduleName": "./lib/search.js",
              "type": "cjs require",
              "userRequest": "./queryString",
              "loc": "3:18-42"
            }
          ],
          "source": "\"use strict\";\n\nvar qs = require(\"querystring\");\n\n/**\r\n* @namespace SPScript.queryString\r\n*/\n\n/**\r\n * Turns a normal js Object into a string in form of \"key1=value1&key2=value2...\"\r\n * @param {Object} obj - Javascript object to query stringify\r\n * @param {bool} [[quoteValues]] - By default, if the value has a space, it will be single quoted. Passing true will cause all values to be quoted.\r\n * @returns {string} - Note: tt does NOT prepend '?' char\r\n * @function fromObj\r\n * @memberof SPScript.queryString\r\n * @example\r\n * var myObj = { id: 123, title: \"My Title\" }\r\n * var qs = SPScript.queryString.fromObj(myObj);\r\n * // qs would output: \"id=123&title='MyTitle'\"\r\n */\nvar fromObj = exports.fromObj = function (obj, quoteValues) {\n\n  var writeParam = function writeParam(key) {\n    var value = (obj[key] + \"\").trim();\n    // if there is a space, wrap in single quotes\n    if (value.indexOf(\" \") > -1 || quoteValues) value = \"'\" + value + \"'\";\n\n    return key + \"=\" + value;\n  };\n\n  var str = Object.keys(obj).map(writeParam).join(\"&\");\n  return str;\n};\n\n/**\r\n * Turns a string in form of \"key1=value1&key2=value2...\" into a javascript object\r\n * @param {string} str - must be in query string format to work\r\n * @returns {Object} - A javascript object with properties for each key found in the query string passed in.\r\n * @function toObj\r\n * @memberof SPScript.queryString\r\n * @example\r\n * // your url is \"https://sharepoint.com/sites/mysite/home.aspx?id=123&title='My Title'\"\r\n * var myObj = SPScript.queryString.toObj(window.location.search);\r\n * //myObj would be { id: 123, title: \"My Title\" }\r\n */\nvar toObj = exports.toObj = function (str) {\n  //if no string is passed use window.location.search\n  if (str === undefined && window && window.location && window.location.search) {\n    str = window.location.search;\n  }\n  if (!str) return {};\n  //trim off the leading '?' if its there\n  if (str[0] === \"?\") str = str.substr(1);\n\n  return qs.parse(str);\n};\n\nexports.contains = function (key, text) {\n  return toObj(text).hasOwnProperty(key);\n};\nexports.getValue = function (key, text) {\n  return toObj(text)[key] || \"\";\n};\n//# sourceMappingURL=queryString.js.map"
        },
        {
          "id": 7,
          "identifier": "C:\\gitwip\\spscript\\node_modules\\mustache\\mustache.js",
          "name": "./~/mustache/mustache.js",
          "index": 20,
          "index2": 19,
          "size": 19391,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\gitwip\\spscript\\entries\\spscript.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 0,
              "moduleIdentifier": "C:\\gitwip\\spscript\\entries\\spscript.js",
              "module": "./entries/spscript.js",
              "moduleName": "./entries/spscript.js",
              "type": "cjs require",
              "userRequest": "mustache",
              "loc": "10:22-41"
            },
            {
              "moduleId": 9,
              "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\csr-renderers.js",
              "module": "./lib/csr-renderers.js",
              "moduleName": "./lib/csr-renderers.js",
              "type": "cjs require",
              "userRequest": "mustache",
              "loc": "3:17-36"
            }
          ],
          "source": "/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */\n\n/*global define: false Mustache: true*/\n\n(function defineMustache (global, factory) {\n  if (typeof exports === 'object' && exports && typeof exports.nodeName !== 'string') {\n    factory(exports); // CommonJS\n  } else if (typeof define === 'function' && define.amd) {\n    define(['exports'], factory); // AMD\n  } else {\n    global.Mustache = {};\n    factory(global.Mustache); // script, wsh, asp\n  }\n}(this, function mustacheFactory (mustache) {\n\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill (object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction (object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr (obj) {\n    return isArray(obj) ? 'array' : typeof obj;\n  }\n\n  function escapeRegExp (string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty (obj, propName) {\n    return obj != null && typeof obj === 'object' && (propName in obj);\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp (re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace (string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml (string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   */\n  function parseTemplate (template, tags) {\n    if (!template)\n      return [];\n\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace () {\n      if (hasTag && !nonSpace) {\n        while (spaces.length)\n          delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags (tagsToCompile) {\n      if (typeof tagsToCompile === 'string')\n        tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n        throw new Error('Invalid tags: ' + tagsToCompile);\n\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n          } else {\n            nonSpace = true;\n          }\n\n          tokens.push([ 'text', chr, start, start + 1 ]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n')\n            stripSpace();\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe))\n        break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe))\n        throw new Error('Unclosed tag at ' + scanner.pos);\n\n      token = [ type, value, start, scanner.pos ];\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection)\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value)\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection)\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens (tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens (tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner (string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos () {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan (re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0)\n      return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context (view, parentContext) {\n    this.view = view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup (name) {\n    var cache = this.cache;\n\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this, names, index, lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          value = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           **/\n          while (value != null && index < names.length) {\n            if (index === names.length - 1)\n              lookupHit = hasProperty(value, names[index]);\n\n            value = value[names[index++]];\n          }\n        } else {\n          value = context.view[name];\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit)\n          break;\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value))\n      value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer () {\n    this.cache = {};\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache () {\n    this.cache = {};\n  };\n\n  /**\n   * Parses and caches the given `template` and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse (template, tags) {\n    var cache = this.cache;\n    var tokens = cache[template];\n\n    if (tokens == null)\n      tokens = cache[template] = parseTemplate(template, tags);\n\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   */\n  Writer.prototype.render = function render (template, view, partials) {\n    var tokens = this.parse(template);\n    var context = (view instanceof Context) ? view : new Context(view);\n    return this.renderTokens(tokens, context, partials, template);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);\n      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);\n      else if (symbol === '>') value = this.renderPartial(token, context, partials, originalTemplate);\n      else if (symbol === '&') value = this.unescapedValue(token, context);\n      else if (symbol === 'name') value = this.escapedValue(token, context);\n      else if (symbol === 'text') value = this.rawValue(token);\n\n      if (value !== undefined)\n        buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender (template) {\n      return self.render(template, context, partials);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string')\n        throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null)\n        buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n    }\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0))\n      return this.renderTokens(token[4], context, partials, originalTemplate);\n  };\n\n  Writer.prototype.renderPartial = function renderPartial (token, context, partials) {\n    if (!partials) return;\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null)\n      return this.renderTokens(this.parse(value), context, partials, value);\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return mustache.escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue (token) {\n    return token[1];\n  };\n\n  mustache.name = 'mustache.js';\n  mustache.version = '2.3.0';\n  mustache.tags = [ '{{', '}}' ];\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view` and `partials` using the\n   * default writer.\n   */\n  mustache.render = function render (template, view, partials) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                          'but \"' + typeStr(template) + '\" was given as the first ' +\n                          'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials);\n  };\n\n  // This is here for backwards compatibility with 0.4.x.,\n  /*eslint-disable */ // eslint wants camel cased function name\n  mustache.to_html = function to_html (template, view, partials, send) {\n    /*eslint-enable*/\n\n    var result = mustache.render(template, view, partials);\n\n    if (isFunction(send)) {\n      send(result);\n    } else {\n      return result;\n    }\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n  return mustache;\n}));\n"
        },
        {
          "id": 8,
          "identifier": "C:\\gitwip\\spscript\\lib\\baseDao.js",
          "name": "./lib/baseDao.js",
          "index": 5,
          "index2": 16,
          "size": 4386,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\gitwip\\spscript\\lib\\restDao.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 15,
              "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\restDao.js",
              "module": "./lib/restDao.js",
              "moduleName": "./lib/restDao.js",
              "type": "cjs require",
              "userRequest": "./baseDao",
              "loc": "5:14-34"
            }
          ],
          "source": "\"use strict\";\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar List = require(\"./list\");\nvar Web = require(\"./web\");\nvar Profiles = require(\"./profiles\");\nvar Search = require(\"./search\");\nvar utils = require(\"./utils\");\nvar CustomActions = require(\"./customActions\");\nvar headerUtils = require(\"./requestHeaders\");\n/**\r\n * Abstract class. You'll never work with this directly. \r\n * @abstract\r\n * @private\r\n * @property {Web} web - Allows interacting with the SharePoint site you connected to\r\n * @property {Search} search - Allows querying through the SP Search Service\r\n * @property {Profiles} profiles - Allows interacting with the SP Profile Service\r\n */\nvar BaseDao = function BaseDao() {\n\tthis.web = new Web(this);\n\tthis.search = new Search(this);\n\tthis.profiles = new Profiles(this);\n\tthis.customActions = new CustomActions(this);\n};\n\nBaseDao.prototype.executeRequest = function () {\n\tthrow \"Not implemented exception\";\n};\n\n/**\r\n * Generic helper to make AJAX GET request\r\n  * @example <caption>Use generic GET method to retrieve a site's content types</caption>\r\n * dao.get('/web/contentTypes').then(function(data) { console.log(data.d.results)})\r\n * @param {string} relativeQueryUrl - the API url relative to \"/_api\"\r\n * @param {Object} [extendedOptions] - AJAX options (like custom request headers)\r\n * @returns {Promise} - An ES6 Promise that resolves to the an object probably in the form of data.d\r\n */\nBaseDao.prototype.get = function (relativeQueryUrl, extendedOptions) {\n\tvar options = _extends({}, {\n\t\tmethod: \"GET\"\n\t}, extendedOptions);\n\treturn this.executeRequest(relativeQueryUrl, options).then(utils.parseJSON);\n};\n\nBaseDao.prototype.getRequestDigest = function () {\n\treturn this.post('/contextinfo', {}).then(function (data) {\n\t\treturn data.d.GetContextWebInformation.FormDigestValue;\n\t});\n};\n/**\r\n * If a list name is passed, an SPScript.List object, otherwise performs a request to get all the site's lists\r\n * @param {string} [listname] - If a list name is passed, method is synchronous returning an SPScript.List\r\n * @returns {List|Promise} - SPScript.List object or a Promise that resolves to an Array of lists\r\n * @example <caption>Option 1: No List Name gets all the lists of a site</caption>\r\n * dao.lists().then(function(lists) { console.log(lists)});\r\n * @example <caption>Option 2: Pass a List Name to get a list object</caption>\r\n * var list = dao.lists('MyList');\r\n * list.getItemById(12).then(function(item) { console.log(item)});\r\n */\nBaseDao.prototype.lists = function (listname) {\n\tif (!listname) {\n\t\treturn this.get(\"/web/lists\").then(utils.validateODataV2);\n\t}\n\treturn new List(listname, this);\n};\n\n/**\r\n * Generic helper to make AJAX POST request\r\n * @param {string} relativeQueryUrl - the API url relative to \"/_api\"\r\n * @param {Object} [extendedOptions] - AJAX options (like custom request headers)\r\n * @returns {Promise} - An ES6 Promise\r\n */\nBaseDao.prototype.post = function (relativePostUrl, body, opts) {\n\tbody = packagePostBody(body, opts);\n\tvar options = {\n\t\tmethod: \"POST\",\n\t\tdata: body\n\t};\n\toptions = _extends({}, options, opts);\n\treturn this.executeRequest(relativePostUrl, options).then(utils.parseJSON);\n};\n\nBaseDao.prototype.authorizedPost = function (relativePostUrl, body, verb) {\n\tvar _this = this;\n\n\treturn this.getRequestDigest().then(function (digest) {\n\t\treturn headerUtils.getActionHeaders(verb, digest);\n\t}).then(function (headers) {\n\t\treturn _this.post(relativePostUrl, body, { headers: headers });\n\t});\n};\n\nBaseDao.prototype.ensureRequestDigest = function (digest) {\n\treturn digest ? Promise.resolve(digest) : this.getRequestDigest();\n};\n\n//Skip stringify it its already a string or it has an explicit Content-Type that is not JSON\nvar packagePostBody = function packagePostBody(body, opts) {\n\t// if its already a string just return\n\tif (typeof body === \"string\") return body;\n\t// if it has an explicit content-type, asssume the body is already that type\n\tif (opts && opts.headers && opts.headers[\"Content-Type\"] && opts.headers[\"Content-Type\"].indexOf(\"json\") === -1) {\n\t\treturn body;\n\t}\n\t//others stringify\n\treturn JSON.stringify(body);\n};\nmodule.exports = BaseDao;\n//# sourceMappingURL=baseDao.js.map"
        },
        {
          "id": 9,
          "identifier": "C:\\gitwip\\spscript\\lib\\csr-renderers.js",
          "name": "./lib/csr-renderers.js",
          "index": 22,
          "index2": 20,
          "size": 1571,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\gitwip\\spscript\\lib\\csr.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 10,
              "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\csr.js",
              "module": "./lib/csr.js",
              "moduleName": "./lib/csr.js",
              "type": "cjs require",
              "userRequest": "./csr-renderers",
              "loc": "5:36-62"
            }
          ],
          "source": "\"use strict\";\n\nvar templating = require(\"mustache\");\n\nfunction createTemplateRenderer(htmlTemplate, events) {\n    return function (ctx) {\n        return templating.render(htmlTemplate, ctx);\n    };\n}\n\nfunction createFormFieldRenderer(field) {\n    return function (ctx) {\n        var formCtx = ctx.FormContext;\n        if (field.onReady) {\n            if (formCtx) {\n                formCtx.registerInitCallback(field.name, field.onReady.bind(null, ctx));\n            } else {\n                setTimeout(field.onReady.bind(null, ctx), 100);\n            }\n        }\n        if (field.getValue && formCtx) {\n            formCtx.registerGetValueCallback(field.name, field.getValue.bind(null, ctx));\n        }\n        // tack on 'setValue' function\n        if (formCtx && formCtx.updateControlValue) {\n            field.setValue = function (value) {\n                formCtx.updateControlValue(field.name, value);\n            };\n        }\n\n        return field.render(ctx);\n    };\n}\n\nfunction createDisplayFieldRenderer(field) {\n    return function (ctx) {\n        var formCtx = ctx.FormContext;\n        if (formCtx && formCtx.registerInitCallback && field.onReady) {\n            formCtx.registerInitCallback(field.name, field.onReady);\n        }\n        return field.render(ctx);\n    };\n}\n\nvar renderers = {\n    template: {\n        create: createTemplateRenderer\n    },\n    formField: {\n        create: createFormFieldRenderer\n    },\n    displayField: {\n        create: createDisplayFieldRenderer\n    }\n};\n\nmodule.exports = renderers;\n//# sourceMappingURL=csr-renderers.js.map"
        },
        {
          "id": 10,
          "identifier": "C:\\gitwip\\spscript\\lib\\csr.js",
          "name": "./lib/csr.js",
          "index": 21,
          "index2": 21,
          "size": 3073,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\gitwip\\spscript\\entries\\spscript.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 0,
              "moduleIdentifier": "C:\\gitwip\\spscript\\entries\\spscript.js",
              "module": "./entries/spscript.js",
              "moduleName": "./entries/spscript.js",
              "type": "cjs require",
              "userRequest": "../lib/csr",
              "loc": "14:15-36"
            }
          ],
          "source": "\"use strict\";\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar renderers = exports.renderers = require(\"./csr-renderers\");\n\n//fieldComponent = { name, onReady, render, getValue, locations:[\"View\", \"NewForm\",\"DisplayForm\", \"EditForm\"] }\n// var renderColoredStatus = function(ctx) {\n//     // map statuses  to colors\n//     var colors = {\n//         \"Not Started\": \"orange\",\n//         \"In Progress\": \"yellow\",\n//         \"Done\": \"green\"\n//     };\n\n//     // Look at the item's status to get the mapped color\n//     // If the item has a status value that is not mapped, then use 'red'\n//     var color = colors[ctx.CurrentItem.Status] || \"red\";\n\n//     // return the html used to render the status field;\n//     return \"<h4 style='color:\" + color + \"'>\" + ctx.CurrentItem.Status + \"</h4>\";\n// };\n\n// var fieldOverride = {\n//     name:  \"Status\",\n//     render: renderColoredStatus\n// };\n\n// SPScript.CSR.registerDisplayField(fieldOverride);\n\nvar registerFormField = exports.registerFormField = function (fieldComponent, opts) {\n    var renderer = renderers.formField.create(fieldComponent);\n    fieldComponent.locations = fieldComponent.locations || [\"NewForm\", \"EditForm\"];\n    return registerField(fieldComponent, renderer, opts);\n};\n\n//{name, onReady, render, locations: [\"View\", \"DisplayForm\"]}\nvar registerDisplayField = exports.registerDisplayField = function (fieldComponent, opts) {\n    var renderer = renderers.displayField.create(fieldComponent);\n    fieldComponent.locations = fieldComponent.locations || [\"View\", \"DisplayForm\"];\n    return registerField(fieldComponent, renderer, opts);\n};\n\nvar registerField = exports.registerField = function (field, renderer, opts) {\n    var renderers = {};\n    //View, DisplayForm, EditForm, NewForm\n    field.locations.forEach(function (l) {\n        return renderers[l] = renderer;\n    });\n    var defaults = {\n        Templates: {\n            Fields: {}\n        }\n    };\n    var templateOverride = _extends({}, defaults, opts);\n    templateOverride.Templates.Fields[field.name] = renderers;\n    SPClientTemplates.TemplateManager.RegisterTemplateOverrides(templateOverride);\n    return field;\n};\n\nvar registerView = exports.registerView = function (templates, options) {\n    // templates keys are Header, Item, Footer\n    //RenderFieldTemplateDefault(ctx); default renderer?\n    var defaults = {\n        //BaseViewID\n        //ListTemplateType\n        Templates: {\n            Header: function Header() {\n                return \"\";\n            },\n            Footer: function Footer() {\n                return \"\";\n            }\n        }\n    };\n\n    var templateOverride = _extends({}, defaults, options);\n    templateOverride.Templates = _extends({}, templateOverride.Templates, templates);\n\n    SPClientTemplates.TemplateManager.RegisterTemplateOverrides(templateOverride);\n};\n//# sourceMappingURL=csr.js.map"
        },
        {
          "id": 11,
          "identifier": "C:\\gitwip\\spscript\\lib\\customActions.js",
          "name": "./lib/customActions.js",
          "index": 18,
          "index2": 15,
          "size": 4860,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\gitwip\\spscript\\lib\\baseDao.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 8,
              "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\baseDao.js",
              "module": "./lib/baseDao.js",
              "moduleName": "./lib/baseDao.js",
              "type": "cjs require",
              "userRequest": "./customActions",
              "loc": "10:20-46"
            }
          ],
          "source": "\"use strict\";\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar utils = require(\"./utils\");\nvar headers = require(\"./requestHeaders\");\n\nvar metadata = {\n\t__metadata: {\n\t\t\"type\": \"SP.UserCustomAction\"\n\t}\n};\n\nvar CustomActions = function CustomActions(dao) {\n\tvar _this = this;\n\n\tthis._dao = dao;\n\n\tthis.scopes = {\n\t\t\"Web\": {\n\t\t\tid: 3,\n\t\t\tname: \"Web\",\n\t\t\turl: \"/web/usercustomactions\"\n\t\t},\n\t\t\"Site\": {\n\t\t\tid: 2,\n\t\t\tname: \"Site\",\n\t\t\turl: \"/site/usercustomactions\"\n\t\t}\n\t};\n\tthis.scopes.getById = function (id) {\n\t\treturn id === 2 ? _this.scopes.Site : _this.scopes.Web;\n\t};\n};\n\n//\n// If a name is passed, filter the result set\nCustomActions.prototype.get = function (name) {\n\tvar _this2 = this;\n\n\t// first get the site scoped ones, then the web scoped ones\n\treturn this._dao.get(this.scopes.Site.url).then(utils.validateODataV2).then(function (siteCustomActions) {\n\t\treturn _this2._dao.get(_this2.scopes.Web.url).then(utils.validateODataV2)\n\t\t//combine site scoped and web scoped into single array\n\t\t.then(function (webCustomActions) {\n\t\t\treturn siteCustomActions.concat(webCustomActions);\n\t\t});\n\t}).then(function (customActions) {\n\t\t// if a name was passed filter it otherwise return everything\n\t\tif (name) {\n\t\t\tvar matches = customActions.filter(function (a) {\n\t\t\t\treturn a.Name === name;\n\t\t\t});\n\t\t\tif (matches.length) {\n\t\t\t\treturn matches[0];\n\t\t\t}\n\t\t\tthrow new Error(\"Unable to find Custom Action with name: \" + name);\n\t\t} else return customActions;\n\t});\n};\n\nCustomActions.prototype._getUrl = function (name) {\n\tvar _this3 = this;\n\n\treturn this.get(name).then(function (a) {\n\t\treturn _this3.scopes.getById(a.Scope).url + \"('\" + a.Id + \"')\";\n\t});\n};\n\nCustomActions.prototype._getUrlAndDigest = function (name) {\n\tvar _this4 = this;\n\n\tvar prep = {};\n\treturn this._getUrl(name).then(function (url) {\n\t\tprep.url = url;\n\t\treturn _this4._dao.getRequestDigest();\n\t}).then(function (digest) {\n\t\tprep.digest = digest;\n\t\treturn prep;\n\t});\n};\n\nCustomActions.prototype.update = function (updates) {\n\tvar _this5 = this;\n\n\tif (!updates || !updates.Name) throw new Error(\"You must at least pass a Custom Action 'Name'\");\n\n\treturn this._getUrlAndDigest(updates.Name).then(function (prep) {\n\t\tupdates = _extends({}, metadata, updates);\n\t\tvar opts = {\n\t\t\theaders: headers.getUpdateHeaders(prep.digest)\n\t\t};\n\t\treturn _this5._dao.post(prep.url, updates, opts);\n\t});\n};\n\nCustomActions.prototype.remove = function (name) {\n\tvar _this6 = this;\n\n\tif (!name) throw new Error(\"You must at least pass a Custom Action 'Name'\");\n\treturn this._getUrlAndDigest(name).then(function (prep) {\n\t\tvar opts = {\n\t\t\theaders: headers.getDeleteHeaders(prep.digest)\n\t\t};\n\t\treturn _this6._dao.post(prep.url, {}, opts);\n\t});\n};\n\nCustomActions.prototype.add = function (customAction) {\n\tvar _this7 = this;\n\n\tif (!customAction || !customAction.Name || !customAction.Location) throw new Error(\"You must at least pass a Custom Action 'Name' and 'Location'\");\n\tcustomAction.Scope = customAction.Scope || \"Web\";\n\treturn this._dao.getRequestDigest().then(function (digest) {\n\t\tcustomAction = _extends({}, metadata, customAction);\n\t\tvar scope = _this7.scopes[customAction.Scope];\n\t\tcustomAction.Scope = scope.id;\n\t\tvar opts = {\n\t\t\theaders: headers.getAddHeaders(digest)\n\t\t};\n\t\treturn _this7._dao.post(scope.url, customAction, opts);\n\t});\n};\n\nCustomActions.prototype.addScriptLink = function (name, url, opts) {\n\tvar customAction = {\n\t\tName: name,\n\t\tTitle: name,\n\t\tDescription: name,\n\t\tGroup: name,\n\t\tSequence: 100,\n\t\tScope: \"Web\",\n\t\tLocation: \"ScriptLink\",\n\t\tScriptSrc: url\n\t};\n\tcustomAction = _extends({}, customAction, opts || {});\n\n\treturn this.add(customAction);\n};\n\nCustomActions.prototype.addCSSLink = function (name, url, opts) {\n\tvar scriptBlockStr = \"\\n\\t\\t(function() {\\n\\t\\t\\tvar head = document.querySelector(\\\"head\\\");\\n\\t\\t\\tvar styleTag = document.createElement(\\\"style\\\");\\n\\t\\t\\tstyleTag.appendChild(document.createTextNode(\\\"body { opacity: 0 }\\\"));\\n\\t\\t\\t\\n\\t\\t\\tvar linkTag = document.createElement(\\\"link\\\");\\n\\t\\t\\tlinkTag.rel = \\\"stylesheet\\\";\\tlinkTag.href = \\\"\" + url + \"\\\"; linkTag.type = \\\"text/css\\\";\\n\\t\\t\\tlinkTag.addEventListener(\\\"load\\\", function() {\\n\\t\\t\\t\\thead.removeChild(styleTag);\\n\\t\\t\\t});\\n\\n\\t\\t\\thead.appendChild(styleTag);\\n\\t\\t\\thead.appendChild(linkTag);\\n\\t\\t})();\";\n\n\tvar customAction = {\n\t\tName: name,\n\t\tTitle: name,\n\t\tDescription: name,\n\t\tGroup: name,\n\t\tSequence: 100,\n\t\tScope: \"Web\",\n\t\tLocation: \"ScriptLink\",\n\t\tScriptBlock: scriptBlockStr\n\t};\n\tcustomAction = _extends({}, customAction, opts || {});\n\n\treturn this.add(customAction);\n};\nCustomActions.metadata = metadata;\n\nmodule.exports = CustomActions;\n//# sourceMappingURL=customActions.js.map"
        },
        {
          "id": 12,
          "identifier": "C:\\gitwip\\spscript\\lib\\filesystem.js",
          "name": "./lib/filesystem.js",
          "index": 11,
          "index2": 7,
          "size": 2879,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\gitwip\\spscript\\lib\\web.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 17,
              "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\web.js",
              "module": "./lib/web.js",
              "moduleName": "./lib/web.js",
              "type": "cjs require",
              "userRequest": "./filesystem",
              "loc": "8:13-36"
            }
          ],
          "source": "\"use strict\";\n\nvar utils = require(\"./utils\");\n\n/**\r\n * Represents a SharePoint Folder.  Keep in mind, and File or Folder objects obtained from the 'files' and 'folders' array will not have their child items populated.\r\n * @typedef Folder\r\n * @property {string} name - Folder name\r\n * @property {string} serverRelativeUrl - Server relative url\r\n * @property {int} itemCount - Number of items in the folder\r\n * @property {string} guid - Unique ID of the folder\r\n * @property {string} uri - API url to get the raw SP.Folder object\r\n * @property {Array<File>} files - An array of files in that folder\r\n * @property {Array<Folder>} folders - An array of sub folders\r\n * @example\r\n *  dao.web.getFolder(\"/sites/mysite/Shared Documents\")\r\n *\t\t\t.then(function(folder) { \r\n *\t\t\t\tconsole.log(folder.name);\r\n *\t\t\t\tconsole.log(folder.files);\r\n *\t\t\t});\r\n */\nvar Folder = function Folder(spFolder) {\n  this.mapProperties(spFolder);\n  this.populateChildren(spFolder);\n};\n\nFolder.prototype.populateChildren = function (spFolder) {\n  if (spFolder && spFolder.Folders && spFolder.Folders.results) {\n    this.folders = spFolder.Folders.results.map(function (f) {\n      return new Folder(f);\n    });\n  }\n  if (spFolder && spFolder.Files && spFolder.Files.results) {\n    this.files = spFolder.Files.results.map(function (f) {\n      return new File(f);\n    });\n  }\n};\n\nFolder.prototype.mapProperties = function (spFolder) {\n  this.name = spFolder.Name;\n  this.serverRelativeUrl = spFolder.ServerRelativeUrl;\n  this.itemCount = spFolder.ItemCount;\n  this.guid = spFolder.UniqueId;\n  this.uri = spFolder.__metadata.uri;\n};\n\n/**\r\n * Represents a SharePoint File\r\n * @typedef File\r\n * @property {string} name - Folder name\r\n * @property {string} title - Folder title\r\n * @property {string} serverRelativeUrl - Server relative url\r\n * @property {int} byteLength - File size in bytes\r\n * @property {string} checkoutType - Checked out status of file.  \"none\", \"offline\", \"online\".\r\n * @property {number} majorVersion - Major version of the file\r\n * @property {number} minorVersion - Minor version of the file\r\n * @property {string} uri - API url to get the raw SP.Folder object\r\n * @example\r\n *  dao.web.getFile(\"/sites/mysite/Shared Documents/myFile.docx\")\r\n *\t\t\t.then(function(file) { \r\n *\t\t\t\tconsole.log(file.name);\r\n *\t\t\t\tconsole.log(\"Size:\" + (file.byteLength / 1000) + \"KB\");\r\n *\t\t\t});\r\n */\nvar File = function File(spFile) {\n  this.mapProperties(spFile);\n};\n\nFile.prototype.mapProperties = function (spFile) {\n  this.name = spFile.Name, this.title = spFile.Title, this.checkoutType = spFile.CheckOutType, this.byteLength = spFile.Length, this.majorVersion = spFile.MajorVersion, this.minorVersion = spFile.MinorVersion, this.serverRelativeUrl = spFile.ServerRelativeUrl, this.uri = spFile.__metadata.uri;\n};\n\nmodule.exports = {\n  File: File,\n  Folder: Folder\n};\n//# sourceMappingURL=filesystem.js.map"
        },
        {
          "id": 13,
          "identifier": "C:\\gitwip\\spscript\\lib\\list.js",
          "name": "./lib/list.js",
          "index": 6,
          "index2": 6,
          "size": 10884,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\gitwip\\spscript\\lib\\baseDao.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 8,
              "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\baseDao.js",
              "module": "./lib/baseDao.js",
              "moduleName": "./lib/baseDao.js",
              "type": "cjs require",
              "userRequest": "./list",
              "loc": "5:11-28"
            }
          ],
          "source": "\"use strict\";\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar utils = require(\"./utils\");\nvar Permissions = require(\"./permissions\");\nvar headers = require(\"./requestHeaders\");\n\n/**\r\n * Represents a SharePoint list. You shouldn't ever be new'ing this class up up yourself, instead you'll get it from your dao as shown in first example.\r\n * @class\r\n * @param {IBaseDao} dao - Data access object used to make requests.\r\n * @property {Permissions} permissions - allows checking security information of the Web\r\n * @property {string} baseUrl - API relative url (value = \"/web\")\r\n * @example <caption>You access a 'List' by passing a name to the 'lists' property of the dao.</caption>\r\n * var dao = new SPScript.RestDao(_spPageContextInfo.webAbsoluteUrl);\r\n * var list = dao.lists(\"Tasks\");\r\n * list.getItemById(12).then(function(item) { console.log(item) });\r\n */\nvar List = function List(listname, dao) {\n\tthis.listname = listname;\n\tthis.baseUrl = \"/web/lists/getbytitle('\" + listname + \"')\";\n\tthis._dao = dao;\n\tthis.permissions = new Permissions(this.baseUrl, this._dao);\n};\n\nList.prototype.getFields = function (odataQuery) {\n\tvar url = this.baseUrl + \"/fields\" + appendOData(odataQuery);\n\treturn this._dao.get(url).then(utils.validateODataV2);\n};\n\nList.prototype.getField = function (fieldName) {\n\treturn this.getFields(\"$filter=InternalName eq '\" + fieldName + \"'\").then(function (fields) {\n\t\tif (fields.length) return fields[0];else throw new Error(\"Unable to find field: \" + fieldName);\n\t});\n};\n\nList.prototype.updateField = function (fieldName, updates) {\n\tvar _this = this;\n\n\tthis.getField(fieldName).then(function (f) {\n\t\tvar url = _this.baseUrl + \"/Fields(guid'\" + f.Id + \"')\";\n\t\tupdates.__metadata = { type: \"SP.Field\" };\n\t\treturn _this._dao.authorizedPost(url, updates, \"MERGE\");\n\t});\n};\n/**\r\n * Retrieves items in the lists\r\n * @param {string} [odata] - OData string\r\n * @returns {Promise<Array>} - A Promise that resolves an array of list items\r\n * @example <caption>Get all items</caption>\r\n * list.getItems().then(function(items) { console.log(items) });\r\n * @example <caption>Get first 5 items by passing in optional OData.</caption>\r\n * list.getItems(\"$top=5\").then(function(items) { console.log(items) });\r\n */\nList.prototype.getItems = function (odataQuery) {\n\treturn this._dao.get(this.baseUrl + \"/items\" + appendOData(odataQuery)).then(utils.validateODataV2);\n};\n\n/**\r\n * Retrieves a specific item based on SharePoint ID\r\n * @param {int} id - SharePoint integer Id\r\n * @param {string} [odata] - OData string\r\n * @returns {Promise} - A Promise that resolves to a single list item\r\n * @example <caption>Get the item with ID of 5.</caption>\r\n * list.getItemById(5).then(function(item) { console.log(item) });\r\n * @example <caption>Only bring back 'Title' and 'Status' using optional OData string</caption>\r\n * list.getItemById(5, \"$select=Title,Status\").then(function(items) { console.log(items) });\r\n */\nList.prototype.getItemById = function (id, odata) {\n\tvar url = this.baseUrl + \"/items(\" + id + \")\" + appendOData(odata);\n\treturn this._dao.get(url).then(utils.validateODataV2);\n};\n\n/**\r\n * Retrieves basic information about the list\r\n * @returns {Promise<SP.Web>} - A Promise that resolves to an object containing non-deferred properties of an SP.List (https://msdn.microsoft.com/en-us/library/office/jj244873.aspx)\r\n * @example\r\n * list.info().then(function(info) { console.log(info) });\r\n */\nList.prototype.info = function () {\n\treturn this._dao.get(this.baseUrl).then(utils.validateODataV2);\n};\n\n/**\r\n * Creates a SharePoint list item\r\n * @param {object} item - Javascript object representing the list item\r\n * @param {string} [requestDigest] - Optional request digest token used to authorize the action. One will be automatically retrieved if not provided.\r\n * @returns {Promise} - A Promise that resolves to the inserted list item\r\n * @example <caption>Add a list item. Set Title and Status.</caption>\r\n * var newItem = {\r\n *    Title: \"Test Created Item\",\r\n *    MyStatus: \"Red\"\r\n * };\r\n * list.addItem(newItem).then(function(item) { console.log(item) });\r\n */\n\nList.prototype.addItem = function (item, digest) {\n\tvar _this2 = this;\n\n\treturn this._dao.ensureRequestDigest(digest).then(function (digest) {\n\t\treturn _this2._dao.get(_this2.baseUrl).then(function (data) {\n\n\t\t\t//decorate the item with the 'type' metadata\n\t\t\titem = _extends({}, {\n\t\t\t\t\"__metadata\": {\n\t\t\t\t\t\"type\": data.d.ListItemEntityTypeFullName\n\t\t\t\t}\n\t\t\t}, item);\n\n\t\t\tvar customOptions = {\n\t\t\t\theaders: headers.getAddHeaders(digest)\n\t\t\t};\n\t\t\treturn _this2._dao.post(_this2.baseUrl + \"/items\", item, customOptions);\n\t\t}).then(utils.validateODataV2);\n\t});\n};\n\n/**\r\n * Updates a SharePoint list item\r\n * @param {int} itemId - The SharePoint Id of the item to update\r\n * @param {object} updates - Javascript object representing columns you want to update\r\n * @param {string} [requestDigest] - Optional request digest token used to authorize the action. One will be automatically retrieved if not provided.\r\n * @returns {Promise} - A Promise\r\n * @example <caption>Update the item's Title</caption>\r\n * var updates = {\r\n *    Title: \"Updated Title\"\r\n * };\r\n * list.updateItem(12, updates).then(function() { console.log\"Success\") });\r\n */\nList.prototype.updateItem = function (itemId, updates, digest) {\n\tvar _this3 = this;\n\n\treturn this._dao.ensureRequestDigest(digest).then(function (digest) {\n\t\treturn _this3.getItemById(itemId).then(function (item) {\n\t\t\t//decorate the item with the 'type' metadata\n\t\t\tupdates = _extends({}, {\n\t\t\t\t\"__metadata\": {\n\t\t\t\t\t\"type\": item.__metadata.type\n\t\t\t\t}\n\t\t\t}, updates);\n\n\t\t\tvar customOptions = {\n\t\t\t\theaders: headers.getUpdateHeaders(digest, item.__metadata.etag)\n\t\t\t};\n\n\t\t\treturn _this3._dao.post(item.__metadata.uri, updates, customOptions);\n\t\t});\n\t});\n};\n\n/**\r\n * Updates a SharePoint list item\r\n * @param {int} itemId - The SharePoint Id of the item to update\r\n * @param {string} [requestDigest] - Optional request digest token used to authorize the action. One will be automatically retrieved if not provided.\r\n * @returns {Promise} - A Promise\r\n * @example <caption>Delete the item with an ID of 12</caption>\r\n * list.deleteItem(12).then(function() { console.log\"Success\") });\r\n */\nList.prototype.deleteItem = function (itemId, digest) {\n\tvar _this4 = this;\n\n\treturn this._dao.ensureRequestDigest(digest).then(function (digest) {\n\t\treturn _this4.getItemById(itemId).then(function (item) {\n\t\t\tvar customOptions = {\n\t\t\t\theaders: headers.getDeleteHeaders(digest, item.__metadata.etag)\n\t\t\t};\n\t\t\treturn _this4._dao.post(item.__metadata.uri, \"\", customOptions);\n\t\t});\n\t});\n};\n\n/**\r\n * Attach file to an item in the list\r\n * @param {int} itemId - The SharePoint Id of the item to update\r\n * @param {string} filename - Filename to be put in SharePoint\r\n * @param {string} content - File content\r\n * @returns {Promise} - A Promise\r\n * @example <caption>Attach 'hello.txt' with content 'Hello World' to itemId 12</caption>\r\n * list.addAttachment(12, 'hello.txt', 'Hello World').then(function() { console.log\"Success\") });\r\n */\nList.prototype.addAttachment = function (itemId, filename, content, requestDigest) {\n\tvar _this5 = this;\n\n\tif (requestDigest) return this._addAttachment(itemId, filename, content, requestDigest);\n\treturn this._dao.getRequestDigest().then(function (requestDigest) {\n\t\treturn _this5._addAttachment(itemId, filename, content, requestDigest);\n\t});\n};\n\nList.prototype._addAttachment = function (itemId, filename, content, requestDigest) {\n\tvar customOptions = {\n\t\theaders: headers.getFilestreamHeaders(requestDigest),\n\t\tdata: content\n\t};\n\treturn this._dao.post(this.baseUrl + \"/items(\" + itemId + \")/AttachmentFiles/add(FileName='\" + filename + \"')\", null, customOptions);\n};\n\n/**\r\n * Delete attachment of an item in the list\r\n * @param {int} itemId - The SharePoint Id of the item to update\r\n * @param {string} filename - Filename to be deleted in SharePoint\r\n * @returns {Promise} - A Promise\r\n * @example <caption>Delete attachment 'hello.txt' in itemId 12</caption>\r\n * list.deleteAttachment(12, 'hello.txt').then(function() { console.log\"Success\") });\r\n */\nList.prototype.deleteAttachment = function (itemId, filename, requestDigest) {\n\tvar _this6 = this;\n\n\tif (requestDigest) return this._deleteAttachment(itemId, filename, requestDigest);\n\treturn this._dao.getRequestDigest().then(function (requestDigest) {\n\t\treturn _this6._deleteAttachment(itemId, filename, requestDigest);\n\t});\n};\nList.prototype._deleteAttachment = function (itemId, filename, requestDigest) {\n\tvar _this7 = this;\n\n\treturn this._dao.get(this.baseUrl).then(function (data) {\n\t\tvar customOptions = {\n\t\t\theaders: {\n\t\t\t\t'Accept': 'application/json;odata=verbose',\n\t\t\t\t'X-RequestDigest': requestDigest,\n\t\t\t\t'X-HTTP-Method': \"DELETE\"\n\t\t\t}\n\t\t};\n\t\treturn _this7._dao.post(_this7.baseUrl + \"/items(\" + itemId + \")/AttachmentFiles('\" + filename + \"')\", null, customOptions);\n\t});\n};\n\n/**\r\n * Retrieves items in the list based on the value of a column\r\n * @param {string} key - The column name\r\n * @param {string} value - The column value to match on\r\n * @param {string} [odata] - OData string\r\n * @returns {Promise<Array>} - A Promise that resolves an array of list items\r\n * @example <caption>Get all items whose status is \"In Progress\"</caption>\r\n * list.findItems(\"Status\", \"In Progress\").then(function(items) { console.log(items) });\r\n * @example <caption>Get first 5 items whose Yes/No field is 'Yes'</caption>\r\n * list.getItems(\"MyYesNoField\", true, \"$top=5\").then(function(items) { console.log(items) });\r\n */\nList.prototype.findItems = function (key, value, extraOData) {\n\t//if its a string, wrap in single quotes\n\tvar filterValue = typeof value === \"string\" ? \"'\" + value + \"'\" : value;\n\tvar odata = \"$filter=\" + key + \" eq \" + filterValue + appendOData(extraOData, \"&\");\n\n\treturn this.getItems(odata);\n};\n\n/**\r\n * Retrieves the first list item that matches the column value you pass\r\n * @param {string} key - The column name\r\n * @param {string} value - The column value to match on\r\n * @param {string} [odata] - OData string\r\n * @returns {Promise} - A Promise that resolves to a list items\r\n * @example <caption>The first item whose Title is \"TODO\"</caption>\r\n * list.findItem(\"Title\", \"TODO\").then(function(item) { console.log(item) });\r\n */\nList.prototype.findItem = function (key, value, odata) {\n\treturn this.findItems(key, value, odata).then(function (items) {\n\t\tif (items && items.length && items.length > 0) {\n\t\t\treturn items[0];\n\t\t}\n\t\treturn null;\n\t});\n};\n\nvar appendOData = function appendOData(odata, prefix) {\n\tprefix = prefix || \"?\";\n\tif (odata) return prefix + odata;\n\treturn \"\";\n};\n\nmodule.exports = List;\n//# sourceMappingURL=list.js.map"
        },
        {
          "id": 14,
          "identifier": "C:\\gitwip\\spscript\\lib\\profiles.js",
          "name": "./lib/profiles.js",
          "index": 12,
          "index2": 9,
          "size": 3496,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\gitwip\\spscript\\lib\\baseDao.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 8,
              "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\baseDao.js",
              "module": "./lib/baseDao.js",
              "moduleName": "./lib/baseDao.js",
              "type": "cjs require",
              "userRequest": "./profiles",
              "loc": "7:15-36"
            }
          ],
          "source": "\"use strict\";\n\nvar utils = require(\"./utils\");\nvar headers = require(\"./requestHeaders\");\n\n/**\r\n * Allows you to perform queries agains the SP Profile Service. You shouldn't ever be new'ing this class up up yourself, instead you'll get it from your dao as shown in first example.\r\n * @class\r\n * @param {IBaseDao} dao - Data access object used to make requests.\r\n * @example <caption>You access this Profiles class using the 'profiles' property of the dao</caption>\r\n * var dao = new SPScript.RestDao(_spPageContextInfo.webAbsoluteUrl);\r\n * dao.profiles.current().then(function(profile) { console.log(profile) });\r\n */\nvar Profiles = function Profiles(dao) {\n\tthis._dao = dao;\n\tthis.baseUrl = \"/SP.UserProfiles.PeopleManager\";\n};\n\nvar transformPersonProperties = function transformPersonProperties(profile) {\n\tprofile.UserProfileProperties.results.forEach(function (keyvalue) {\n\t\tprofile[keyvalue.Key] = keyvalue.Value;\n\t});\n\treturn profile;\n};\n\n/**\r\n * Gets the profile of the current user\r\n * @returns {Promise} - A Promise that resolves an object containing all the profile properties\r\n * @example\r\n * dao.profiles.current().then(function(profile) { console.log(profile.PreferredName) });\r\n */\nProfiles.prototype.current = function () {\n\tvar url = this.baseUrl + \"/GetMyProperties\";\n\treturn this._dao.get(url).then(utils.validateODataV2).then(transformPersonProperties);\n};\n\n/**\r\n * Sets a profile property\r\n * @param {User|string} userOrEmail - Pass in a User object (must have 'AccountName' or 'LoginName') or an email address\r\n * @returns {Promise} - A Promise\r\n * @example\r\n * var email = \"andrew@andrewpetersen.onmicrosoft.com\";\r\n * var aboutMe = \"I am a web developer\";\r\n * dao.profiles.setProperty(email, \"AboutMe\", aboutMe).then(function() { console.log(\"Success\") });\r\n */\n// Supports email string or a user object\nProfiles.prototype.setProperty = function (userOrEmail, key, value, digest) {\n\tvar _this = this;\n\n\treturn this._dao.ensureRequestDigest(digest).then(function (digest) {\n\t\tvar url = _this.baseUrl + \"/SetSingleValueProfileProperty\";\n\t\tvar args = {\n\t\t\tpropertyName: key,\n\t\t\tpropertyValue: value\n\t\t};\n\n\t\tvar customOptions = {\n\t\t\theaders: headers.getStandardHeaders(digest)\n\t\t};\n\n\t\t// if a string is passed, assume its an email address, otherwise a user was passed\n\t\tif (typeof userOrEmail === \"string\") {\n\t\t\treturn _this.getByEmail(userOrEmail).then(function (user) {\n\t\t\t\targs.accountName = user.AccountName;\n\t\t\t\treturn _this._dao.post(url, args, customOptions);\n\t\t\t});\n\t\t} else {\n\t\t\targs.accountName = userOrEmail.LoginName || userOrEmail.AccountName;\n\t\t\treturn _this._dao.post(url, args, customOptions);\n\t\t}\n\t});\n};\n\nProfiles.prototype.getProfile = function (user) {\n\tvar login = encodeURIComponent(user.LoginName);\n\tvar url = this.baseUrl + \"/GetPropertiesFor(accountName=@v)?@v='\" + login + \"'\";\n\treturn this._dao.get(url).then(utils.validateODataV2).then(transformPersonProperties);\n};\n\n/**\r\n * Gets the profile of the user tied to the specified email\r\n * @returns {Promise} - A Promise that resolves an object containing all the profile properties\r\n * @example\r\n * var email = \"andrew@andrewpetersen.onmicrosoft.com\";\r\n * dao.profiles.getByEmail(email)\r\n *    .then(function(profile) { console.log(profile.PreferredName) });\r\n */\nProfiles.prototype.getByEmail = function (email) {\n\tvar _this2 = this;\n\n\treturn this._dao.web.getUser(email).then(function (user) {\n\t\treturn _this2.getProfile(user);\n\t});\n};\n\nmodule.exports = Profiles;\n//# sourceMappingURL=profiles.js.map"
        },
        {
          "id": 15,
          "identifier": "C:\\gitwip\\spscript\\lib\\restDao.js",
          "name": "./lib/restDao.js",
          "index": 4,
          "index2": 18,
          "size": 1803,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\gitwip\\spscript\\entries\\spscript.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 0,
              "moduleIdentifier": "C:\\gitwip\\spscript\\entries\\spscript.js",
              "module": "./entries/spscript.js",
              "moduleName": "./entries/spscript.js",
              "type": "cjs require",
              "userRequest": "../lib/restDao",
              "loc": "8:19-44"
            }
          ],
          "source": "\"use strict\";\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar BaseDao = require(\"./baseDao\");\nvar ajax = require('./ajax');\nvar utils = require(\"./utils\");\n/**\r\n * Main point of entry. Big Daddy class that all SP requests are routed through. Data Access Object (DAO)\r\n * @class\r\n * @augments BaseDao\r\n\r\n * @param {string} [url] - Url of the site you are connected to. _spPageContextInfo.webAbsoluteUrl will be used if no value is passed.\r\n * @property {string} webUrl - Url of the site you are connected to\r\n * @property {Web} web - Allows interacting with the SharePoint site you connected to\r\n * @property {Search} search - Allows querying through the SP Search Service\r\n * @property {Profiles} profiles - Allows interacting with the SP Profile Service\r\n * @example <caption>Create a new instance of a RestDao</caption>\r\n * var dao = new SPScript.RestDao(_spPageContextInfo.webAbsoluteUrl);\r\n */\nvar RestDao = function RestDao(url) {\n\tvar self = this;\n\tBaseDao.call(this);\n\tthis.webUrl = url || _spPageContextInfo.webAbsoluteUrl;\n};\n\nRestDao.prototype = Object.create(BaseDao.prototype);\n\nRestDao.prototype.executeRequest = function (url, options) {\n\tvar fullUrl = /^http/i.test(url) ? url : this.webUrl + \"/_api\" + url;\n\n\tvar defaultOptions = {\n\t\turl: fullUrl,\n\t\tmethod: \"GET\",\n\t\theaders: {\n\t\t\t\"Accept\": \"application/json; odata=verbose\",\n\t\t\t\"Content-Type\": \"application/json; odata=verbose\"\n\t\t}\n\t};\n\n\tvar ajaxOptions = _extends({}, defaultOptions, options);\n\treturn ajax(ajaxOptions).catch(utils.handleErrorResponse);\n};\n\nmodule.exports = RestDao;\n//# sourceMappingURL=restDao.js.map"
        },
        {
          "id": 16,
          "identifier": "C:\\gitwip\\spscript\\lib\\search.js",
          "name": "./lib/search.js",
          "index": 13,
          "index2": 14,
          "size": 6193,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\gitwip\\spscript\\lib\\baseDao.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 8,
              "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\baseDao.js",
              "module": "./lib/baseDao.js",
              "moduleName": "./lib/baseDao.js",
              "type": "cjs require",
              "userRequest": "./search",
              "loc": "8:13-32"
            }
          ],
          "source": "'use strict';\n\nvar queryString = require('./queryString');\nvar utils = require('./utils');\n\n/**\r\n * Allows you to perform queries agains the SP Search Service. You shouldn't ever be new'ing this class up up yourself, instead you'll get it from your dao as shown in first example.\r\n * @class\r\n * @param {IBaseDao} dao - Data access object used to make requests.\r\n * @example <caption>You access this Search class using the 'search' property of the dao</caption>\r\n * var dao = new SPScript.RestDao(_spPageContextInfo.webAbsoluteUrl);\r\n * dao.search.query('andrew').then(function(result) { console.log(result.items) });\r\n */\nvar Search = function Search(dao) {\n  this._dao = dao;\n};\n\n/**\r\n * Represents the response sent back from the Search Service after a query\r\n * @typedef {Object} QueryOptions\r\n * @property {string} sourceid - Special id that allows filter of types\r\n * @property {int} startrow - \r\n * @property {int} rowlimit - How many items to bring back\r\n * @property {Array<string>} selectedproperties - An array of the property names to bring back\r\n * @property {Array<string>} refiners - An array of the refiners to bring back\r\n * @property {?} hiddenconstraints - \r\n * @property {?} sortlist - \r\n */\nSearch.QueryOptions = function () {\n  this.sourceid = null;\n  this.startrow = null;\n  this.rowlimit = 30;\n  this.selectedproperties = null;\n  this.refiners = null;\n  this.refinementfilters = null;\n  this.hiddenconstraints = null;\n  this.sortlist = null;\n};\n\nvar convertRowsToObjects = function convertRowsToObjects(itemRows) {\n  var items = [];\n\n  for (var i = 0; i < itemRows.length; i++) {\n    var row = itemRows[i],\n        item = {};\n    for (var j = 0; j < row.Cells.results.length; j++) {\n      item[row.Cells.results[j].Key] = row.Cells.results[j].Value;\n    }\n\n    items.push(item);\n  }\n\n  return items;\n};\n\n/**\r\n * Represents the response sent back from the Search Service after a query\r\n * @typedef {Object} SearchResults\r\n * @property {string} elapsedTime - How long the query took\r\n * @property {object} suggestion - Spelling suggestion\r\n * @property {int} resultsCount - Number of results in this batch\r\n * @property {int} totalResults - Total number of results that could be returned\r\n * @property {int} totalResultsIncludingDuplicates - Total number of results that could be returned including duplicates\r\n * @property {Array} items - An array of search result items.  Properties will depend of the item type.\r\n * @property {?Array<Refiner>} refiners - An array of refiners. Can be null.\r\n */\nvar SearchResults = function SearchResults(queryResponse) {\n  this.elapsedTime = queryResponse.ElapsedTime;\n  this.suggestion = queryResponse.SpellingSuggestion;\n  this.resultsCount = queryResponse.PrimaryQueryResult.RelevantResults.RowCount;\n  this.totalResults = queryResponse.PrimaryQueryResult.RelevantResults.TotalRows;\n  this.totalResultsIncludingDuplicates = queryResponse.PrimaryQueryResult.RelevantResults.TotalRowsIncludingDuplicates;\n  this.items = convertRowsToObjects(queryResponse.PrimaryQueryResult.RelevantResults.Table.Rows.results);\n  this.refiners = mapRefiners(queryResponse.PrimaryQueryResult.RefinementResults);\n};\n\n/**\r\n * Represents the response sent back from the Search Service after a query\r\n * @typedef {Object} Refiner\r\n * @property {string} RefinerName - How long the query took\r\n * @property {Array} RefinerOptions - An array of valid refiner values\r\n */\n\nvar mapRefiners = function mapRefiners(refinementResults) {\n  var refiners = [];\n\n  if (refinementResults && refinementResults.Refiners && refinementResults.Refiners.results) {\n    refiners = refinementResults.Refiners.results.map(function (r) {\n      return {\n        RefinerName: r.Name,\n        RefinerOptions: r.Entries.results\n      };\n    });\n  }\n  return refiners;\n};\n\n/**\r\n * Performs a query using the search service\r\n * @param {string} queryText - The query text to send to the Search Service\r\n * @param {QueryOptions} [[queryOptions]] - Override the default query options\r\n * @returns {Promise<SearchResults>} - A Promise that resolves to a SearchResults object\r\n * @example\r\n * dao.search.query('audit').then(function(result) { console.log(result.items) });\r\n */\nSearch.prototype.query = function (queryText, queryOptions) {\n  var optionsQueryString = queryOptions != null ? \"&\" + queryString.fromObj(queryOptions, true) : \"\";\n\n  var url = \"/search/query?querytext='\" + queryText + \"'\" + optionsQueryString;\n  return this._dao.get(url).then(utils.validateODataV2).then(function (resp) {\n    if (resp.query) {\n      return new SearchResults(resp.query);\n    }\n    throw new Error(\"Invalid response back from search service\");\n  });\n};\n\n/**\r\n * Performs a query using the search service\r\n * @param {string} queryText - The query text to send to the Search Service\r\n * @param {QueryOptions} [[queryOptions]] - Override the default query options\r\n * @returns {Promise<SearchResults>} - A Promise that resolves to a SearchResults object\r\n * @example\r\n * dao.search.people('andrew').then(function(result) { console.log(result.items) });\r\n */\nSearch.prototype.people = function (queryText, queryOptions) {\n  var options = queryOptions || {};\n  options.sourceid = 'b09a7990-05ea-4af9-81ef-edfab16c4e31';\n  return this.query(queryText, options);\n};\n\n/**\r\n * Performs a query for just sites using the search service\r\n * @param {string} queryText - The query text to send to the Search Service\r\n * @param {string} [[scope]] - A url to scope the results to\r\n * @param {QueryOptions} [[queryOptions]] - Override the default query options\r\n * @returns {Promise<SearchResults>} - A Promise that resolves to a SearchResults object\r\n * @example\r\n * dao.search.sites('andrew').then(function(result) { console.log(result.items) });\r\n */\nSearch.prototype.sites = function (queryText, scope) {\n  var queryOptions = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n  queryText = queryText || \"\";\n  scope = scope ? 'Path:' + scope + '*' : \"\";\n  var query = (queryText + ' contentclass:STS_Web ' + scope).trim();\n  queryOptions.rowlimit = queryOptions.rowlimit || 499;\n  return this.query(query, queryOptions);\n};\n\nmodule.exports = Search;\n//# sourceMappingURL=search.js.map"
        },
        {
          "id": 17,
          "identifier": "C:\\gitwip\\spscript\\lib\\web.js",
          "name": "./lib/web.js",
          "index": 10,
          "index2": 8,
          "size": 10534,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\gitwip\\spscript\\lib\\baseDao.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 8,
              "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\baseDao.js",
              "module": "./lib/baseDao.js",
              "moduleName": "./lib/baseDao.js",
              "type": "cjs require",
              "userRequest": "./web",
              "loc": "6:10-26"
            }
          ],
          "source": "\"use strict\";\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar utils = require(\"./utils\");\nvar Permissions = require(\"./permissions\");\nvar headers = require(\"./requestHeaders\");\nvar Folder = require(\"./filesystem\").Folder;\n/**\r\n * Represents a SharePoint site. You shouldn't ever be new'ing this class up up yourself, instead you'll get it from your dao as shown in first example.\r\n * @class\r\n * @param {IBaseDao} dao - Data access object used to make requests.\r\n * @property {Permissions} permissions - allows checking security information of the Web\r\n * @property {string} baseUrl - API relative url (value = \"/web\")\r\n * @example <caption>You access this Web class using the 'web' property of the dao</caption>\r\n * var dao = new SPScript.RestDao(_spPageContextInfo.webAbsoluteUrl);\r\n * dao.web.info().then(function(info) { console.log(info) });\r\n */\nvar Web = function Web(dao) {\n\tthis._dao = dao;\n\tthis.baseUrl = \"/web\";\n\tthis.permissions = new Permissions(this.baseUrl, this._dao);\n};\n\n/**\r\n * Retrieves basic information about the site\r\n * @returns {Promise<SP.Web>} - A Promise that resolves to an object containing non-deferred properties of SP.Web (https://msdn.microsoft.com/en-us/library/office/jj244873.aspx)\r\n * @example\r\n * dao.web.info().then(function(info) { console.log(info) });\r\n */\nWeb.prototype.info = function () {\n\treturn this._dao.get(this.baseUrl).then(utils.validateODataV2);\n};\n\n/**\r\n * Retrieves all of the subsites\r\n * @returns {Promise<SP.Web[]>} - A Promise that resolves to an array of subsite object, each loaded with all non-deferred properties\r\n * @example\r\n *  dao.web.subsites().then(function(sites) { console.log(sites) });\r\n */\nWeb.prototype.subsites = function () {\n\treturn this._dao.get(this.baseUrl + \"/webinfos\").then(utils.validateODataV2);\n};\n\n/**\r\n * Retrieves a token needed to authorize any updates\r\n * @return {string} - A Promise that resolves to a the token that needs to added to the \"X-RequestDigest\" request header\r\n * @example\r\n *  dao.web.getRequestDigest().then(function(digest) { console.log(digest) });\r\n */\nWeb.prototype.getRequestDigest = function () {\n\treturn this._dao.getRequestDigest();\n};\n\n/**\r\n * Retrieves a folder\r\n * @param {string} serverRelativeUrl - The server relative url of the folder\r\n * @returns {Promise<Folder>} - A Promise that resolves to a folder object contain a files and folders arrays\r\n * @example\r\n *  dao.web.getFolder(\"/sites/mysite/Shared Documents\")\r\n *\t\t\t.then(function(folder) { console.log(folder) });\r\n */\nWeb.prototype.getFolder = function (serverRelativeUrl) {\n\t//remove leading slash\n\tif (serverRelativeUrl.charAt(0) === \"/\") {\n\t\tserverRelativeUrl = serverRelativeUrl.substr(1);\n\t}\n\tvar url = \"/web/GetFolderByServerRelativeUrl('\" + serverRelativeUrl + \"')?$expand=Folders,Files\";\n\n\treturn this._dao.get(url).then(utils.validateODataV2).then(function (spFolder) {\n\t\tvar folder = new Folder(spFolder);\n\t\tfolder.populateChildren(spFolder);\n\t\treturn folder;\n\t});\n};\n\n/**\r\n * Uploads a file\r\n * @param {HTML5.File|string} fileContent - Either an HTML5 File object (from a File input element) or the string content of the file\r\n * @param {string} folderUrl - The server relative folder where the file should be uploaded\r\n * @param {object} [[fields]] - An optional object containig the fields that should be set on the file after the upload completes. You can override the filename by passing 'name' property { name: \"NewFileName.docx\"}\r\n * @param {string} [[requestDigest]] - The request digest token used to authorize the request. One will be automatically retrieved if not passed.\r\n * @example <caption>Upload files with file input element, assumes <input type='file' id='file-input' /> </caption>\r\n\t*var inputElement = document.getElementById(\"file-input\");\r\n\t*inputElement.addEventListener(\"change\", handleFiles, false);\r\n\t*function handleFiles() {\r\n\t*    var fileList = this.files;\r\n\t*    var folderUrl = \"/spscript/Shared Documents\";\r\n\t*    for (var i = 0; i < fileList.length; i++) {\r\n\t*        dao.web.uploadFile(fileList[i], folderUrl).then(function(result){\r\n\t*            console.log(result);\r\n\t*        });\r\n\t*    }\r\n\t*}\r\n */\nWeb.prototype.uploadFile = function (fileContent, folderUrl, fields, digest) {\n\tvar _this = this;\n\n\tif (digest) return this._uploadFile(fileContent, folderUrl, fields, digest);\n\treturn this.getRequestDigest().then(function (digest) {\n\t\treturn _this._uploadFile(fileContent, folderUrl, fields, digest);\n\t});\n};\n\nWeb.prototype._uploadFile = function (fileContent, folderUrl, fields, digest) {\n\tvar _this2 = this;\n\n\tfields = fields || {};\n\t// if its a string, just treat that as the raw content\n\tif (typeof fileContent === \"string\") {\n\t\tfields.name = fields.name || \"NewFile.txt\";\n\t\treturn this._uploadBinaryData(fileContent, folderUrl, fields, digest);\n\t}\n\n\t// If its a browser File object, use FileReader to get ArrayBuffer\n\tif (fileContent instanceof File) {\n\t\tfields.name = fields.name || fileContent.name;\n\t\treturn utils.getArrayBuffer(fileContent).then(function (arrayBuffer) {\n\t\t\treturn _this2._uploadBinaryData(arrayBuffer, folderUrl, fields, digest);\n\t\t});\n\t}\n};\n\nWeb.prototype._setFileFields = function (spFile, fields, digest) {\n\tvar _this3 = this;\n\n\t// Get the ListItem with ParentList properties so we can query by list title\n\treturn this._dao.get(spFile.__metadata.uri + \"/ListItemAllFields?$expand=ParentList\").then(utils.validateODataV2).then(function (item) {\n\t\tdelete fields.name;\n\t\t// if there were no fields passed in just return the file and list item\n\t\tif (Object.keys(fields).length === 0) {\n\t\t\treturn {\n\t\t\t\titem: item,\n\t\t\t\tfile: spFile\n\t\t\t};\n\t\t};\n\t\t// If extra fields were passed in, update the list item\n\t\treturn _this3._dao.lists(item.ParentList.Title).updateItem(item.Id, fields, digest).then(function () {\n\t\t\titem = _extends({}, item, fields);\n\t\t\treturn { item: item, file: spFile };\n\t\t});\n\t});\n};\n\nWeb.prototype._uploadBinaryData = function (binaryContent, folderUrl, fields, digest) {\n\tvar _this4 = this;\n\n\tvar uploadUrl = \"/web/GetFolderByServerRelativeUrl('\" + folderUrl + \"')/Files/Add(url='\" + fields.name + \"',overwrite=true)\";\n\tvar options = {\n\t\theaders: headers.getFilestreamHeaders(digest)\n\t};\n\treturn this._dao.post(uploadUrl, binaryContent, options).then(utils.validateODataV2).then(function (spFile) {\n\t\treturn _this4._setFileFields(spFile, fields, digest);\n\t});\n};\n\n/**\r\n * Retrieves a file object\r\n * @param {string} url - The server relative url of the file\r\n * @returns {Promise<File>} - A Promise that resolves to a file object\r\n * @example\r\n *  dao.web.getFile(\"/sites/mysite/Shared Documents/myfile.docx\")\r\n *\t\t\t.then(function(file) { console.log(file) });\r\n */\nWeb.prototype.getFile = function (url) {\n\tvar url = \"/web/getfilebyserverrelativeurl('\" + url + \"')\";\n\treturn this._dao.get(url).then(utils.validateODataV2);\n};\n\n/**\r\n * Copies a file\r\n * @param {string} sourceUrl - The server relative url of the file you want to copy\r\n * @param {string} destinationUrl - The server relative url of the destination\r\n * @param {string} [[requestDigest]] - The request digest token used to authorize the request. One will be automatically retrieved if not passed.\r\n * @example\r\n * var sourceFile = \"/sites/mysite/Shared Documents/myfile.docx\";\r\n * var destination = \"/sites/mysite/Restricted Docs/myFile.docx\";\r\n * dao.web.copyFile(sourceFile, destination).then(function() { console.log(\"Success\") });\r\n */\nWeb.prototype.copyFile = function (sourceUrl, destinationUrl, digest) {\n\tvar _this5 = this;\n\n\tif (digest) return this._copyFile(sourceUrl, destinationUrl, digest);\n\n\treturn this.getRequestDigest().then(function (requestDigest) {\n\t\treturn _this5._copyFile(sourceUrl, destinationUrl, requestDigest);\n\t});\n};\n\nWeb.prototype._copyFile = function (sourceUrl, destinationUrl, digest) {\n\tvar url = \"/web/getfilebyserverrelativeurl('\" + sourceUrl + \"')/CopyTo\"; //(strnewurl='${destinationUrl}',boverwrite=true)`\n\tvar options = {\n\t\theaders: headers.getAddHeaders(digest)\n\t};\n\tvar body = {\n\t\tstrNewUrl: destinationUrl,\n\t\tbOverWrite: true\n\t};\n\treturn this._dao.post(url, body, options);\n};\n\nWeb.prototype.fileAction = function (file, action) {\n\tvar _this6 = this;\n\n\tvar params = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\tvar digest = arguments[3];\n\n\tif (digest) this._fileAction(file, action, params, digest);\n\treturn this.getRequestDigest().then(function (requestDigest) {\n\t\treturn _this6._fileAction(file, action, params, requestDigest);\n\t});\n};\n\nWeb.prototype._fileAction = function (file, action, params, digest) {\n\tvar url = \"/web/getfilebyserverrelativeurl('\" + file + \"')/\" + action;\n\tvar options = {\n\t\theaders: headers.getAddHeaders(digest)\n\t};\n\treturn this._dao.post(url, params, options);\n};\n\n/**\r\n * Deletes a file\r\n * @param {string} fileUrl - The server relative url of the file you want to delete\r\n * @param {string} [[requestDigest]] - The request digest token used to authorize the request. One will be automatically retrieved if not passed.\r\n * @example\r\n * dao.web.deleteFile(\"/sites/mysite/Shared Documents/myFile.docx\")\r\n *\t\t\t.then(function() { console.log(\"Success\")});\r\n */\nWeb.prototype.deleteFile = function (fileUrl, digest) {\n\tvar _this7 = this;\n\n\tif (digest) return this._deleteFile(fileUrl, digest);\n\n\treturn this.getRequestDigest().then(function (requestDigest) {\n\t\treturn _this7._deleteFile(fileUrl, requestDigest);\n\t});\n};\n\nWeb.prototype._deleteFile = function (sourceUrl, requestDigest) {\n\tvar url = \"/web/getfilebyserverrelativeurl(@url)/?@Url='\" + sourceUrl + \"'\";\n\tvar options = {\n\t\theaders: headers.getDeleteHeaders(requestDigest)\n\t};\n\treturn this._dao.post(url, {}, options);\n};\n\n/**\r\n * Retrieves a users object based on an email address\r\n * @param {string} email - The email address of the user to retrieve\r\n * @returns {Promise<SP.User>} - A Promise that resolves to a an SP.User object\r\n * @example\r\n * dao.web.getUser(\"andrew@andrewpetersen.onmicrosoft.com\")\r\n * \t\t\t.then(function(user) { console.log(user)});\r\n */\nWeb.prototype.getUser = function (email) {\n\tvar url = this.baseUrl + \"/SiteUsers/GetByEmail('\" + email + \"')\";\n\treturn this._dao.get(url).then(utils.validateODataV2);\n};\n\nWeb.prototype.ensureUser = function (login) {\n\treturn this._dao.post(\"/web/ensureUser('\" + login + \"')\").then(utils.validateODataV2);\n};\n\nmodule.exports = Web;\n//# sourceMappingURL=web.js.map"
        },
        {
          "id": 18,
          "identifier": "C:\\gitwip\\spscript\\node_modules\\promise-polyfill\\promise.js",
          "name": "./~/promise-polyfill/promise.js",
          "index": 1,
          "index2": 2,
          "size": 6235,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\gitwip\\spscript\\entries\\spscript.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 0,
              "moduleIdentifier": "C:\\gitwip\\spscript\\entries\\spscript.js",
              "module": "./entries/spscript.js",
              "moduleName": "./entries/spscript.js",
              "type": "cjs require",
              "userRequest": "promise-polyfill",
              "loc": "2:22-49"
            }
          ],
          "source": "(function (root) {\n\n  // Store setTimeout reference so promise-polyfill will be unaffected by\n  // other code modifying setTimeout (like sinon.useFakeTimers())\n  var setTimeoutFunc = setTimeout;\n\n  function noop() {}\n  \n  // Polyfill for Function.prototype.bind\n  function bind(fn, thisArg) {\n    return function () {\n      fn.apply(thisArg, arguments);\n    };\n  }\n\n  function Promise(fn) {\n    if (typeof this !== 'object') throw new TypeError('Promises must be constructed via new');\n    if (typeof fn !== 'function') throw new TypeError('not a function');\n    this._state = 0;\n    this._handled = false;\n    this._value = undefined;\n    this._deferreds = [];\n\n    doResolve(fn, this);\n  }\n\n  function handle(self, deferred) {\n    while (self._state === 3) {\n      self = self._value;\n    }\n    if (self._state === 0) {\n      self._deferreds.push(deferred);\n      return;\n    }\n    self._handled = true;\n    Promise._immediateFn(function () {\n      var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;\n      if (cb === null) {\n        (self._state === 1 ? resolve : reject)(deferred.promise, self._value);\n        return;\n      }\n      var ret;\n      try {\n        ret = cb(self._value);\n      } catch (e) {\n        reject(deferred.promise, e);\n        return;\n      }\n      resolve(deferred.promise, ret);\n    });\n  }\n\n  function resolve(self, newValue) {\n    try {\n      // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n      if (newValue === self) throw new TypeError('A promise cannot be resolved with itself.');\n      if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {\n        var then = newValue.then;\n        if (newValue instanceof Promise) {\n          self._state = 3;\n          self._value = newValue;\n          finale(self);\n          return;\n        } else if (typeof then === 'function') {\n          doResolve(bind(then, newValue), self);\n          return;\n        }\n      }\n      self._state = 1;\n      self._value = newValue;\n      finale(self);\n    } catch (e) {\n      reject(self, e);\n    }\n  }\n\n  function reject(self, newValue) {\n    self._state = 2;\n    self._value = newValue;\n    finale(self);\n  }\n\n  function finale(self) {\n    if (self._state === 2 && self._deferreds.length === 0) {\n      Promise._immediateFn(function() {\n        if (!self._handled) {\n          Promise._unhandledRejectionFn(self._value);\n        }\n      });\n    }\n\n    for (var i = 0, len = self._deferreds.length; i < len; i++) {\n      handle(self, self._deferreds[i]);\n    }\n    self._deferreds = null;\n  }\n\n  function Handler(onFulfilled, onRejected, promise) {\n    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n    this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n    this.promise = promise;\n  }\n\n  /**\n   * Take a potentially misbehaving resolver function and make sure\n   * onFulfilled and onRejected are only called once.\n   *\n   * Makes no guarantees about asynchrony.\n   */\n  function doResolve(fn, self) {\n    var done = false;\n    try {\n      fn(function (value) {\n        if (done) return;\n        done = true;\n        resolve(self, value);\n      }, function (reason) {\n        if (done) return;\n        done = true;\n        reject(self, reason);\n      });\n    } catch (ex) {\n      if (done) return;\n      done = true;\n      reject(self, ex);\n    }\n  }\n\n  Promise.prototype['catch'] = function (onRejected) {\n    return this.then(null, onRejected);\n  };\n\n  Promise.prototype.then = function (onFulfilled, onRejected) {\n    var prom = new (this.constructor)(noop);\n\n    handle(this, new Handler(onFulfilled, onRejected, prom));\n    return prom;\n  };\n\n  Promise.all = function (arr) {\n    var args = Array.prototype.slice.call(arr);\n\n    return new Promise(function (resolve, reject) {\n      if (args.length === 0) return resolve([]);\n      var remaining = args.length;\n\n      function res(i, val) {\n        try {\n          if (val && (typeof val === 'object' || typeof val === 'function')) {\n            var then = val.then;\n            if (typeof then === 'function') {\n              then.call(val, function (val) {\n                res(i, val);\n              }, reject);\n              return;\n            }\n          }\n          args[i] = val;\n          if (--remaining === 0) {\n            resolve(args);\n          }\n        } catch (ex) {\n          reject(ex);\n        }\n      }\n\n      for (var i = 0; i < args.length; i++) {\n        res(i, args[i]);\n      }\n    });\n  };\n\n  Promise.resolve = function (value) {\n    if (value && typeof value === 'object' && value.constructor === Promise) {\n      return value;\n    }\n\n    return new Promise(function (resolve) {\n      resolve(value);\n    });\n  };\n\n  Promise.reject = function (value) {\n    return new Promise(function (resolve, reject) {\n      reject(value);\n    });\n  };\n\n  Promise.race = function (values) {\n    return new Promise(function (resolve, reject) {\n      for (var i = 0, len = values.length; i < len; i++) {\n        values[i].then(resolve, reject);\n      }\n    });\n  };\n\n  // Use polyfill for setImmediate for performance gains\n  Promise._immediateFn = (typeof setImmediate === 'function' && function (fn) { setImmediate(fn); }) ||\n    function (fn) {\n      setTimeoutFunc(fn, 0);\n    };\n\n  Promise._unhandledRejectionFn = function _unhandledRejectionFn(err) {\n    if (typeof console !== 'undefined' && console) {\n      console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console\n    }\n  };\n\n  /**\n   * Set the immediate function to execute callbacks\n   * @param fn {function} Function to execute\n   * @deprecated\n   */\n  Promise._setImmediateFn = function _setImmediateFn(fn) {\n    Promise._immediateFn = fn;\n  };\n\n  /**\n   * Change the function to execute on unhandled rejection\n   * @param {function} fn Function to execute on unhandled rejection\n   * @deprecated\n   */\n  Promise._setUnhandledRejectionFn = function _setUnhandledRejectionFn(fn) {\n    Promise._unhandledRejectionFn = fn;\n  };\n  \n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = Promise;\n  } else if (!root.Promise) {\n    root.Promise = Promise;\n  }\n\n})(this);\n"
        },
        {
          "id": 19,
          "identifier": "C:\\gitwip\\spscript\\node_modules\\querystring\\decode.js",
          "name": "./~/querystring/decode.js",
          "index": 16,
          "index2": 10,
          "size": 2399,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\gitwip\\spscript\\node_modules\\querystring\\index.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 21,
              "moduleIdentifier": "C:\\gitwip\\spscript\\node_modules\\querystring\\index.js",
              "module": "./~/querystring/index.js",
              "moduleName": "./~/querystring/index.js",
              "type": "cjs require",
              "userRequest": "./decode",
              "loc": "3:33-52"
            }
          ],
          "source": "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (Array.isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n"
        },
        {
          "id": 20,
          "identifier": "C:\\gitwip\\spscript\\node_modules\\querystring\\encode.js",
          "name": "./~/querystring/encode.js",
          "index": 17,
          "index2": 11,
          "size": 2090,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\gitwip\\spscript\\node_modules\\querystring\\index.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 21,
              "moduleIdentifier": "C:\\gitwip\\spscript\\node_modules\\querystring\\index.js",
              "module": "./~/querystring/index.js",
              "moduleName": "./~/querystring/index.js",
              "type": "cjs require",
              "userRequest": "./encode",
              "loc": "4:37-56"
            }
          ],
          "source": "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return Object.keys(obj).map(function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (Array.isArray(obj[k])) {\n        return obj[k].map(function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n"
        },
        {
          "id": 21,
          "identifier": "C:\\gitwip\\spscript\\node_modules\\querystring\\index.js",
          "name": "./~/querystring/index.js",
          "index": 15,
          "index2": 12,
          "size": 127,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\gitwip\\spscript\\lib\\queryString.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 6,
              "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\queryString.js",
              "module": "./lib/queryString.js",
              "moduleName": "./lib/queryString.js",
              "type": "cjs require",
              "userRequest": "querystring",
              "loc": "3:9-31"
            }
          ],
          "source": "'use strict';\n\nexports.decode = exports.parse = require('./decode');\nexports.encode = exports.stringify = require('./encode');\n"
        },
        {
          "id": 22,
          "identifier": "C:\\gitwip\\spscript\\node_modules\\timers-browserify\\node_modules\\process\\browser.js",
          "name": "./~/timers-browserify/~/process/browser.js",
          "index": 3,
          "index2": 1,
          "size": 2056,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "C:\\gitwip\\spscript\\node_modules\\timers-browserify\\main.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 3,
              "moduleIdentifier": "C:\\gitwip\\spscript\\node_modules\\timers-browserify\\main.js",
              "module": "./~/timers-browserify/main.js",
              "moduleName": "./~/timers-browserify/main.js",
              "type": "cjs require",
              "userRequest": "process/browser.js",
              "loc": "1:15-44"
            }
          ],
          "source": "// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n"
        }
      ],
      "filteredModules": 0,
      "origins": [
        {
          "moduleId": 0,
          "module": "C:\\gitwip\\spscript\\entries\\spscript.js",
          "moduleIdentifier": "C:\\gitwip\\spscript\\entries\\spscript.js",
          "moduleName": "./entries/spscript.js",
          "loc": "",
          "name": "spscript",
          "reasons": []
        }
      ]
    }
  ],
  "modules": [
    {
      "id": 0,
      "identifier": "C:\\gitwip\\spscript\\entries\\spscript.js",
      "name": "./entries/spscript.js",
      "index": 0,
      "index2": 22,
      "size": 624,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": null,
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [],
      "source": "// var promisePolyfill = require(\"es6-promise\");\r\nvar promisePolyfill = require(\"promise-polyfill\");\r\n\r\nif (!global.Promise) {\r\n\tglobal.Promise = promisePolyfill;\r\n}\r\nvar SPScript = {};\r\nSPScript.RestDao = require(\"../lib/restDao\");\r\nSPScript.queryString = require(\"../lib/queryString\");\r\nSPScript.templating = require(\"mustache\");\r\nSPScript.templating.renderTemplate = SPScript.templating.render;\r\nSPScript.utils = require(\"../lib/utils\");\r\nSPScript.ajax = require(\"../lib/ajax\");\r\nSPScript.CSR = require(\"../lib/csr\");\r\nSPScript.headers = require(\"../lib/requestHeaders\");\r\nmodule.exports = global.SPScript = SPScript;\r\n\r\n"
    },
    {
      "id": 1,
      "identifier": "C:\\gitwip\\spscript\\lib\\utils.js",
      "name": "./lib/utils.js",
      "index": 7,
      "index2": 3,
      "size": 7685,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\gitwip\\spscript\\entries\\spscript.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 0,
          "moduleIdentifier": "C:\\gitwip\\spscript\\entries\\spscript.js",
          "module": "./entries/spscript.js",
          "moduleName": "./entries/spscript.js",
          "type": "cjs require",
          "userRequest": "../lib/utils",
          "loc": "12:17-40"
        },
        {
          "moduleId": 2,
          "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\requestHeaders.js",
          "module": "./lib/requestHeaders.js",
          "moduleName": "./lib/requestHeaders.js",
          "type": "cjs require",
          "userRequest": "./utils",
          "loc": "5:12-30"
        },
        {
          "moduleId": 5,
          "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\permissions.js",
          "module": "./lib/permissions.js",
          "moduleName": "./lib/permissions.js",
          "type": "cjs require",
          "userRequest": "./utils",
          "loc": "3:12-30"
        },
        {
          "moduleId": 8,
          "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\baseDao.js",
          "module": "./lib/baseDao.js",
          "moduleName": "./lib/baseDao.js",
          "type": "cjs require",
          "userRequest": "./utils",
          "loc": "9:12-30"
        },
        {
          "moduleId": 11,
          "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\customActions.js",
          "module": "./lib/customActions.js",
          "moduleName": "./lib/customActions.js",
          "type": "cjs require",
          "userRequest": "./utils",
          "loc": "5:12-30"
        },
        {
          "moduleId": 12,
          "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\filesystem.js",
          "module": "./lib/filesystem.js",
          "moduleName": "./lib/filesystem.js",
          "type": "cjs require",
          "userRequest": "./utils",
          "loc": "3:12-30"
        },
        {
          "moduleId": 13,
          "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\list.js",
          "module": "./lib/list.js",
          "moduleName": "./lib/list.js",
          "type": "cjs require",
          "userRequest": "./utils",
          "loc": "5:12-30"
        },
        {
          "moduleId": 14,
          "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\profiles.js",
          "module": "./lib/profiles.js",
          "moduleName": "./lib/profiles.js",
          "type": "cjs require",
          "userRequest": "./utils",
          "loc": "3:12-30"
        },
        {
          "moduleId": 15,
          "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\restDao.js",
          "module": "./lib/restDao.js",
          "moduleName": "./lib/restDao.js",
          "type": "cjs require",
          "userRequest": "./utils",
          "loc": "7:12-30"
        },
        {
          "moduleId": 16,
          "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\search.js",
          "module": "./lib/search.js",
          "moduleName": "./lib/search.js",
          "type": "cjs require",
          "userRequest": "./utils",
          "loc": "4:12-30"
        },
        {
          "moduleId": 17,
          "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\web.js",
          "module": "./lib/web.js",
          "moduleName": "./lib/web.js",
          "type": "cjs require",
          "userRequest": "./utils",
          "loc": "5:12-30"
        }
      ],
      "source": "\"use strict\";\n\n/**\r\n* @namespace SPScript.utils\r\n*/\n\nvar isBrowser = exports.isBrowser = function () {\n\treturn !(typeof window === 'undefined');\n};\n/**\r\n * If you pass in string, it will try to run JSON.parse(). The SPScript get() and post() methods already run the response through this method, so you'd really only need this if you are doing a manual ajax request. Different browsers handle JSON response differently so it is safest to call this method if you aren't going through SPScript.\r\n * @param {string} data - Raw response from JSON request\r\n * @returns {object} - JSON parsed object. Returns null if JSON.parse fails\r\n * @function parseJSON\r\n * @memberof SPScript.utils\r\n * @example\r\n * dao.executeRequest('/web/contentTypes')\r\n *\t\t.then(SPScript.utils.parseJSON)\r\n *\t\t.then(function(data) { console.log(data.d.results)})\r\n */\nvar parseJSON = exports.parseJSON = function (data) {\n\tif (typeof data === \"string\") {\n\t\ttry {\n\t\t\tdata = JSON.parse(data);\n\t\t} catch (e) {\n\t\t\treturn null;\n\t\t}\n\t}\n\treturn data;\n};\n\n/**\r\n * Helps parse raw json response to remove ceremonious OData data.d namespace. Tries JSON.parse() and then pulling out actual result from data.d or data.d.results\r\n * @function validateODataV2\r\n * @memberof SPScript.utils\r\n * @param {string|object} data - Raw response from JSON request\r\n * @returns {object} - JSON parsed object with that removes data.d OData structure \r\n * @example\r\n * dao.get('/web/contentTypes')\r\n *\t\t.then(SPScript.utils.validateODataV2)\r\n *\t\t.then(function(contentTypes) { console.log(contentTypes)})\r\n */\nvar validateODataV2 = exports.validateODataV2 = function (data) {\n\tvar results = parseJSON(data);\n\tif (data.d && data.d.results && data.d.results.length != null) {\n\t\tresults = data.d.results;\n\t} else if (data.d) {\n\t\tresults = data.d;\n\t}\n\treturn results;\n};\n\n//'Borrowed' from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\nvar arrayFromBitMask = exports.arrayFromBitMask = function (nMask) {\n\t// nMask must be between -2147483648 and 2147483647\n\tif (typeof nMask === \"string\") {\n\t\tnMask = parseInt(nMask);\n\t}\n\t// if (nMask > 0x7fffffff || nMask < -0x80000000) {\n\t// \tthrow new TypeError(\"arrayFromMask - out of range\");\n\t// }\n\tfor (var nShifted = nMask, aFromMask = []; nShifted; aFromMask.push(Boolean(nShifted & 1)), nShifted >>>= 1) {}\n\treturn aFromMask;\n};\n\nvar _waitForLibraries = function _waitForLibraries(namespaces, resolve) {\n\tvar missing = namespaces.filter(function (namespace) {\n\t\treturn !validateNamespace(namespace);\n\t});\n\n\tif (missing.length === 0) resolve();else setTimeout(function () {\n\t\treturn _waitForLibraries(namespaces, resolve);\n\t}, 25);\n};\n\n/**\r\n * A method to allow you to wait for script dependencies to load.\r\n * @param {Array} namespaces - An array of global namespaces, things on the global 'window'. For example, when jQuery is on the page, window.jQuery is valid.  So 'jQuery' is the namespace.\r\n * @returns {Promise} - A Promise that resolves when all your namespaces are on the page\r\n * @function waitForLibraries\r\n * @memberof SPScript.utils\r\n * @example\r\n * function doMyStuff() { };\r\n * SPScript.utils.waitForLibraries([\"jQuery\", \"SP.UI.Dialog\"]).then(doMyStuff);\r\n */\nvar waitForLibraries = exports.waitForLibraries = function (namespaces) {\n\treturn new Promise(function (resolve, reject) {\n\t\treturn _waitForLibraries(namespaces, resolve);\n\t});\n};\n\n/**\r\n * A method to allow you to wait for a single script dependency to load.\r\n * @param {string} namespace - A global namespace. For example, when jQuery is on the page, window.jQuery is valid. So 'jQuery' is the namespace.\r\n * @returns {Promise} - A Promise that resolves when all your namespace is on the page\r\n * @function waitForLibrary\r\n * @memberof SPScript.utils\r\n * @example\r\n * function doMyStuff() { };\r\n * SPScript.utils.waitForLibrary(\"jQuery\").then(doMyStuff);\r\n */\nvar waitForLibrary = exports.waitForLibrary = function (namespace) {\n\treturn waitForLibraries([namespace]);\n};\n\n/**\r\n * A method to check if a given namespace is on the global object (window).\r\n * @param {string} namespace - A global namespace\r\n * @returns {Bool} - True or False if the namespace is on the page\r\n * @function validateNamespace\r\n * @memberof SPScript.utils\r\n * @example\r\n * var canUseModals = SPScript.utils.validateNamespace(\"SP.UI.Dialog\");\r\n */\nvar validateNamespace = exports.validateNamespace = function (namespace) {\n\tvar scope = window;\n\tvar sections = namespace.split(\".\");\n\tvar sectionsLength = sections.length;\n\tfor (var i = 0; i < sectionsLength; i++) {\n\t\tvar prop = sections[i];\n\t\tif (prop in scope) {\n\t\t\tscope = scope[prop];\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n};\n\n/**\r\n * A method to load a javascript file onto your page\r\n * @param {Array<string>} urls - An Array of urls to javascript files you want to load on your page\r\n * @returns {Promise} - A Promise that resolves when all the files are done loading\r\n * @function getScripts\r\n * @memberof SPScript.utils\r\n * @example\r\n * function doMyStuff() { };\r\n * var momentjsUrl = \"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.13.0/moment.min.js\"\r\n * var jQueryUrl = \"https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.3/jquery.min.js\"\r\n * SPScript.utils.getScript([momentjsUrl, jQueryUrl]).then(doMyStuff);\r\n */\nvar getScripts = exports.getScripts = function (urls) {\n\treturn Promise.all(urls.map(getScript));\n};\n\n/**\r\n * A method to load a javascript file onto your page\r\n * @param {string} url - Url to the java script file you want to load\r\n * @returns {Promise} - A Promise that resolves when the file is done loading\r\n * @function getScript\r\n * @memberof SPScript.utils\r\n * @example\r\n * function doMyStuff() { };\r\n * var momentjsUrl = \"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.13.0/moment.min.js\"\r\n * SPScript.utils.getScript(momentjsUrl).then(doMyStuff);\r\n */\nvar getScript = exports.getScript = function (url) {\n\treturn new Promise(function (resolve, reject) {\n\t\tvar scriptTag = window.document.createElement(\"script\");\n\t\tvar firstScriptTag = document.getElementsByTagName('script')[0];\n\t\tscriptTag.async = 1;\n\t\tfirstScriptTag.parentNode.insertBefore(scriptTag, firstScriptTag);\n\n\t\tscriptTag.onload = scriptTag.onreadystatechange = function (arg, isAbort) {\n\t\t\t// if its been aborted, readyState is gone, or readyState is in a 'done' status\n\t\t\tif (isAbort || !scriptTag.readyState || /loaded|complete/.test(scriptTag.readyState)) {\n\t\t\t\t//clean up\n\t\t\t\tscriptTag.onload = scriptTag.onreadystatechange = null;\n\t\t\t\tscriptTag = undefined;\n\n\t\t\t\t// resolve/reject the promise\n\t\t\t\tif (!isAbort) resolve();else reject;\n\t\t\t}\n\t\t};\n\t\tscriptTag.src = url;\n\t});\n};\n\nvar getArrayBuffer = exports.getArrayBuffer = function (file) {\n\tif (file && file instanceof File) {\n\t\treturn new Promise(function (resolve, reject) {\n\t\t\tvar reader = new FileReader();\n\t\t\treader.onload = function (e) {\n\t\t\t\tresolve(e.target.result);\n\t\t\t};\n\t\t\treader.readAsArrayBuffer(file);\n\t\t});\n\t} else {\n\t\tthrow \"SPScript.utils.getArrayBuffer: Cant get ArrayBuffer if you don't pass in a file\";\n\t}\n};\nvar loadCss = exports.loadCss = function (url) {\n\tvar link = document.createElement(\"link\");\n\tlink.setAttribute(\"rel\", \"stylesheet\");\n\tlink.setAttribute(\"type\", \"text/css\");\n\tlink.setAttribute(\"href\", url);\n\tdocument.querySelector(\"head\").appendChild(link);\n};\n\nvar handleErrorResponse = exports.handleErrorResponse = function (err, res) {\n\tconsole.log(\"REQUEST ERROR - \" + err.statusCode || err.code);\n\tvar msg = err.body;\n\ttry {\n\t\tvar data = err.body;\n\t\tif (typeof data === \"string\") data = JSON.parse(err.body);\n\t\tif (data.error) msg = data.error.message.value;\n\t} catch (ex) {}\n\tconsole.log(msg);\n\treturn err;\n};\n//# sourceMappingURL=utils.js.map"
    },
    {
      "id": 2,
      "identifier": "C:\\gitwip\\spscript\\lib\\requestHeaders.js",
      "name": "./lib/requestHeaders.js",
      "index": 9,
      "index2": 5,
      "size": 1490,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\gitwip\\spscript\\entries\\spscript.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 0,
          "moduleIdentifier": "C:\\gitwip\\spscript\\entries\\spscript.js",
          "module": "./entries/spscript.js",
          "moduleName": "./entries/spscript.js",
          "type": "cjs require",
          "userRequest": "../lib/requestHeaders",
          "loc": "15:19-51"
        },
        {
          "moduleId": 8,
          "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\baseDao.js",
          "module": "./lib/baseDao.js",
          "moduleName": "./lib/baseDao.js",
          "type": "cjs require",
          "userRequest": "./requestHeaders",
          "loc": "11:18-45"
        },
        {
          "moduleId": 11,
          "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\customActions.js",
          "module": "./lib/customActions.js",
          "moduleName": "./lib/customActions.js",
          "type": "cjs require",
          "userRequest": "./requestHeaders",
          "loc": "6:14-41"
        },
        {
          "moduleId": 13,
          "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\list.js",
          "module": "./lib/list.js",
          "moduleName": "./lib/list.js",
          "type": "cjs require",
          "userRequest": "./requestHeaders",
          "loc": "7:14-41"
        },
        {
          "moduleId": 14,
          "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\profiles.js",
          "module": "./lib/profiles.js",
          "moduleName": "./lib/profiles.js",
          "type": "cjs require",
          "userRequest": "./requestHeaders",
          "loc": "4:14-41"
        },
        {
          "moduleId": 17,
          "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\web.js",
          "module": "./lib/web.js",
          "moduleName": "./lib/web.js",
          "type": "cjs require",
          "userRequest": "./requestHeaders",
          "loc": "7:14-41"
        }
      ],
      "source": "\"use strict\";\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar utils = require(\"./utils\");\n\nvar jsonMimeType = exports.jsonMimeType = \"application/json;odata=verbose\";\nvar getStandardHeaders = exports.getStandardHeaders = function (digest) {\n\tvar headers = {\n\t\t\"Accept\": jsonMimeType,\n\t\t\"Content-Type\": jsonMimeType\n\t};\n\tif (digest) headers[\"X-RequestDigest\"] = digest;\n\treturn headers;\n};\n\nexports.getAddHeaders = getStandardHeaders;\n\nvar getFilestreamHeaders = exports.getFilestreamHeaders = function (digest) {\n\treturn {\n\t\t'Accept': jsonMimeType,\n\t\t'X-RequestDigest': digest,\n\t\t'Content-Type': \"application/octet-stream\",\n\t\t'binaryStringRequestBody': \"true\"\n\t};\n};\n\nvar getActionHeaders = exports.getActionHeaders = function (verb, digest) {\n\tif (!verb) return getStandardHeaders(digest);\n\treturn _extends({}, getStandardHeaders(digest), {\n\t\t\"X-HTTP-Method\": verb\n\t});\n};\n\nvar decorateETag = function decorateETag(headers, etag) {\n\tif (etag) headers[\"If-Match\"] = etag;\n\treturn headers;\n};\n\nexports.getUpdateHeaders = function (digest, etag) {\n\treturn decorateETag(getActionHeaders(\"MERGE\", digest), etag);\n};\nexports.getDeleteHeaders = function (digest, etag) {\n\treturn decorateETag(getActionHeaders(\"DELETE\", digest), etag);\n};\n//# sourceMappingURL=requestHeaders.js.map"
    },
    {
      "id": 3,
      "identifier": "C:\\gitwip\\spscript\\node_modules\\timers-browserify\\main.js",
      "name": "./~/timers-browserify/main.js",
      "index": 2,
      "index2": 0,
      "size": 2105,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\gitwip\\spscript\\node_modules\\promise-polyfill\\promise.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 3,
          "moduleIdentifier": "C:\\gitwip\\spscript\\node_modules\\timers-browserify\\main.js",
          "module": "./~/timers-browserify/main.js",
          "moduleName": "./~/timers-browserify/main.js",
          "type": "cjs require",
          "userRequest": "setImmediate",
          "loc": "1:0-73"
        },
        {
          "moduleId": 3,
          "moduleIdentifier": "C:\\gitwip\\spscript\\node_modules\\timers-browserify\\main.js",
          "module": "./~/timers-browserify/main.js",
          "moduleName": "./~/timers-browserify/main.js",
          "type": "cjs require",
          "userRequest": "clearImmediate",
          "loc": "1:0-73"
        },
        {
          "moduleId": 18,
          "moduleIdentifier": "C:\\gitwip\\spscript\\node_modules\\promise-polyfill\\promise.js",
          "module": "./~/promise-polyfill/promise.js",
          "moduleName": "./~/promise-polyfill/promise.js",
          "type": "cjs require",
          "userRequest": "setImmediate",
          "loc": "1:0-73"
        }
      ],
      "source": "var nextTick = require('process/browser.js').nextTick;\nvar apply = Function.prototype.apply;\nvar slice = Array.prototype.slice;\nvar immediateIds = {};\nvar nextImmediateId = 0;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) { timeout.close(); };\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n  var id = nextImmediateId++;\n  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n  immediateIds[id] = true;\n\n  nextTick(function onNextTick() {\n    if (immediateIds[id]) {\n      // fn.call() is faster so we optimize for the common use-case\n      // @see http://jsperf.com/call-apply-segu\n      if (args) {\n        fn.apply(null, args);\n      } else {\n        fn.call(null);\n      }\n      // Prevent ids from leaking\n      exports.clearImmediate(id);\n    }\n  });\n\n  return id;\n};\n\nexports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n  delete immediateIds[id];\n};"
    },
    {
      "id": 4,
      "identifier": "C:\\gitwip\\spscript\\lib\\ajax.js",
      "name": "./lib/ajax.js",
      "index": 19,
      "index2": 17,
      "size": 2742,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\gitwip\\spscript\\entries\\spscript.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 0,
          "moduleIdentifier": "C:\\gitwip\\spscript\\entries\\spscript.js",
          "module": "./entries/spscript.js",
          "moduleName": "./entries/spscript.js",
          "type": "cjs require",
          "userRequest": "../lib/ajax",
          "loc": "13:16-38"
        },
        {
          "moduleId": 15,
          "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\restDao.js",
          "module": "./lib/restDao.js",
          "moduleName": "./lib/restDao.js",
          "type": "cjs require",
          "userRequest": "./ajax",
          "loc": "6:11-28"
        }
      ],
      "source": "\"use strict\";\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n/**\r\n* @namespace SPScript.ajax\r\n*/\n\nvar defaults = {\n\tmethod: \"GET\",\n\tasync: true,\n\ttype: \"json\", //XMLHttpRequest.responseType\n\tdata: undefined\n};\n\nvar validMethods = [\"GET\", \"POST\", \"PUT\", \"HEAD\", \"DELETE\", \"PATCH\"];\n\nvar errorHandlers = [];\n\nvar validateOptions = function validateOptions(options) {\n\tif (!options || !options.url || validMethods.indexOf(options.method) < 0) return false;else return true;\n};\n\nvar setHeaders = function setHeaders(xhr, headersObj) {\n\tif (headersObj) {\n\t\tObject.keys(headersObj).forEach(function (key) {\n\t\t\txhr.setRequestHeader(key, headersObj[key]);\n\t\t});\n\t}\n};\n\n/**\r\n * Performs and AJAX request based on options you pass you. Your options must at least have a url.\r\n * @param {object} options - Request options like { url, headers, method };\r\n * @returns {Promise} - A ES6 Promise that resolves or rejects when the request comes back\r\n * @function ajax\r\n * @memberof SPScript.ajax\r\n * @example\r\n * var ajaxOptions = { \r\n *    url: '/_api/web/contentTypes', \r\n *    method: \"GET\", \r\n *    headers: { Accept: \"application/json;odata=verbose\" } \r\n * };\r\n * SPScript.utils.ajax(ajaxOptions)\r\n *\t\t.then(SPScript.utils.parseJSON)\r\n *\t\t.then(function(data){ console.log(data.d.results) })\r\n *\t\t.catch(function(error) { console.log(error)})\r\n */\nvar ajax = function ajax(options) {\n\tvar opts = _extends({}, defaults, options);\n\tif (!validateOptions(options)) return Promise.reject(new Error(\"Invalid options passed into ajax call.\"));\n\n\tvar xhr = new XMLHttpRequest();\n\tif (xhr == null) return Promise.reject(new Error(\"Your browser doesn't support XMLHttpRequest (ajax).\"));\n\n\txhr.open(opts.method, opts.url, opts.async);\n\tsetHeaders(xhr, opts.headers);\n\txhr.responseType = opts.type;\n\n\treturn new Promise(function (resolve, reject) {\n\t\txhr.onreadystatechange = function () {\n\t\t\t//completed\n\t\t\tif (xhr.readyState === 4) {\n\t\t\t\t// SUCCESS\n\t\t\t\tif (xhr.status < 400 && xhr.status >= 100) {\n\t\t\t\t\tresolve(xhr.response);\n\t\t\t\t} else {\n\t\t\t\t\tvar error = new Error(\"AJAX Request Error: Response Code = \" + xhr.status);\n\t\t\t\t\terror.statusCode = xhr.status;\n\t\t\t\t\terror.body = xhr.response;\n\t\t\t\t\terrorHandlers.forEach(function (fn) {\n\t\t\t\t\t\treturn fn(error, xhr);\n\t\t\t\t\t});\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\txhr.send(opts.data);\n\t});\n};\n\najax.addErrorHandler = function (fn) {\n\treturn errorHandlers.push(fn);\n};\najax.setDefaults = function (options) {\n\treturn _extends(defaults, options);\n};\n\nmodule.exports = ajax;\n//# sourceMappingURL=ajax.js.map"
    },
    {
      "id": 5,
      "identifier": "C:\\gitwip\\spscript\\lib\\permissions.js",
      "name": "./lib/permissions.js",
      "index": 8,
      "index2": 4,
      "size": 7746,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\gitwip\\spscript\\lib\\web.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 13,
          "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\list.js",
          "module": "./lib/list.js",
          "moduleName": "./lib/list.js",
          "type": "cjs require",
          "userRequest": "./permissions",
          "loc": "6:18-42"
        },
        {
          "moduleId": 17,
          "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\web.js",
          "module": "./lib/web.js",
          "moduleName": "./lib/web.js",
          "type": "cjs require",
          "userRequest": "./permissions",
          "loc": "6:18-42"
        }
      ],
      "source": "\"use strict\";\n\nvar utils = require(\"./utils\");\n\n/**\r\n * Allows you to to check on the security of a list or site. You shouldn't be creating instances of the this class, you will get it from the Web or List class.\r\n * @class\r\n * @param {string} baseUrl - Url to the securable\r\n * @param {IBaseDao} dao - Data access object used to make requests.\r\n * @example <caption>Access Permissions class using the 'permissions' property on a Web</caption>\r\n * var dao = new SPScript.RestDao(_spPageContextInfo.webAbsoluteUrl);\r\n *\r\n * dao.web.permissions.getRoleAssignments()\r\n *     .then(function(roleAssignments) { console.log(roleAssignments) });\r\n * @example <caption>Access Permissions class using the 'permissions' property on a List</caption>\r\n * dao.lists(\"Restricted Library\").permissions.getRoleAssignments()\r\n *     .then(function(roleAssignments) { console.log(roleAssignments) });\r\n */\nvar Permissions = function Permissions(baseUrl, dao) {\n   this._dao = dao;\n   this.baseUrl = baseUrl;\n};\n\n/**\r\n * Gets all the role assignments on that securable\r\n * @returns {Promise<Array<RoleAssignment>>} - A Promise that resolves to an array of role assignments\r\n * @example\r\n * dao.web.permissions.getRoleAssignments()\r\n *     .then(function(roleAssignments) { console.log(roleAssignments) });\r\n */\nPermissions.prototype.getRoleAssignments = function () {\n   var url = this.baseUrl + \"/RoleAssignments?$expand=Member,RoleDefinitionBindings\";\n   return this._dao.get(url).then(utils.validateODataV2).then(function (results) {\n      return results.map(transforms.roleAssignment);\n   });\n};\n\n/**\r\n * Gets all the role assignments on that securable. If you don't pass an email, it will use the current user.\r\n * @param {string} [email] - If you don't pass an email it will use current user\r\n * @returns {Promise<Array>} - A Promise that resolves to an array of string base permission values\r\n * @example <caption>Get the current users permissions on a site</caption>\r\n * dao.web.permissions.check()\r\n *     .then(function(basePermissions) { console.log(basePermissions) });\r\n * @example <caption>Get a specified user's permissions on a list</caption>\r\n * var email = \"andrew@andrewpetersen.onmicrosoft.com\"\r\n * dao.lists(\"Restricted Library\").permissions.check(email)\r\n *     .then(function(basePermissions) { console.log(basePermissions) });\r\n */\nPermissions.prototype.check = function (email) {\n   var _this = this;\n\n   var checkPrivs = function checkPrivs(user) {\n      var login = encodeURIComponent(user.LoginName);\n      var url = _this.baseUrl + \"/getusereffectivepermissions(@v)?@v='\" + login + \"'\";\n      return _this._dao.get(url).then(utils.validateODataV2);\n   };\n\n   //if no email, and no current user id, reject\n   if (!email && !utils.isBrowser()) {\n      return Promise.reject(\"Can't Check Permissions.  No email passed and no current user\");\n   }\n\n   // If no email is passed, then get current user, else get user by email\n   var req = !email ? this._dao.get('/web/getuserbyid(' + _spPageContextInfo.userId + ')').then(function (data) {\n      return data.d;\n   }) : this._dao.web.getUser(email);\n\n   return req.then(checkPrivs).then(function (privs) {\n      return permissionMaskToStrings(privs.GetUserEffectivePermissions.Low, privs.GetUserEffectivePermissions.High);\n   });\n};\n\n/**\r\n * Represents a permission on the securable\r\n * @typedef {Object} RoleMember\r\n * @property {string} login - Login Name\r\n * @property {string} name - User or Group title\r\n * @property {string} id - Member Id\r\n */\n\n/**\r\n * Represents a permission on the securable\r\n * @typedef {Object} RoleDef\r\n * @property {string} name - Role Definition name\r\n * @property {string} description - Role Definition description\r\n * @property {Array} basePermissions - Array of base permission strings\r\n */\n\n/**\r\n * Represents a permission on the securable\r\n * @typedef {Object} RoleAssignment\r\n * @property {RoleMember} member - User or group\r\n * @property {Array<RoleDef>} roles - An array of role definitions\r\n */\nvar transforms = {\n   roleAssignment: function roleAssignment(raw) {\n      var priv = {\n         member: {\n            login: raw.Member.LoginName,\n            name: raw.Member.Title,\n            id: raw.Member.Id\n         }\n      };\n      priv.roles = raw.RoleDefinitionBindings.results.map(function (roleDef) {\n         return {\n            name: roleDef.Name,\n            description: roleDef.Description,\n            basePermissions: permissionMaskToStrings(roleDef.BasePermissions.Low, roleDef.BasePermissions.High)\n         };\n      });\n      return priv;\n   }\n};\n\nvar permissionMaskToStrings = function permissionMaskToStrings(lowMask, highMask) {\n   var basePermissions = [];\n   spBasePermissions.forEach(function (basePermission) {\n      if ((basePermission.low & lowMask) > 0 || (basePermission.high & highMask) > 0) {\n         basePermissions.push(basePermission.name);\n      }\n   });\n   return basePermissions;\n};\n\n// Scraped it from SP.PermissionKind.\n// Storing it in here to remove sp.js dependency\n\n// var basePermissions = [];\n// Object.keys(SP.PermissionKind).forEach(function(key) {\n// \tvar perm = new SP.BasePermissions();\n//     perm.set(SP.PermissionKind[key]);\n//     var permisison = {\n//     \tname: key,\n//     \tlow: perm.$A_1,\n//     \thigh: perm.$9_1\n//     };\n//     basePermissions.push(permisison);\n// });\n\nvar spBasePermissions = [{\n   \"name\": \"emptyMask\",\n   \"low\": 0,\n   \"high\": 0\n}, {\n   \"name\": \"viewListItems\",\n   \"low\": 1,\n   \"high\": 0\n}, {\n   \"name\": \"addListItems\",\n   \"low\": 2,\n   \"high\": 0\n}, {\n   \"name\": \"editListItems\",\n   \"low\": 4,\n   \"high\": 0\n}, {\n   \"name\": \"deleteListItems\",\n   \"low\": 8,\n   \"high\": 0\n}, {\n   \"name\": \"approveItems\",\n   \"low\": 16,\n   \"high\": 0\n}, {\n   \"name\": \"openItems\",\n   \"low\": 32,\n   \"high\": 0\n}, {\n   \"name\": \"viewVersions\",\n   \"low\": 64,\n   \"high\": 0\n}, {\n   \"name\": \"deleteVersions\",\n   \"low\": 128,\n   \"high\": 0\n}, {\n   \"name\": \"cancelCheckout\",\n   \"low\": 256,\n   \"high\": 0\n}, {\n   \"name\": \"managePersonalViews\",\n   \"low\": 512,\n   \"high\": 0\n}, {\n   \"name\": \"manageLists\",\n   \"low\": 2048,\n   \"high\": 0\n}, {\n   \"name\": \"viewFormPages\",\n   \"low\": 4096,\n   \"high\": 0\n}, {\n   \"name\": \"anonymousSearchAccessList\",\n   \"low\": 8192,\n   \"high\": 0\n}, {\n   \"name\": \"open\",\n   \"low\": 65536,\n   \"high\": 0\n}, {\n   \"name\": \"viewPages\",\n   \"low\": 131072,\n   \"high\": 0\n}, {\n   \"name\": \"addAndCustomizePages\",\n   \"low\": 262144,\n   \"high\": 0\n}, {\n   \"name\": \"applyThemeAndBorder\",\n   \"low\": 524288,\n   \"high\": 0\n}, {\n   \"name\": \"applyStyleSheets\",\n   \"low\": 1048576,\n   \"high\": 0\n}, {\n   \"name\": \"viewUsageData\",\n   \"low\": 2097152,\n   \"high\": 0\n}, {\n   \"name\": \"createSSCSite\",\n   \"low\": 4194304,\n   \"high\": 0\n}, {\n   \"name\": \"manageSubwebs\",\n   \"low\": 8388608,\n   \"high\": 0\n}, {\n   \"name\": \"createGroups\",\n   \"low\": 16777216,\n   \"high\": 0\n}, {\n   \"name\": \"managePermissions\",\n   \"low\": 33554432,\n   \"high\": 0\n}, {\n   \"name\": \"browseDirectories\",\n   \"low\": 67108864,\n   \"high\": 0\n}, {\n   \"name\": \"browseUserInfo\",\n   \"low\": 134217728,\n   \"high\": 0\n}, {\n   \"name\": \"addDelPrivateWebParts\",\n   \"low\": 268435456,\n   \"high\": 0\n}, {\n   \"name\": \"updatePersonalWebParts\",\n   \"low\": 536870912,\n   \"high\": 0\n}, {\n   \"name\": \"manageWeb\",\n   \"low\": 1073741824,\n   \"high\": 0\n}, {\n   \"name\": \"anonymousSearchAccessWebLists\",\n   \"low\": -2147483648,\n   \"high\": 0\n}, {\n   \"name\": \"useClientIntegration\",\n   \"low\": 0,\n   \"high\": 16\n}, {\n   \"name\": \"useRemoteAPIs\",\n   \"low\": 0,\n   \"high\": 32\n}, {\n   \"name\": \"manageAlerts\",\n   \"low\": 0,\n   \"high\": 64\n}, {\n   \"name\": \"createAlerts\",\n   \"low\": 0,\n   \"high\": 128\n}, {\n   \"name\": \"editMyUserInfo\",\n   \"low\": 0,\n   \"high\": 256\n}, {\n   \"name\": \"enumeratePermissions\",\n   \"low\": 0,\n   \"high\": 1073741824\n}];\n\nmodule.exports = Permissions;\n//# sourceMappingURL=permissions.js.map"
    },
    {
      "id": 6,
      "identifier": "C:\\gitwip\\spscript\\lib\\queryString.js",
      "name": "./lib/queryString.js",
      "index": 14,
      "index2": 13,
      "size": 2164,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\gitwip\\spscript\\entries\\spscript.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 0,
          "moduleIdentifier": "C:\\gitwip\\spscript\\entries\\spscript.js",
          "module": "./entries/spscript.js",
          "moduleName": "./entries/spscript.js",
          "type": "cjs require",
          "userRequest": "../lib/queryString",
          "loc": "9:23-52"
        },
        {
          "moduleId": 16,
          "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\search.js",
          "module": "./lib/search.js",
          "moduleName": "./lib/search.js",
          "type": "cjs require",
          "userRequest": "./queryString",
          "loc": "3:18-42"
        }
      ],
      "source": "\"use strict\";\n\nvar qs = require(\"querystring\");\n\n/**\r\n* @namespace SPScript.queryString\r\n*/\n\n/**\r\n * Turns a normal js Object into a string in form of \"key1=value1&key2=value2...\"\r\n * @param {Object} obj - Javascript object to query stringify\r\n * @param {bool} [[quoteValues]] - By default, if the value has a space, it will be single quoted. Passing true will cause all values to be quoted.\r\n * @returns {string} - Note: tt does NOT prepend '?' char\r\n * @function fromObj\r\n * @memberof SPScript.queryString\r\n * @example\r\n * var myObj = { id: 123, title: \"My Title\" }\r\n * var qs = SPScript.queryString.fromObj(myObj);\r\n * // qs would output: \"id=123&title='MyTitle'\"\r\n */\nvar fromObj = exports.fromObj = function (obj, quoteValues) {\n\n  var writeParam = function writeParam(key) {\n    var value = (obj[key] + \"\").trim();\n    // if there is a space, wrap in single quotes\n    if (value.indexOf(\" \") > -1 || quoteValues) value = \"'\" + value + \"'\";\n\n    return key + \"=\" + value;\n  };\n\n  var str = Object.keys(obj).map(writeParam).join(\"&\");\n  return str;\n};\n\n/**\r\n * Turns a string in form of \"key1=value1&key2=value2...\" into a javascript object\r\n * @param {string} str - must be in query string format to work\r\n * @returns {Object} - A javascript object with properties for each key found in the query string passed in.\r\n * @function toObj\r\n * @memberof SPScript.queryString\r\n * @example\r\n * // your url is \"https://sharepoint.com/sites/mysite/home.aspx?id=123&title='My Title'\"\r\n * var myObj = SPScript.queryString.toObj(window.location.search);\r\n * //myObj would be { id: 123, title: \"My Title\" }\r\n */\nvar toObj = exports.toObj = function (str) {\n  //if no string is passed use window.location.search\n  if (str === undefined && window && window.location && window.location.search) {\n    str = window.location.search;\n  }\n  if (!str) return {};\n  //trim off the leading '?' if its there\n  if (str[0] === \"?\") str = str.substr(1);\n\n  return qs.parse(str);\n};\n\nexports.contains = function (key, text) {\n  return toObj(text).hasOwnProperty(key);\n};\nexports.getValue = function (key, text) {\n  return toObj(text)[key] || \"\";\n};\n//# sourceMappingURL=queryString.js.map"
    },
    {
      "id": 7,
      "identifier": "C:\\gitwip\\spscript\\node_modules\\mustache\\mustache.js",
      "name": "./~/mustache/mustache.js",
      "index": 20,
      "index2": 19,
      "size": 19391,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\gitwip\\spscript\\entries\\spscript.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 0,
          "moduleIdentifier": "C:\\gitwip\\spscript\\entries\\spscript.js",
          "module": "./entries/spscript.js",
          "moduleName": "./entries/spscript.js",
          "type": "cjs require",
          "userRequest": "mustache",
          "loc": "10:22-41"
        },
        {
          "moduleId": 9,
          "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\csr-renderers.js",
          "module": "./lib/csr-renderers.js",
          "moduleName": "./lib/csr-renderers.js",
          "type": "cjs require",
          "userRequest": "mustache",
          "loc": "3:17-36"
        }
      ],
      "source": "/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */\n\n/*global define: false Mustache: true*/\n\n(function defineMustache (global, factory) {\n  if (typeof exports === 'object' && exports && typeof exports.nodeName !== 'string') {\n    factory(exports); // CommonJS\n  } else if (typeof define === 'function' && define.amd) {\n    define(['exports'], factory); // AMD\n  } else {\n    global.Mustache = {};\n    factory(global.Mustache); // script, wsh, asp\n  }\n}(this, function mustacheFactory (mustache) {\n\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill (object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction (object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr (obj) {\n    return isArray(obj) ? 'array' : typeof obj;\n  }\n\n  function escapeRegExp (string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty (obj, propName) {\n    return obj != null && typeof obj === 'object' && (propName in obj);\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp (re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace (string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml (string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   */\n  function parseTemplate (template, tags) {\n    if (!template)\n      return [];\n\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace () {\n      if (hasTag && !nonSpace) {\n        while (spaces.length)\n          delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags (tagsToCompile) {\n      if (typeof tagsToCompile === 'string')\n        tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n        throw new Error('Invalid tags: ' + tagsToCompile);\n\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n          } else {\n            nonSpace = true;\n          }\n\n          tokens.push([ 'text', chr, start, start + 1 ]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n')\n            stripSpace();\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe))\n        break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe))\n        throw new Error('Unclosed tag at ' + scanner.pos);\n\n      token = [ type, value, start, scanner.pos ];\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection)\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value)\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection)\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens (tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens (tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner (string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos () {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan (re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0)\n      return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context (view, parentContext) {\n    this.view = view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup (name) {\n    var cache = this.cache;\n\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this, names, index, lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          value = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           **/\n          while (value != null && index < names.length) {\n            if (index === names.length - 1)\n              lookupHit = hasProperty(value, names[index]);\n\n            value = value[names[index++]];\n          }\n        } else {\n          value = context.view[name];\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit)\n          break;\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value))\n      value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer () {\n    this.cache = {};\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache () {\n    this.cache = {};\n  };\n\n  /**\n   * Parses and caches the given `template` and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse (template, tags) {\n    var cache = this.cache;\n    var tokens = cache[template];\n\n    if (tokens == null)\n      tokens = cache[template] = parseTemplate(template, tags);\n\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   */\n  Writer.prototype.render = function render (template, view, partials) {\n    var tokens = this.parse(template);\n    var context = (view instanceof Context) ? view : new Context(view);\n    return this.renderTokens(tokens, context, partials, template);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);\n      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);\n      else if (symbol === '>') value = this.renderPartial(token, context, partials, originalTemplate);\n      else if (symbol === '&') value = this.unescapedValue(token, context);\n      else if (symbol === 'name') value = this.escapedValue(token, context);\n      else if (symbol === 'text') value = this.rawValue(token);\n\n      if (value !== undefined)\n        buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender (template) {\n      return self.render(template, context, partials);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string')\n        throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null)\n        buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n    }\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0))\n      return this.renderTokens(token[4], context, partials, originalTemplate);\n  };\n\n  Writer.prototype.renderPartial = function renderPartial (token, context, partials) {\n    if (!partials) return;\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null)\n      return this.renderTokens(this.parse(value), context, partials, value);\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return mustache.escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue (token) {\n    return token[1];\n  };\n\n  mustache.name = 'mustache.js';\n  mustache.version = '2.3.0';\n  mustache.tags = [ '{{', '}}' ];\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view` and `partials` using the\n   * default writer.\n   */\n  mustache.render = function render (template, view, partials) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                          'but \"' + typeStr(template) + '\" was given as the first ' +\n                          'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials);\n  };\n\n  // This is here for backwards compatibility with 0.4.x.,\n  /*eslint-disable */ // eslint wants camel cased function name\n  mustache.to_html = function to_html (template, view, partials, send) {\n    /*eslint-enable*/\n\n    var result = mustache.render(template, view, partials);\n\n    if (isFunction(send)) {\n      send(result);\n    } else {\n      return result;\n    }\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n  return mustache;\n}));\n"
    },
    {
      "id": 8,
      "identifier": "C:\\gitwip\\spscript\\lib\\baseDao.js",
      "name": "./lib/baseDao.js",
      "index": 5,
      "index2": 16,
      "size": 4386,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\gitwip\\spscript\\lib\\restDao.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 15,
          "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\restDao.js",
          "module": "./lib/restDao.js",
          "moduleName": "./lib/restDao.js",
          "type": "cjs require",
          "userRequest": "./baseDao",
          "loc": "5:14-34"
        }
      ],
      "source": "\"use strict\";\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar List = require(\"./list\");\nvar Web = require(\"./web\");\nvar Profiles = require(\"./profiles\");\nvar Search = require(\"./search\");\nvar utils = require(\"./utils\");\nvar CustomActions = require(\"./customActions\");\nvar headerUtils = require(\"./requestHeaders\");\n/**\r\n * Abstract class. You'll never work with this directly. \r\n * @abstract\r\n * @private\r\n * @property {Web} web - Allows interacting with the SharePoint site you connected to\r\n * @property {Search} search - Allows querying through the SP Search Service\r\n * @property {Profiles} profiles - Allows interacting with the SP Profile Service\r\n */\nvar BaseDao = function BaseDao() {\n\tthis.web = new Web(this);\n\tthis.search = new Search(this);\n\tthis.profiles = new Profiles(this);\n\tthis.customActions = new CustomActions(this);\n};\n\nBaseDao.prototype.executeRequest = function () {\n\tthrow \"Not implemented exception\";\n};\n\n/**\r\n * Generic helper to make AJAX GET request\r\n  * @example <caption>Use generic GET method to retrieve a site's content types</caption>\r\n * dao.get('/web/contentTypes').then(function(data) { console.log(data.d.results)})\r\n * @param {string} relativeQueryUrl - the API url relative to \"/_api\"\r\n * @param {Object} [extendedOptions] - AJAX options (like custom request headers)\r\n * @returns {Promise} - An ES6 Promise that resolves to the an object probably in the form of data.d\r\n */\nBaseDao.prototype.get = function (relativeQueryUrl, extendedOptions) {\n\tvar options = _extends({}, {\n\t\tmethod: \"GET\"\n\t}, extendedOptions);\n\treturn this.executeRequest(relativeQueryUrl, options).then(utils.parseJSON);\n};\n\nBaseDao.prototype.getRequestDigest = function () {\n\treturn this.post('/contextinfo', {}).then(function (data) {\n\t\treturn data.d.GetContextWebInformation.FormDigestValue;\n\t});\n};\n/**\r\n * If a list name is passed, an SPScript.List object, otherwise performs a request to get all the site's lists\r\n * @param {string} [listname] - If a list name is passed, method is synchronous returning an SPScript.List\r\n * @returns {List|Promise} - SPScript.List object or a Promise that resolves to an Array of lists\r\n * @example <caption>Option 1: No List Name gets all the lists of a site</caption>\r\n * dao.lists().then(function(lists) { console.log(lists)});\r\n * @example <caption>Option 2: Pass a List Name to get a list object</caption>\r\n * var list = dao.lists('MyList');\r\n * list.getItemById(12).then(function(item) { console.log(item)});\r\n */\nBaseDao.prototype.lists = function (listname) {\n\tif (!listname) {\n\t\treturn this.get(\"/web/lists\").then(utils.validateODataV2);\n\t}\n\treturn new List(listname, this);\n};\n\n/**\r\n * Generic helper to make AJAX POST request\r\n * @param {string} relativeQueryUrl - the API url relative to \"/_api\"\r\n * @param {Object} [extendedOptions] - AJAX options (like custom request headers)\r\n * @returns {Promise} - An ES6 Promise\r\n */\nBaseDao.prototype.post = function (relativePostUrl, body, opts) {\n\tbody = packagePostBody(body, opts);\n\tvar options = {\n\t\tmethod: \"POST\",\n\t\tdata: body\n\t};\n\toptions = _extends({}, options, opts);\n\treturn this.executeRequest(relativePostUrl, options).then(utils.parseJSON);\n};\n\nBaseDao.prototype.authorizedPost = function (relativePostUrl, body, verb) {\n\tvar _this = this;\n\n\treturn this.getRequestDigest().then(function (digest) {\n\t\treturn headerUtils.getActionHeaders(verb, digest);\n\t}).then(function (headers) {\n\t\treturn _this.post(relativePostUrl, body, { headers: headers });\n\t});\n};\n\nBaseDao.prototype.ensureRequestDigest = function (digest) {\n\treturn digest ? Promise.resolve(digest) : this.getRequestDigest();\n};\n\n//Skip stringify it its already a string or it has an explicit Content-Type that is not JSON\nvar packagePostBody = function packagePostBody(body, opts) {\n\t// if its already a string just return\n\tif (typeof body === \"string\") return body;\n\t// if it has an explicit content-type, asssume the body is already that type\n\tif (opts && opts.headers && opts.headers[\"Content-Type\"] && opts.headers[\"Content-Type\"].indexOf(\"json\") === -1) {\n\t\treturn body;\n\t}\n\t//others stringify\n\treturn JSON.stringify(body);\n};\nmodule.exports = BaseDao;\n//# sourceMappingURL=baseDao.js.map"
    },
    {
      "id": 9,
      "identifier": "C:\\gitwip\\spscript\\lib\\csr-renderers.js",
      "name": "./lib/csr-renderers.js",
      "index": 22,
      "index2": 20,
      "size": 1571,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\gitwip\\spscript\\lib\\csr.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 10,
          "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\csr.js",
          "module": "./lib/csr.js",
          "moduleName": "./lib/csr.js",
          "type": "cjs require",
          "userRequest": "./csr-renderers",
          "loc": "5:36-62"
        }
      ],
      "source": "\"use strict\";\n\nvar templating = require(\"mustache\");\n\nfunction createTemplateRenderer(htmlTemplate, events) {\n    return function (ctx) {\n        return templating.render(htmlTemplate, ctx);\n    };\n}\n\nfunction createFormFieldRenderer(field) {\n    return function (ctx) {\n        var formCtx = ctx.FormContext;\n        if (field.onReady) {\n            if (formCtx) {\n                formCtx.registerInitCallback(field.name, field.onReady.bind(null, ctx));\n            } else {\n                setTimeout(field.onReady.bind(null, ctx), 100);\n            }\n        }\n        if (field.getValue && formCtx) {\n            formCtx.registerGetValueCallback(field.name, field.getValue.bind(null, ctx));\n        }\n        // tack on 'setValue' function\n        if (formCtx && formCtx.updateControlValue) {\n            field.setValue = function (value) {\n                formCtx.updateControlValue(field.name, value);\n            };\n        }\n\n        return field.render(ctx);\n    };\n}\n\nfunction createDisplayFieldRenderer(field) {\n    return function (ctx) {\n        var formCtx = ctx.FormContext;\n        if (formCtx && formCtx.registerInitCallback && field.onReady) {\n            formCtx.registerInitCallback(field.name, field.onReady);\n        }\n        return field.render(ctx);\n    };\n}\n\nvar renderers = {\n    template: {\n        create: createTemplateRenderer\n    },\n    formField: {\n        create: createFormFieldRenderer\n    },\n    displayField: {\n        create: createDisplayFieldRenderer\n    }\n};\n\nmodule.exports = renderers;\n//# sourceMappingURL=csr-renderers.js.map"
    },
    {
      "id": 10,
      "identifier": "C:\\gitwip\\spscript\\lib\\csr.js",
      "name": "./lib/csr.js",
      "index": 21,
      "index2": 21,
      "size": 3073,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\gitwip\\spscript\\entries\\spscript.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 0,
          "moduleIdentifier": "C:\\gitwip\\spscript\\entries\\spscript.js",
          "module": "./entries/spscript.js",
          "moduleName": "./entries/spscript.js",
          "type": "cjs require",
          "userRequest": "../lib/csr",
          "loc": "14:15-36"
        }
      ],
      "source": "\"use strict\";\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar renderers = exports.renderers = require(\"./csr-renderers\");\n\n//fieldComponent = { name, onReady, render, getValue, locations:[\"View\", \"NewForm\",\"DisplayForm\", \"EditForm\"] }\n// var renderColoredStatus = function(ctx) {\n//     // map statuses  to colors\n//     var colors = {\n//         \"Not Started\": \"orange\",\n//         \"In Progress\": \"yellow\",\n//         \"Done\": \"green\"\n//     };\n\n//     // Look at the item's status to get the mapped color\n//     // If the item has a status value that is not mapped, then use 'red'\n//     var color = colors[ctx.CurrentItem.Status] || \"red\";\n\n//     // return the html used to render the status field;\n//     return \"<h4 style='color:\" + color + \"'>\" + ctx.CurrentItem.Status + \"</h4>\";\n// };\n\n// var fieldOverride = {\n//     name:  \"Status\",\n//     render: renderColoredStatus\n// };\n\n// SPScript.CSR.registerDisplayField(fieldOverride);\n\nvar registerFormField = exports.registerFormField = function (fieldComponent, opts) {\n    var renderer = renderers.formField.create(fieldComponent);\n    fieldComponent.locations = fieldComponent.locations || [\"NewForm\", \"EditForm\"];\n    return registerField(fieldComponent, renderer, opts);\n};\n\n//{name, onReady, render, locations: [\"View\", \"DisplayForm\"]}\nvar registerDisplayField = exports.registerDisplayField = function (fieldComponent, opts) {\n    var renderer = renderers.displayField.create(fieldComponent);\n    fieldComponent.locations = fieldComponent.locations || [\"View\", \"DisplayForm\"];\n    return registerField(fieldComponent, renderer, opts);\n};\n\nvar registerField = exports.registerField = function (field, renderer, opts) {\n    var renderers = {};\n    //View, DisplayForm, EditForm, NewForm\n    field.locations.forEach(function (l) {\n        return renderers[l] = renderer;\n    });\n    var defaults = {\n        Templates: {\n            Fields: {}\n        }\n    };\n    var templateOverride = _extends({}, defaults, opts);\n    templateOverride.Templates.Fields[field.name] = renderers;\n    SPClientTemplates.TemplateManager.RegisterTemplateOverrides(templateOverride);\n    return field;\n};\n\nvar registerView = exports.registerView = function (templates, options) {\n    // templates keys are Header, Item, Footer\n    //RenderFieldTemplateDefault(ctx); default renderer?\n    var defaults = {\n        //BaseViewID\n        //ListTemplateType\n        Templates: {\n            Header: function Header() {\n                return \"\";\n            },\n            Footer: function Footer() {\n                return \"\";\n            }\n        }\n    };\n\n    var templateOverride = _extends({}, defaults, options);\n    templateOverride.Templates = _extends({}, templateOverride.Templates, templates);\n\n    SPClientTemplates.TemplateManager.RegisterTemplateOverrides(templateOverride);\n};\n//# sourceMappingURL=csr.js.map"
    },
    {
      "id": 11,
      "identifier": "C:\\gitwip\\spscript\\lib\\customActions.js",
      "name": "./lib/customActions.js",
      "index": 18,
      "index2": 15,
      "size": 4860,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\gitwip\\spscript\\lib\\baseDao.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 8,
          "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\baseDao.js",
          "module": "./lib/baseDao.js",
          "moduleName": "./lib/baseDao.js",
          "type": "cjs require",
          "userRequest": "./customActions",
          "loc": "10:20-46"
        }
      ],
      "source": "\"use strict\";\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar utils = require(\"./utils\");\nvar headers = require(\"./requestHeaders\");\n\nvar metadata = {\n\t__metadata: {\n\t\t\"type\": \"SP.UserCustomAction\"\n\t}\n};\n\nvar CustomActions = function CustomActions(dao) {\n\tvar _this = this;\n\n\tthis._dao = dao;\n\n\tthis.scopes = {\n\t\t\"Web\": {\n\t\t\tid: 3,\n\t\t\tname: \"Web\",\n\t\t\turl: \"/web/usercustomactions\"\n\t\t},\n\t\t\"Site\": {\n\t\t\tid: 2,\n\t\t\tname: \"Site\",\n\t\t\turl: \"/site/usercustomactions\"\n\t\t}\n\t};\n\tthis.scopes.getById = function (id) {\n\t\treturn id === 2 ? _this.scopes.Site : _this.scopes.Web;\n\t};\n};\n\n//\n// If a name is passed, filter the result set\nCustomActions.prototype.get = function (name) {\n\tvar _this2 = this;\n\n\t// first get the site scoped ones, then the web scoped ones\n\treturn this._dao.get(this.scopes.Site.url).then(utils.validateODataV2).then(function (siteCustomActions) {\n\t\treturn _this2._dao.get(_this2.scopes.Web.url).then(utils.validateODataV2)\n\t\t//combine site scoped and web scoped into single array\n\t\t.then(function (webCustomActions) {\n\t\t\treturn siteCustomActions.concat(webCustomActions);\n\t\t});\n\t}).then(function (customActions) {\n\t\t// if a name was passed filter it otherwise return everything\n\t\tif (name) {\n\t\t\tvar matches = customActions.filter(function (a) {\n\t\t\t\treturn a.Name === name;\n\t\t\t});\n\t\t\tif (matches.length) {\n\t\t\t\treturn matches[0];\n\t\t\t}\n\t\t\tthrow new Error(\"Unable to find Custom Action with name: \" + name);\n\t\t} else return customActions;\n\t});\n};\n\nCustomActions.prototype._getUrl = function (name) {\n\tvar _this3 = this;\n\n\treturn this.get(name).then(function (a) {\n\t\treturn _this3.scopes.getById(a.Scope).url + \"('\" + a.Id + \"')\";\n\t});\n};\n\nCustomActions.prototype._getUrlAndDigest = function (name) {\n\tvar _this4 = this;\n\n\tvar prep = {};\n\treturn this._getUrl(name).then(function (url) {\n\t\tprep.url = url;\n\t\treturn _this4._dao.getRequestDigest();\n\t}).then(function (digest) {\n\t\tprep.digest = digest;\n\t\treturn prep;\n\t});\n};\n\nCustomActions.prototype.update = function (updates) {\n\tvar _this5 = this;\n\n\tif (!updates || !updates.Name) throw new Error(\"You must at least pass a Custom Action 'Name'\");\n\n\treturn this._getUrlAndDigest(updates.Name).then(function (prep) {\n\t\tupdates = _extends({}, metadata, updates);\n\t\tvar opts = {\n\t\t\theaders: headers.getUpdateHeaders(prep.digest)\n\t\t};\n\t\treturn _this5._dao.post(prep.url, updates, opts);\n\t});\n};\n\nCustomActions.prototype.remove = function (name) {\n\tvar _this6 = this;\n\n\tif (!name) throw new Error(\"You must at least pass a Custom Action 'Name'\");\n\treturn this._getUrlAndDigest(name).then(function (prep) {\n\t\tvar opts = {\n\t\t\theaders: headers.getDeleteHeaders(prep.digest)\n\t\t};\n\t\treturn _this6._dao.post(prep.url, {}, opts);\n\t});\n};\n\nCustomActions.prototype.add = function (customAction) {\n\tvar _this7 = this;\n\n\tif (!customAction || !customAction.Name || !customAction.Location) throw new Error(\"You must at least pass a Custom Action 'Name' and 'Location'\");\n\tcustomAction.Scope = customAction.Scope || \"Web\";\n\treturn this._dao.getRequestDigest().then(function (digest) {\n\t\tcustomAction = _extends({}, metadata, customAction);\n\t\tvar scope = _this7.scopes[customAction.Scope];\n\t\tcustomAction.Scope = scope.id;\n\t\tvar opts = {\n\t\t\theaders: headers.getAddHeaders(digest)\n\t\t};\n\t\treturn _this7._dao.post(scope.url, customAction, opts);\n\t});\n};\n\nCustomActions.prototype.addScriptLink = function (name, url, opts) {\n\tvar customAction = {\n\t\tName: name,\n\t\tTitle: name,\n\t\tDescription: name,\n\t\tGroup: name,\n\t\tSequence: 100,\n\t\tScope: \"Web\",\n\t\tLocation: \"ScriptLink\",\n\t\tScriptSrc: url\n\t};\n\tcustomAction = _extends({}, customAction, opts || {});\n\n\treturn this.add(customAction);\n};\n\nCustomActions.prototype.addCSSLink = function (name, url, opts) {\n\tvar scriptBlockStr = \"\\n\\t\\t(function() {\\n\\t\\t\\tvar head = document.querySelector(\\\"head\\\");\\n\\t\\t\\tvar styleTag = document.createElement(\\\"style\\\");\\n\\t\\t\\tstyleTag.appendChild(document.createTextNode(\\\"body { opacity: 0 }\\\"));\\n\\t\\t\\t\\n\\t\\t\\tvar linkTag = document.createElement(\\\"link\\\");\\n\\t\\t\\tlinkTag.rel = \\\"stylesheet\\\";\\tlinkTag.href = \\\"\" + url + \"\\\"; linkTag.type = \\\"text/css\\\";\\n\\t\\t\\tlinkTag.addEventListener(\\\"load\\\", function() {\\n\\t\\t\\t\\thead.removeChild(styleTag);\\n\\t\\t\\t});\\n\\n\\t\\t\\thead.appendChild(styleTag);\\n\\t\\t\\thead.appendChild(linkTag);\\n\\t\\t})();\";\n\n\tvar customAction = {\n\t\tName: name,\n\t\tTitle: name,\n\t\tDescription: name,\n\t\tGroup: name,\n\t\tSequence: 100,\n\t\tScope: \"Web\",\n\t\tLocation: \"ScriptLink\",\n\t\tScriptBlock: scriptBlockStr\n\t};\n\tcustomAction = _extends({}, customAction, opts || {});\n\n\treturn this.add(customAction);\n};\nCustomActions.metadata = metadata;\n\nmodule.exports = CustomActions;\n//# sourceMappingURL=customActions.js.map"
    },
    {
      "id": 12,
      "identifier": "C:\\gitwip\\spscript\\lib\\filesystem.js",
      "name": "./lib/filesystem.js",
      "index": 11,
      "index2": 7,
      "size": 2879,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\gitwip\\spscript\\lib\\web.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 17,
          "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\web.js",
          "module": "./lib/web.js",
          "moduleName": "./lib/web.js",
          "type": "cjs require",
          "userRequest": "./filesystem",
          "loc": "8:13-36"
        }
      ],
      "source": "\"use strict\";\n\nvar utils = require(\"./utils\");\n\n/**\r\n * Represents a SharePoint Folder.  Keep in mind, and File or Folder objects obtained from the 'files' and 'folders' array will not have their child items populated.\r\n * @typedef Folder\r\n * @property {string} name - Folder name\r\n * @property {string} serverRelativeUrl - Server relative url\r\n * @property {int} itemCount - Number of items in the folder\r\n * @property {string} guid - Unique ID of the folder\r\n * @property {string} uri - API url to get the raw SP.Folder object\r\n * @property {Array<File>} files - An array of files in that folder\r\n * @property {Array<Folder>} folders - An array of sub folders\r\n * @example\r\n *  dao.web.getFolder(\"/sites/mysite/Shared Documents\")\r\n *\t\t\t.then(function(folder) { \r\n *\t\t\t\tconsole.log(folder.name);\r\n *\t\t\t\tconsole.log(folder.files);\r\n *\t\t\t});\r\n */\nvar Folder = function Folder(spFolder) {\n  this.mapProperties(spFolder);\n  this.populateChildren(spFolder);\n};\n\nFolder.prototype.populateChildren = function (spFolder) {\n  if (spFolder && spFolder.Folders && spFolder.Folders.results) {\n    this.folders = spFolder.Folders.results.map(function (f) {\n      return new Folder(f);\n    });\n  }\n  if (spFolder && spFolder.Files && spFolder.Files.results) {\n    this.files = spFolder.Files.results.map(function (f) {\n      return new File(f);\n    });\n  }\n};\n\nFolder.prototype.mapProperties = function (spFolder) {\n  this.name = spFolder.Name;\n  this.serverRelativeUrl = spFolder.ServerRelativeUrl;\n  this.itemCount = spFolder.ItemCount;\n  this.guid = spFolder.UniqueId;\n  this.uri = spFolder.__metadata.uri;\n};\n\n/**\r\n * Represents a SharePoint File\r\n * @typedef File\r\n * @property {string} name - Folder name\r\n * @property {string} title - Folder title\r\n * @property {string} serverRelativeUrl - Server relative url\r\n * @property {int} byteLength - File size in bytes\r\n * @property {string} checkoutType - Checked out status of file.  \"none\", \"offline\", \"online\".\r\n * @property {number} majorVersion - Major version of the file\r\n * @property {number} minorVersion - Minor version of the file\r\n * @property {string} uri - API url to get the raw SP.Folder object\r\n * @example\r\n *  dao.web.getFile(\"/sites/mysite/Shared Documents/myFile.docx\")\r\n *\t\t\t.then(function(file) { \r\n *\t\t\t\tconsole.log(file.name);\r\n *\t\t\t\tconsole.log(\"Size:\" + (file.byteLength / 1000) + \"KB\");\r\n *\t\t\t});\r\n */\nvar File = function File(spFile) {\n  this.mapProperties(spFile);\n};\n\nFile.prototype.mapProperties = function (spFile) {\n  this.name = spFile.Name, this.title = spFile.Title, this.checkoutType = spFile.CheckOutType, this.byteLength = spFile.Length, this.majorVersion = spFile.MajorVersion, this.minorVersion = spFile.MinorVersion, this.serverRelativeUrl = spFile.ServerRelativeUrl, this.uri = spFile.__metadata.uri;\n};\n\nmodule.exports = {\n  File: File,\n  Folder: Folder\n};\n//# sourceMappingURL=filesystem.js.map"
    },
    {
      "id": 13,
      "identifier": "C:\\gitwip\\spscript\\lib\\list.js",
      "name": "./lib/list.js",
      "index": 6,
      "index2": 6,
      "size": 10884,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\gitwip\\spscript\\lib\\baseDao.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 8,
          "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\baseDao.js",
          "module": "./lib/baseDao.js",
          "moduleName": "./lib/baseDao.js",
          "type": "cjs require",
          "userRequest": "./list",
          "loc": "5:11-28"
        }
      ],
      "source": "\"use strict\";\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar utils = require(\"./utils\");\nvar Permissions = require(\"./permissions\");\nvar headers = require(\"./requestHeaders\");\n\n/**\r\n * Represents a SharePoint list. You shouldn't ever be new'ing this class up up yourself, instead you'll get it from your dao as shown in first example.\r\n * @class\r\n * @param {IBaseDao} dao - Data access object used to make requests.\r\n * @property {Permissions} permissions - allows checking security information of the Web\r\n * @property {string} baseUrl - API relative url (value = \"/web\")\r\n * @example <caption>You access a 'List' by passing a name to the 'lists' property of the dao.</caption>\r\n * var dao = new SPScript.RestDao(_spPageContextInfo.webAbsoluteUrl);\r\n * var list = dao.lists(\"Tasks\");\r\n * list.getItemById(12).then(function(item) { console.log(item) });\r\n */\nvar List = function List(listname, dao) {\n\tthis.listname = listname;\n\tthis.baseUrl = \"/web/lists/getbytitle('\" + listname + \"')\";\n\tthis._dao = dao;\n\tthis.permissions = new Permissions(this.baseUrl, this._dao);\n};\n\nList.prototype.getFields = function (odataQuery) {\n\tvar url = this.baseUrl + \"/fields\" + appendOData(odataQuery);\n\treturn this._dao.get(url).then(utils.validateODataV2);\n};\n\nList.prototype.getField = function (fieldName) {\n\treturn this.getFields(\"$filter=InternalName eq '\" + fieldName + \"'\").then(function (fields) {\n\t\tif (fields.length) return fields[0];else throw new Error(\"Unable to find field: \" + fieldName);\n\t});\n};\n\nList.prototype.updateField = function (fieldName, updates) {\n\tvar _this = this;\n\n\tthis.getField(fieldName).then(function (f) {\n\t\tvar url = _this.baseUrl + \"/Fields(guid'\" + f.Id + \"')\";\n\t\tupdates.__metadata = { type: \"SP.Field\" };\n\t\treturn _this._dao.authorizedPost(url, updates, \"MERGE\");\n\t});\n};\n/**\r\n * Retrieves items in the lists\r\n * @param {string} [odata] - OData string\r\n * @returns {Promise<Array>} - A Promise that resolves an array of list items\r\n * @example <caption>Get all items</caption>\r\n * list.getItems().then(function(items) { console.log(items) });\r\n * @example <caption>Get first 5 items by passing in optional OData.</caption>\r\n * list.getItems(\"$top=5\").then(function(items) { console.log(items) });\r\n */\nList.prototype.getItems = function (odataQuery) {\n\treturn this._dao.get(this.baseUrl + \"/items\" + appendOData(odataQuery)).then(utils.validateODataV2);\n};\n\n/**\r\n * Retrieves a specific item based on SharePoint ID\r\n * @param {int} id - SharePoint integer Id\r\n * @param {string} [odata] - OData string\r\n * @returns {Promise} - A Promise that resolves to a single list item\r\n * @example <caption>Get the item with ID of 5.</caption>\r\n * list.getItemById(5).then(function(item) { console.log(item) });\r\n * @example <caption>Only bring back 'Title' and 'Status' using optional OData string</caption>\r\n * list.getItemById(5, \"$select=Title,Status\").then(function(items) { console.log(items) });\r\n */\nList.prototype.getItemById = function (id, odata) {\n\tvar url = this.baseUrl + \"/items(\" + id + \")\" + appendOData(odata);\n\treturn this._dao.get(url).then(utils.validateODataV2);\n};\n\n/**\r\n * Retrieves basic information about the list\r\n * @returns {Promise<SP.Web>} - A Promise that resolves to an object containing non-deferred properties of an SP.List (https://msdn.microsoft.com/en-us/library/office/jj244873.aspx)\r\n * @example\r\n * list.info().then(function(info) { console.log(info) });\r\n */\nList.prototype.info = function () {\n\treturn this._dao.get(this.baseUrl).then(utils.validateODataV2);\n};\n\n/**\r\n * Creates a SharePoint list item\r\n * @param {object} item - Javascript object representing the list item\r\n * @param {string} [requestDigest] - Optional request digest token used to authorize the action. One will be automatically retrieved if not provided.\r\n * @returns {Promise} - A Promise that resolves to the inserted list item\r\n * @example <caption>Add a list item. Set Title and Status.</caption>\r\n * var newItem = {\r\n *    Title: \"Test Created Item\",\r\n *    MyStatus: \"Red\"\r\n * };\r\n * list.addItem(newItem).then(function(item) { console.log(item) });\r\n */\n\nList.prototype.addItem = function (item, digest) {\n\tvar _this2 = this;\n\n\treturn this._dao.ensureRequestDigest(digest).then(function (digest) {\n\t\treturn _this2._dao.get(_this2.baseUrl).then(function (data) {\n\n\t\t\t//decorate the item with the 'type' metadata\n\t\t\titem = _extends({}, {\n\t\t\t\t\"__metadata\": {\n\t\t\t\t\t\"type\": data.d.ListItemEntityTypeFullName\n\t\t\t\t}\n\t\t\t}, item);\n\n\t\t\tvar customOptions = {\n\t\t\t\theaders: headers.getAddHeaders(digest)\n\t\t\t};\n\t\t\treturn _this2._dao.post(_this2.baseUrl + \"/items\", item, customOptions);\n\t\t}).then(utils.validateODataV2);\n\t});\n};\n\n/**\r\n * Updates a SharePoint list item\r\n * @param {int} itemId - The SharePoint Id of the item to update\r\n * @param {object} updates - Javascript object representing columns you want to update\r\n * @param {string} [requestDigest] - Optional request digest token used to authorize the action. One will be automatically retrieved if not provided.\r\n * @returns {Promise} - A Promise\r\n * @example <caption>Update the item's Title</caption>\r\n * var updates = {\r\n *    Title: \"Updated Title\"\r\n * };\r\n * list.updateItem(12, updates).then(function() { console.log\"Success\") });\r\n */\nList.prototype.updateItem = function (itemId, updates, digest) {\n\tvar _this3 = this;\n\n\treturn this._dao.ensureRequestDigest(digest).then(function (digest) {\n\t\treturn _this3.getItemById(itemId).then(function (item) {\n\t\t\t//decorate the item with the 'type' metadata\n\t\t\tupdates = _extends({}, {\n\t\t\t\t\"__metadata\": {\n\t\t\t\t\t\"type\": item.__metadata.type\n\t\t\t\t}\n\t\t\t}, updates);\n\n\t\t\tvar customOptions = {\n\t\t\t\theaders: headers.getUpdateHeaders(digest, item.__metadata.etag)\n\t\t\t};\n\n\t\t\treturn _this3._dao.post(item.__metadata.uri, updates, customOptions);\n\t\t});\n\t});\n};\n\n/**\r\n * Updates a SharePoint list item\r\n * @param {int} itemId - The SharePoint Id of the item to update\r\n * @param {string} [requestDigest] - Optional request digest token used to authorize the action. One will be automatically retrieved if not provided.\r\n * @returns {Promise} - A Promise\r\n * @example <caption>Delete the item with an ID of 12</caption>\r\n * list.deleteItem(12).then(function() { console.log\"Success\") });\r\n */\nList.prototype.deleteItem = function (itemId, digest) {\n\tvar _this4 = this;\n\n\treturn this._dao.ensureRequestDigest(digest).then(function (digest) {\n\t\treturn _this4.getItemById(itemId).then(function (item) {\n\t\t\tvar customOptions = {\n\t\t\t\theaders: headers.getDeleteHeaders(digest, item.__metadata.etag)\n\t\t\t};\n\t\t\treturn _this4._dao.post(item.__metadata.uri, \"\", customOptions);\n\t\t});\n\t});\n};\n\n/**\r\n * Attach file to an item in the list\r\n * @param {int} itemId - The SharePoint Id of the item to update\r\n * @param {string} filename - Filename to be put in SharePoint\r\n * @param {string} content - File content\r\n * @returns {Promise} - A Promise\r\n * @example <caption>Attach 'hello.txt' with content 'Hello World' to itemId 12</caption>\r\n * list.addAttachment(12, 'hello.txt', 'Hello World').then(function() { console.log\"Success\") });\r\n */\nList.prototype.addAttachment = function (itemId, filename, content, requestDigest) {\n\tvar _this5 = this;\n\n\tif (requestDigest) return this._addAttachment(itemId, filename, content, requestDigest);\n\treturn this._dao.getRequestDigest().then(function (requestDigest) {\n\t\treturn _this5._addAttachment(itemId, filename, content, requestDigest);\n\t});\n};\n\nList.prototype._addAttachment = function (itemId, filename, content, requestDigest) {\n\tvar customOptions = {\n\t\theaders: headers.getFilestreamHeaders(requestDigest),\n\t\tdata: content\n\t};\n\treturn this._dao.post(this.baseUrl + \"/items(\" + itemId + \")/AttachmentFiles/add(FileName='\" + filename + \"')\", null, customOptions);\n};\n\n/**\r\n * Delete attachment of an item in the list\r\n * @param {int} itemId - The SharePoint Id of the item to update\r\n * @param {string} filename - Filename to be deleted in SharePoint\r\n * @returns {Promise} - A Promise\r\n * @example <caption>Delete attachment 'hello.txt' in itemId 12</caption>\r\n * list.deleteAttachment(12, 'hello.txt').then(function() { console.log\"Success\") });\r\n */\nList.prototype.deleteAttachment = function (itemId, filename, requestDigest) {\n\tvar _this6 = this;\n\n\tif (requestDigest) return this._deleteAttachment(itemId, filename, requestDigest);\n\treturn this._dao.getRequestDigest().then(function (requestDigest) {\n\t\treturn _this6._deleteAttachment(itemId, filename, requestDigest);\n\t});\n};\nList.prototype._deleteAttachment = function (itemId, filename, requestDigest) {\n\tvar _this7 = this;\n\n\treturn this._dao.get(this.baseUrl).then(function (data) {\n\t\tvar customOptions = {\n\t\t\theaders: {\n\t\t\t\t'Accept': 'application/json;odata=verbose',\n\t\t\t\t'X-RequestDigest': requestDigest,\n\t\t\t\t'X-HTTP-Method': \"DELETE\"\n\t\t\t}\n\t\t};\n\t\treturn _this7._dao.post(_this7.baseUrl + \"/items(\" + itemId + \")/AttachmentFiles('\" + filename + \"')\", null, customOptions);\n\t});\n};\n\n/**\r\n * Retrieves items in the list based on the value of a column\r\n * @param {string} key - The column name\r\n * @param {string} value - The column value to match on\r\n * @param {string} [odata] - OData string\r\n * @returns {Promise<Array>} - A Promise that resolves an array of list items\r\n * @example <caption>Get all items whose status is \"In Progress\"</caption>\r\n * list.findItems(\"Status\", \"In Progress\").then(function(items) { console.log(items) });\r\n * @example <caption>Get first 5 items whose Yes/No field is 'Yes'</caption>\r\n * list.getItems(\"MyYesNoField\", true, \"$top=5\").then(function(items) { console.log(items) });\r\n */\nList.prototype.findItems = function (key, value, extraOData) {\n\t//if its a string, wrap in single quotes\n\tvar filterValue = typeof value === \"string\" ? \"'\" + value + \"'\" : value;\n\tvar odata = \"$filter=\" + key + \" eq \" + filterValue + appendOData(extraOData, \"&\");\n\n\treturn this.getItems(odata);\n};\n\n/**\r\n * Retrieves the first list item that matches the column value you pass\r\n * @param {string} key - The column name\r\n * @param {string} value - The column value to match on\r\n * @param {string} [odata] - OData string\r\n * @returns {Promise} - A Promise that resolves to a list items\r\n * @example <caption>The first item whose Title is \"TODO\"</caption>\r\n * list.findItem(\"Title\", \"TODO\").then(function(item) { console.log(item) });\r\n */\nList.prototype.findItem = function (key, value, odata) {\n\treturn this.findItems(key, value, odata).then(function (items) {\n\t\tif (items && items.length && items.length > 0) {\n\t\t\treturn items[0];\n\t\t}\n\t\treturn null;\n\t});\n};\n\nvar appendOData = function appendOData(odata, prefix) {\n\tprefix = prefix || \"?\";\n\tif (odata) return prefix + odata;\n\treturn \"\";\n};\n\nmodule.exports = List;\n//# sourceMappingURL=list.js.map"
    },
    {
      "id": 14,
      "identifier": "C:\\gitwip\\spscript\\lib\\profiles.js",
      "name": "./lib/profiles.js",
      "index": 12,
      "index2": 9,
      "size": 3496,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\gitwip\\spscript\\lib\\baseDao.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 8,
          "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\baseDao.js",
          "module": "./lib/baseDao.js",
          "moduleName": "./lib/baseDao.js",
          "type": "cjs require",
          "userRequest": "./profiles",
          "loc": "7:15-36"
        }
      ],
      "source": "\"use strict\";\n\nvar utils = require(\"./utils\");\nvar headers = require(\"./requestHeaders\");\n\n/**\r\n * Allows you to perform queries agains the SP Profile Service. You shouldn't ever be new'ing this class up up yourself, instead you'll get it from your dao as shown in first example.\r\n * @class\r\n * @param {IBaseDao} dao - Data access object used to make requests.\r\n * @example <caption>You access this Profiles class using the 'profiles' property of the dao</caption>\r\n * var dao = new SPScript.RestDao(_spPageContextInfo.webAbsoluteUrl);\r\n * dao.profiles.current().then(function(profile) { console.log(profile) });\r\n */\nvar Profiles = function Profiles(dao) {\n\tthis._dao = dao;\n\tthis.baseUrl = \"/SP.UserProfiles.PeopleManager\";\n};\n\nvar transformPersonProperties = function transformPersonProperties(profile) {\n\tprofile.UserProfileProperties.results.forEach(function (keyvalue) {\n\t\tprofile[keyvalue.Key] = keyvalue.Value;\n\t});\n\treturn profile;\n};\n\n/**\r\n * Gets the profile of the current user\r\n * @returns {Promise} - A Promise that resolves an object containing all the profile properties\r\n * @example\r\n * dao.profiles.current().then(function(profile) { console.log(profile.PreferredName) });\r\n */\nProfiles.prototype.current = function () {\n\tvar url = this.baseUrl + \"/GetMyProperties\";\n\treturn this._dao.get(url).then(utils.validateODataV2).then(transformPersonProperties);\n};\n\n/**\r\n * Sets a profile property\r\n * @param {User|string} userOrEmail - Pass in a User object (must have 'AccountName' or 'LoginName') or an email address\r\n * @returns {Promise} - A Promise\r\n * @example\r\n * var email = \"andrew@andrewpetersen.onmicrosoft.com\";\r\n * var aboutMe = \"I am a web developer\";\r\n * dao.profiles.setProperty(email, \"AboutMe\", aboutMe).then(function() { console.log(\"Success\") });\r\n */\n// Supports email string or a user object\nProfiles.prototype.setProperty = function (userOrEmail, key, value, digest) {\n\tvar _this = this;\n\n\treturn this._dao.ensureRequestDigest(digest).then(function (digest) {\n\t\tvar url = _this.baseUrl + \"/SetSingleValueProfileProperty\";\n\t\tvar args = {\n\t\t\tpropertyName: key,\n\t\t\tpropertyValue: value\n\t\t};\n\n\t\tvar customOptions = {\n\t\t\theaders: headers.getStandardHeaders(digest)\n\t\t};\n\n\t\t// if a string is passed, assume its an email address, otherwise a user was passed\n\t\tif (typeof userOrEmail === \"string\") {\n\t\t\treturn _this.getByEmail(userOrEmail).then(function (user) {\n\t\t\t\targs.accountName = user.AccountName;\n\t\t\t\treturn _this._dao.post(url, args, customOptions);\n\t\t\t});\n\t\t} else {\n\t\t\targs.accountName = userOrEmail.LoginName || userOrEmail.AccountName;\n\t\t\treturn _this._dao.post(url, args, customOptions);\n\t\t}\n\t});\n};\n\nProfiles.prototype.getProfile = function (user) {\n\tvar login = encodeURIComponent(user.LoginName);\n\tvar url = this.baseUrl + \"/GetPropertiesFor(accountName=@v)?@v='\" + login + \"'\";\n\treturn this._dao.get(url).then(utils.validateODataV2).then(transformPersonProperties);\n};\n\n/**\r\n * Gets the profile of the user tied to the specified email\r\n * @returns {Promise} - A Promise that resolves an object containing all the profile properties\r\n * @example\r\n * var email = \"andrew@andrewpetersen.onmicrosoft.com\";\r\n * dao.profiles.getByEmail(email)\r\n *    .then(function(profile) { console.log(profile.PreferredName) });\r\n */\nProfiles.prototype.getByEmail = function (email) {\n\tvar _this2 = this;\n\n\treturn this._dao.web.getUser(email).then(function (user) {\n\t\treturn _this2.getProfile(user);\n\t});\n};\n\nmodule.exports = Profiles;\n//# sourceMappingURL=profiles.js.map"
    },
    {
      "id": 15,
      "identifier": "C:\\gitwip\\spscript\\lib\\restDao.js",
      "name": "./lib/restDao.js",
      "index": 4,
      "index2": 18,
      "size": 1803,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\gitwip\\spscript\\entries\\spscript.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 0,
          "moduleIdentifier": "C:\\gitwip\\spscript\\entries\\spscript.js",
          "module": "./entries/spscript.js",
          "moduleName": "./entries/spscript.js",
          "type": "cjs require",
          "userRequest": "../lib/restDao",
          "loc": "8:19-44"
        }
      ],
      "source": "\"use strict\";\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar BaseDao = require(\"./baseDao\");\nvar ajax = require('./ajax');\nvar utils = require(\"./utils\");\n/**\r\n * Main point of entry. Big Daddy class that all SP requests are routed through. Data Access Object (DAO)\r\n * @class\r\n * @augments BaseDao\r\n\r\n * @param {string} [url] - Url of the site you are connected to. _spPageContextInfo.webAbsoluteUrl will be used if no value is passed.\r\n * @property {string} webUrl - Url of the site you are connected to\r\n * @property {Web} web - Allows interacting with the SharePoint site you connected to\r\n * @property {Search} search - Allows querying through the SP Search Service\r\n * @property {Profiles} profiles - Allows interacting with the SP Profile Service\r\n * @example <caption>Create a new instance of a RestDao</caption>\r\n * var dao = new SPScript.RestDao(_spPageContextInfo.webAbsoluteUrl);\r\n */\nvar RestDao = function RestDao(url) {\n\tvar self = this;\n\tBaseDao.call(this);\n\tthis.webUrl = url || _spPageContextInfo.webAbsoluteUrl;\n};\n\nRestDao.prototype = Object.create(BaseDao.prototype);\n\nRestDao.prototype.executeRequest = function (url, options) {\n\tvar fullUrl = /^http/i.test(url) ? url : this.webUrl + \"/_api\" + url;\n\n\tvar defaultOptions = {\n\t\turl: fullUrl,\n\t\tmethod: \"GET\",\n\t\theaders: {\n\t\t\t\"Accept\": \"application/json; odata=verbose\",\n\t\t\t\"Content-Type\": \"application/json; odata=verbose\"\n\t\t}\n\t};\n\n\tvar ajaxOptions = _extends({}, defaultOptions, options);\n\treturn ajax(ajaxOptions).catch(utils.handleErrorResponse);\n};\n\nmodule.exports = RestDao;\n//# sourceMappingURL=restDao.js.map"
    },
    {
      "id": 16,
      "identifier": "C:\\gitwip\\spscript\\lib\\search.js",
      "name": "./lib/search.js",
      "index": 13,
      "index2": 14,
      "size": 6193,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\gitwip\\spscript\\lib\\baseDao.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 8,
          "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\baseDao.js",
          "module": "./lib/baseDao.js",
          "moduleName": "./lib/baseDao.js",
          "type": "cjs require",
          "userRequest": "./search",
          "loc": "8:13-32"
        }
      ],
      "source": "'use strict';\n\nvar queryString = require('./queryString');\nvar utils = require('./utils');\n\n/**\r\n * Allows you to perform queries agains the SP Search Service. You shouldn't ever be new'ing this class up up yourself, instead you'll get it from your dao as shown in first example.\r\n * @class\r\n * @param {IBaseDao} dao - Data access object used to make requests.\r\n * @example <caption>You access this Search class using the 'search' property of the dao</caption>\r\n * var dao = new SPScript.RestDao(_spPageContextInfo.webAbsoluteUrl);\r\n * dao.search.query('andrew').then(function(result) { console.log(result.items) });\r\n */\nvar Search = function Search(dao) {\n  this._dao = dao;\n};\n\n/**\r\n * Represents the response sent back from the Search Service after a query\r\n * @typedef {Object} QueryOptions\r\n * @property {string} sourceid - Special id that allows filter of types\r\n * @property {int} startrow - \r\n * @property {int} rowlimit - How many items to bring back\r\n * @property {Array<string>} selectedproperties - An array of the property names to bring back\r\n * @property {Array<string>} refiners - An array of the refiners to bring back\r\n * @property {?} hiddenconstraints - \r\n * @property {?} sortlist - \r\n */\nSearch.QueryOptions = function () {\n  this.sourceid = null;\n  this.startrow = null;\n  this.rowlimit = 30;\n  this.selectedproperties = null;\n  this.refiners = null;\n  this.refinementfilters = null;\n  this.hiddenconstraints = null;\n  this.sortlist = null;\n};\n\nvar convertRowsToObjects = function convertRowsToObjects(itemRows) {\n  var items = [];\n\n  for (var i = 0; i < itemRows.length; i++) {\n    var row = itemRows[i],\n        item = {};\n    for (var j = 0; j < row.Cells.results.length; j++) {\n      item[row.Cells.results[j].Key] = row.Cells.results[j].Value;\n    }\n\n    items.push(item);\n  }\n\n  return items;\n};\n\n/**\r\n * Represents the response sent back from the Search Service after a query\r\n * @typedef {Object} SearchResults\r\n * @property {string} elapsedTime - How long the query took\r\n * @property {object} suggestion - Spelling suggestion\r\n * @property {int} resultsCount - Number of results in this batch\r\n * @property {int} totalResults - Total number of results that could be returned\r\n * @property {int} totalResultsIncludingDuplicates - Total number of results that could be returned including duplicates\r\n * @property {Array} items - An array of search result items.  Properties will depend of the item type.\r\n * @property {?Array<Refiner>} refiners - An array of refiners. Can be null.\r\n */\nvar SearchResults = function SearchResults(queryResponse) {\n  this.elapsedTime = queryResponse.ElapsedTime;\n  this.suggestion = queryResponse.SpellingSuggestion;\n  this.resultsCount = queryResponse.PrimaryQueryResult.RelevantResults.RowCount;\n  this.totalResults = queryResponse.PrimaryQueryResult.RelevantResults.TotalRows;\n  this.totalResultsIncludingDuplicates = queryResponse.PrimaryQueryResult.RelevantResults.TotalRowsIncludingDuplicates;\n  this.items = convertRowsToObjects(queryResponse.PrimaryQueryResult.RelevantResults.Table.Rows.results);\n  this.refiners = mapRefiners(queryResponse.PrimaryQueryResult.RefinementResults);\n};\n\n/**\r\n * Represents the response sent back from the Search Service after a query\r\n * @typedef {Object} Refiner\r\n * @property {string} RefinerName - How long the query took\r\n * @property {Array} RefinerOptions - An array of valid refiner values\r\n */\n\nvar mapRefiners = function mapRefiners(refinementResults) {\n  var refiners = [];\n\n  if (refinementResults && refinementResults.Refiners && refinementResults.Refiners.results) {\n    refiners = refinementResults.Refiners.results.map(function (r) {\n      return {\n        RefinerName: r.Name,\n        RefinerOptions: r.Entries.results\n      };\n    });\n  }\n  return refiners;\n};\n\n/**\r\n * Performs a query using the search service\r\n * @param {string} queryText - The query text to send to the Search Service\r\n * @param {QueryOptions} [[queryOptions]] - Override the default query options\r\n * @returns {Promise<SearchResults>} - A Promise that resolves to a SearchResults object\r\n * @example\r\n * dao.search.query('audit').then(function(result) { console.log(result.items) });\r\n */\nSearch.prototype.query = function (queryText, queryOptions) {\n  var optionsQueryString = queryOptions != null ? \"&\" + queryString.fromObj(queryOptions, true) : \"\";\n\n  var url = \"/search/query?querytext='\" + queryText + \"'\" + optionsQueryString;\n  return this._dao.get(url).then(utils.validateODataV2).then(function (resp) {\n    if (resp.query) {\n      return new SearchResults(resp.query);\n    }\n    throw new Error(\"Invalid response back from search service\");\n  });\n};\n\n/**\r\n * Performs a query using the search service\r\n * @param {string} queryText - The query text to send to the Search Service\r\n * @param {QueryOptions} [[queryOptions]] - Override the default query options\r\n * @returns {Promise<SearchResults>} - A Promise that resolves to a SearchResults object\r\n * @example\r\n * dao.search.people('andrew').then(function(result) { console.log(result.items) });\r\n */\nSearch.prototype.people = function (queryText, queryOptions) {\n  var options = queryOptions || {};\n  options.sourceid = 'b09a7990-05ea-4af9-81ef-edfab16c4e31';\n  return this.query(queryText, options);\n};\n\n/**\r\n * Performs a query for just sites using the search service\r\n * @param {string} queryText - The query text to send to the Search Service\r\n * @param {string} [[scope]] - A url to scope the results to\r\n * @param {QueryOptions} [[queryOptions]] - Override the default query options\r\n * @returns {Promise<SearchResults>} - A Promise that resolves to a SearchResults object\r\n * @example\r\n * dao.search.sites('andrew').then(function(result) { console.log(result.items) });\r\n */\nSearch.prototype.sites = function (queryText, scope) {\n  var queryOptions = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n  queryText = queryText || \"\";\n  scope = scope ? 'Path:' + scope + '*' : \"\";\n  var query = (queryText + ' contentclass:STS_Web ' + scope).trim();\n  queryOptions.rowlimit = queryOptions.rowlimit || 499;\n  return this.query(query, queryOptions);\n};\n\nmodule.exports = Search;\n//# sourceMappingURL=search.js.map"
    },
    {
      "id": 17,
      "identifier": "C:\\gitwip\\spscript\\lib\\web.js",
      "name": "./lib/web.js",
      "index": 10,
      "index2": 8,
      "size": 10534,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\gitwip\\spscript\\lib\\baseDao.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 8,
          "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\baseDao.js",
          "module": "./lib/baseDao.js",
          "moduleName": "./lib/baseDao.js",
          "type": "cjs require",
          "userRequest": "./web",
          "loc": "6:10-26"
        }
      ],
      "source": "\"use strict\";\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar utils = require(\"./utils\");\nvar Permissions = require(\"./permissions\");\nvar headers = require(\"./requestHeaders\");\nvar Folder = require(\"./filesystem\").Folder;\n/**\r\n * Represents a SharePoint site. You shouldn't ever be new'ing this class up up yourself, instead you'll get it from your dao as shown in first example.\r\n * @class\r\n * @param {IBaseDao} dao - Data access object used to make requests.\r\n * @property {Permissions} permissions - allows checking security information of the Web\r\n * @property {string} baseUrl - API relative url (value = \"/web\")\r\n * @example <caption>You access this Web class using the 'web' property of the dao</caption>\r\n * var dao = new SPScript.RestDao(_spPageContextInfo.webAbsoluteUrl);\r\n * dao.web.info().then(function(info) { console.log(info) });\r\n */\nvar Web = function Web(dao) {\n\tthis._dao = dao;\n\tthis.baseUrl = \"/web\";\n\tthis.permissions = new Permissions(this.baseUrl, this._dao);\n};\n\n/**\r\n * Retrieves basic information about the site\r\n * @returns {Promise<SP.Web>} - A Promise that resolves to an object containing non-deferred properties of SP.Web (https://msdn.microsoft.com/en-us/library/office/jj244873.aspx)\r\n * @example\r\n * dao.web.info().then(function(info) { console.log(info) });\r\n */\nWeb.prototype.info = function () {\n\treturn this._dao.get(this.baseUrl).then(utils.validateODataV2);\n};\n\n/**\r\n * Retrieves all of the subsites\r\n * @returns {Promise<SP.Web[]>} - A Promise that resolves to an array of subsite object, each loaded with all non-deferred properties\r\n * @example\r\n *  dao.web.subsites().then(function(sites) { console.log(sites) });\r\n */\nWeb.prototype.subsites = function () {\n\treturn this._dao.get(this.baseUrl + \"/webinfos\").then(utils.validateODataV2);\n};\n\n/**\r\n * Retrieves a token needed to authorize any updates\r\n * @return {string} - A Promise that resolves to a the token that needs to added to the \"X-RequestDigest\" request header\r\n * @example\r\n *  dao.web.getRequestDigest().then(function(digest) { console.log(digest) });\r\n */\nWeb.prototype.getRequestDigest = function () {\n\treturn this._dao.getRequestDigest();\n};\n\n/**\r\n * Retrieves a folder\r\n * @param {string} serverRelativeUrl - The server relative url of the folder\r\n * @returns {Promise<Folder>} - A Promise that resolves to a folder object contain a files and folders arrays\r\n * @example\r\n *  dao.web.getFolder(\"/sites/mysite/Shared Documents\")\r\n *\t\t\t.then(function(folder) { console.log(folder) });\r\n */\nWeb.prototype.getFolder = function (serverRelativeUrl) {\n\t//remove leading slash\n\tif (serverRelativeUrl.charAt(0) === \"/\") {\n\t\tserverRelativeUrl = serverRelativeUrl.substr(1);\n\t}\n\tvar url = \"/web/GetFolderByServerRelativeUrl('\" + serverRelativeUrl + \"')?$expand=Folders,Files\";\n\n\treturn this._dao.get(url).then(utils.validateODataV2).then(function (spFolder) {\n\t\tvar folder = new Folder(spFolder);\n\t\tfolder.populateChildren(spFolder);\n\t\treturn folder;\n\t});\n};\n\n/**\r\n * Uploads a file\r\n * @param {HTML5.File|string} fileContent - Either an HTML5 File object (from a File input element) or the string content of the file\r\n * @param {string} folderUrl - The server relative folder where the file should be uploaded\r\n * @param {object} [[fields]] - An optional object containig the fields that should be set on the file after the upload completes. You can override the filename by passing 'name' property { name: \"NewFileName.docx\"}\r\n * @param {string} [[requestDigest]] - The request digest token used to authorize the request. One will be automatically retrieved if not passed.\r\n * @example <caption>Upload files with file input element, assumes <input type='file' id='file-input' /> </caption>\r\n\t*var inputElement = document.getElementById(\"file-input\");\r\n\t*inputElement.addEventListener(\"change\", handleFiles, false);\r\n\t*function handleFiles() {\r\n\t*    var fileList = this.files;\r\n\t*    var folderUrl = \"/spscript/Shared Documents\";\r\n\t*    for (var i = 0; i < fileList.length; i++) {\r\n\t*        dao.web.uploadFile(fileList[i], folderUrl).then(function(result){\r\n\t*            console.log(result);\r\n\t*        });\r\n\t*    }\r\n\t*}\r\n */\nWeb.prototype.uploadFile = function (fileContent, folderUrl, fields, digest) {\n\tvar _this = this;\n\n\tif (digest) return this._uploadFile(fileContent, folderUrl, fields, digest);\n\treturn this.getRequestDigest().then(function (digest) {\n\t\treturn _this._uploadFile(fileContent, folderUrl, fields, digest);\n\t});\n};\n\nWeb.prototype._uploadFile = function (fileContent, folderUrl, fields, digest) {\n\tvar _this2 = this;\n\n\tfields = fields || {};\n\t// if its a string, just treat that as the raw content\n\tif (typeof fileContent === \"string\") {\n\t\tfields.name = fields.name || \"NewFile.txt\";\n\t\treturn this._uploadBinaryData(fileContent, folderUrl, fields, digest);\n\t}\n\n\t// If its a browser File object, use FileReader to get ArrayBuffer\n\tif (fileContent instanceof File) {\n\t\tfields.name = fields.name || fileContent.name;\n\t\treturn utils.getArrayBuffer(fileContent).then(function (arrayBuffer) {\n\t\t\treturn _this2._uploadBinaryData(arrayBuffer, folderUrl, fields, digest);\n\t\t});\n\t}\n};\n\nWeb.prototype._setFileFields = function (spFile, fields, digest) {\n\tvar _this3 = this;\n\n\t// Get the ListItem with ParentList properties so we can query by list title\n\treturn this._dao.get(spFile.__metadata.uri + \"/ListItemAllFields?$expand=ParentList\").then(utils.validateODataV2).then(function (item) {\n\t\tdelete fields.name;\n\t\t// if there were no fields passed in just return the file and list item\n\t\tif (Object.keys(fields).length === 0) {\n\t\t\treturn {\n\t\t\t\titem: item,\n\t\t\t\tfile: spFile\n\t\t\t};\n\t\t};\n\t\t// If extra fields were passed in, update the list item\n\t\treturn _this3._dao.lists(item.ParentList.Title).updateItem(item.Id, fields, digest).then(function () {\n\t\t\titem = _extends({}, item, fields);\n\t\t\treturn { item: item, file: spFile };\n\t\t});\n\t});\n};\n\nWeb.prototype._uploadBinaryData = function (binaryContent, folderUrl, fields, digest) {\n\tvar _this4 = this;\n\n\tvar uploadUrl = \"/web/GetFolderByServerRelativeUrl('\" + folderUrl + \"')/Files/Add(url='\" + fields.name + \"',overwrite=true)\";\n\tvar options = {\n\t\theaders: headers.getFilestreamHeaders(digest)\n\t};\n\treturn this._dao.post(uploadUrl, binaryContent, options).then(utils.validateODataV2).then(function (spFile) {\n\t\treturn _this4._setFileFields(spFile, fields, digest);\n\t});\n};\n\n/**\r\n * Retrieves a file object\r\n * @param {string} url - The server relative url of the file\r\n * @returns {Promise<File>} - A Promise that resolves to a file object\r\n * @example\r\n *  dao.web.getFile(\"/sites/mysite/Shared Documents/myfile.docx\")\r\n *\t\t\t.then(function(file) { console.log(file) });\r\n */\nWeb.prototype.getFile = function (url) {\n\tvar url = \"/web/getfilebyserverrelativeurl('\" + url + \"')\";\n\treturn this._dao.get(url).then(utils.validateODataV2);\n};\n\n/**\r\n * Copies a file\r\n * @param {string} sourceUrl - The server relative url of the file you want to copy\r\n * @param {string} destinationUrl - The server relative url of the destination\r\n * @param {string} [[requestDigest]] - The request digest token used to authorize the request. One will be automatically retrieved if not passed.\r\n * @example\r\n * var sourceFile = \"/sites/mysite/Shared Documents/myfile.docx\";\r\n * var destination = \"/sites/mysite/Restricted Docs/myFile.docx\";\r\n * dao.web.copyFile(sourceFile, destination).then(function() { console.log(\"Success\") });\r\n */\nWeb.prototype.copyFile = function (sourceUrl, destinationUrl, digest) {\n\tvar _this5 = this;\n\n\tif (digest) return this._copyFile(sourceUrl, destinationUrl, digest);\n\n\treturn this.getRequestDigest().then(function (requestDigest) {\n\t\treturn _this5._copyFile(sourceUrl, destinationUrl, requestDigest);\n\t});\n};\n\nWeb.prototype._copyFile = function (sourceUrl, destinationUrl, digest) {\n\tvar url = \"/web/getfilebyserverrelativeurl('\" + sourceUrl + \"')/CopyTo\"; //(strnewurl='${destinationUrl}',boverwrite=true)`\n\tvar options = {\n\t\theaders: headers.getAddHeaders(digest)\n\t};\n\tvar body = {\n\t\tstrNewUrl: destinationUrl,\n\t\tbOverWrite: true\n\t};\n\treturn this._dao.post(url, body, options);\n};\n\nWeb.prototype.fileAction = function (file, action) {\n\tvar _this6 = this;\n\n\tvar params = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\tvar digest = arguments[3];\n\n\tif (digest) this._fileAction(file, action, params, digest);\n\treturn this.getRequestDigest().then(function (requestDigest) {\n\t\treturn _this6._fileAction(file, action, params, requestDigest);\n\t});\n};\n\nWeb.prototype._fileAction = function (file, action, params, digest) {\n\tvar url = \"/web/getfilebyserverrelativeurl('\" + file + \"')/\" + action;\n\tvar options = {\n\t\theaders: headers.getAddHeaders(digest)\n\t};\n\treturn this._dao.post(url, params, options);\n};\n\n/**\r\n * Deletes a file\r\n * @param {string} fileUrl - The server relative url of the file you want to delete\r\n * @param {string} [[requestDigest]] - The request digest token used to authorize the request. One will be automatically retrieved if not passed.\r\n * @example\r\n * dao.web.deleteFile(\"/sites/mysite/Shared Documents/myFile.docx\")\r\n *\t\t\t.then(function() { console.log(\"Success\")});\r\n */\nWeb.prototype.deleteFile = function (fileUrl, digest) {\n\tvar _this7 = this;\n\n\tif (digest) return this._deleteFile(fileUrl, digest);\n\n\treturn this.getRequestDigest().then(function (requestDigest) {\n\t\treturn _this7._deleteFile(fileUrl, requestDigest);\n\t});\n};\n\nWeb.prototype._deleteFile = function (sourceUrl, requestDigest) {\n\tvar url = \"/web/getfilebyserverrelativeurl(@url)/?@Url='\" + sourceUrl + \"'\";\n\tvar options = {\n\t\theaders: headers.getDeleteHeaders(requestDigest)\n\t};\n\treturn this._dao.post(url, {}, options);\n};\n\n/**\r\n * Retrieves a users object based on an email address\r\n * @param {string} email - The email address of the user to retrieve\r\n * @returns {Promise<SP.User>} - A Promise that resolves to a an SP.User object\r\n * @example\r\n * dao.web.getUser(\"andrew@andrewpetersen.onmicrosoft.com\")\r\n * \t\t\t.then(function(user) { console.log(user)});\r\n */\nWeb.prototype.getUser = function (email) {\n\tvar url = this.baseUrl + \"/SiteUsers/GetByEmail('\" + email + \"')\";\n\treturn this._dao.get(url).then(utils.validateODataV2);\n};\n\nWeb.prototype.ensureUser = function (login) {\n\treturn this._dao.post(\"/web/ensureUser('\" + login + \"')\").then(utils.validateODataV2);\n};\n\nmodule.exports = Web;\n//# sourceMappingURL=web.js.map"
    },
    {
      "id": 18,
      "identifier": "C:\\gitwip\\spscript\\node_modules\\promise-polyfill\\promise.js",
      "name": "./~/promise-polyfill/promise.js",
      "index": 1,
      "index2": 2,
      "size": 6235,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\gitwip\\spscript\\entries\\spscript.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 0,
          "moduleIdentifier": "C:\\gitwip\\spscript\\entries\\spscript.js",
          "module": "./entries/spscript.js",
          "moduleName": "./entries/spscript.js",
          "type": "cjs require",
          "userRequest": "promise-polyfill",
          "loc": "2:22-49"
        }
      ],
      "source": "(function (root) {\n\n  // Store setTimeout reference so promise-polyfill will be unaffected by\n  // other code modifying setTimeout (like sinon.useFakeTimers())\n  var setTimeoutFunc = setTimeout;\n\n  function noop() {}\n  \n  // Polyfill for Function.prototype.bind\n  function bind(fn, thisArg) {\n    return function () {\n      fn.apply(thisArg, arguments);\n    };\n  }\n\n  function Promise(fn) {\n    if (typeof this !== 'object') throw new TypeError('Promises must be constructed via new');\n    if (typeof fn !== 'function') throw new TypeError('not a function');\n    this._state = 0;\n    this._handled = false;\n    this._value = undefined;\n    this._deferreds = [];\n\n    doResolve(fn, this);\n  }\n\n  function handle(self, deferred) {\n    while (self._state === 3) {\n      self = self._value;\n    }\n    if (self._state === 0) {\n      self._deferreds.push(deferred);\n      return;\n    }\n    self._handled = true;\n    Promise._immediateFn(function () {\n      var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;\n      if (cb === null) {\n        (self._state === 1 ? resolve : reject)(deferred.promise, self._value);\n        return;\n      }\n      var ret;\n      try {\n        ret = cb(self._value);\n      } catch (e) {\n        reject(deferred.promise, e);\n        return;\n      }\n      resolve(deferred.promise, ret);\n    });\n  }\n\n  function resolve(self, newValue) {\n    try {\n      // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n      if (newValue === self) throw new TypeError('A promise cannot be resolved with itself.');\n      if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {\n        var then = newValue.then;\n        if (newValue instanceof Promise) {\n          self._state = 3;\n          self._value = newValue;\n          finale(self);\n          return;\n        } else if (typeof then === 'function') {\n          doResolve(bind(then, newValue), self);\n          return;\n        }\n      }\n      self._state = 1;\n      self._value = newValue;\n      finale(self);\n    } catch (e) {\n      reject(self, e);\n    }\n  }\n\n  function reject(self, newValue) {\n    self._state = 2;\n    self._value = newValue;\n    finale(self);\n  }\n\n  function finale(self) {\n    if (self._state === 2 && self._deferreds.length === 0) {\n      Promise._immediateFn(function() {\n        if (!self._handled) {\n          Promise._unhandledRejectionFn(self._value);\n        }\n      });\n    }\n\n    for (var i = 0, len = self._deferreds.length; i < len; i++) {\n      handle(self, self._deferreds[i]);\n    }\n    self._deferreds = null;\n  }\n\n  function Handler(onFulfilled, onRejected, promise) {\n    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n    this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n    this.promise = promise;\n  }\n\n  /**\n   * Take a potentially misbehaving resolver function and make sure\n   * onFulfilled and onRejected are only called once.\n   *\n   * Makes no guarantees about asynchrony.\n   */\n  function doResolve(fn, self) {\n    var done = false;\n    try {\n      fn(function (value) {\n        if (done) return;\n        done = true;\n        resolve(self, value);\n      }, function (reason) {\n        if (done) return;\n        done = true;\n        reject(self, reason);\n      });\n    } catch (ex) {\n      if (done) return;\n      done = true;\n      reject(self, ex);\n    }\n  }\n\n  Promise.prototype['catch'] = function (onRejected) {\n    return this.then(null, onRejected);\n  };\n\n  Promise.prototype.then = function (onFulfilled, onRejected) {\n    var prom = new (this.constructor)(noop);\n\n    handle(this, new Handler(onFulfilled, onRejected, prom));\n    return prom;\n  };\n\n  Promise.all = function (arr) {\n    var args = Array.prototype.slice.call(arr);\n\n    return new Promise(function (resolve, reject) {\n      if (args.length === 0) return resolve([]);\n      var remaining = args.length;\n\n      function res(i, val) {\n        try {\n          if (val && (typeof val === 'object' || typeof val === 'function')) {\n            var then = val.then;\n            if (typeof then === 'function') {\n              then.call(val, function (val) {\n                res(i, val);\n              }, reject);\n              return;\n            }\n          }\n          args[i] = val;\n          if (--remaining === 0) {\n            resolve(args);\n          }\n        } catch (ex) {\n          reject(ex);\n        }\n      }\n\n      for (var i = 0; i < args.length; i++) {\n        res(i, args[i]);\n      }\n    });\n  };\n\n  Promise.resolve = function (value) {\n    if (value && typeof value === 'object' && value.constructor === Promise) {\n      return value;\n    }\n\n    return new Promise(function (resolve) {\n      resolve(value);\n    });\n  };\n\n  Promise.reject = function (value) {\n    return new Promise(function (resolve, reject) {\n      reject(value);\n    });\n  };\n\n  Promise.race = function (values) {\n    return new Promise(function (resolve, reject) {\n      for (var i = 0, len = values.length; i < len; i++) {\n        values[i].then(resolve, reject);\n      }\n    });\n  };\n\n  // Use polyfill for setImmediate for performance gains\n  Promise._immediateFn = (typeof setImmediate === 'function' && function (fn) { setImmediate(fn); }) ||\n    function (fn) {\n      setTimeoutFunc(fn, 0);\n    };\n\n  Promise._unhandledRejectionFn = function _unhandledRejectionFn(err) {\n    if (typeof console !== 'undefined' && console) {\n      console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console\n    }\n  };\n\n  /**\n   * Set the immediate function to execute callbacks\n   * @param fn {function} Function to execute\n   * @deprecated\n   */\n  Promise._setImmediateFn = function _setImmediateFn(fn) {\n    Promise._immediateFn = fn;\n  };\n\n  /**\n   * Change the function to execute on unhandled rejection\n   * @param {function} fn Function to execute on unhandled rejection\n   * @deprecated\n   */\n  Promise._setUnhandledRejectionFn = function _setUnhandledRejectionFn(fn) {\n    Promise._unhandledRejectionFn = fn;\n  };\n  \n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = Promise;\n  } else if (!root.Promise) {\n    root.Promise = Promise;\n  }\n\n})(this);\n"
    },
    {
      "id": 19,
      "identifier": "C:\\gitwip\\spscript\\node_modules\\querystring\\decode.js",
      "name": "./~/querystring/decode.js",
      "index": 16,
      "index2": 10,
      "size": 2399,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\gitwip\\spscript\\node_modules\\querystring\\index.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 21,
          "moduleIdentifier": "C:\\gitwip\\spscript\\node_modules\\querystring\\index.js",
          "module": "./~/querystring/index.js",
          "moduleName": "./~/querystring/index.js",
          "type": "cjs require",
          "userRequest": "./decode",
          "loc": "3:33-52"
        }
      ],
      "source": "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (Array.isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n"
    },
    {
      "id": 20,
      "identifier": "C:\\gitwip\\spscript\\node_modules\\querystring\\encode.js",
      "name": "./~/querystring/encode.js",
      "index": 17,
      "index2": 11,
      "size": 2090,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\gitwip\\spscript\\node_modules\\querystring\\index.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 21,
          "moduleIdentifier": "C:\\gitwip\\spscript\\node_modules\\querystring\\index.js",
          "module": "./~/querystring/index.js",
          "moduleName": "./~/querystring/index.js",
          "type": "cjs require",
          "userRequest": "./encode",
          "loc": "4:37-56"
        }
      ],
      "source": "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return Object.keys(obj).map(function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (Array.isArray(obj[k])) {\n        return obj[k].map(function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n"
    },
    {
      "id": 21,
      "identifier": "C:\\gitwip\\spscript\\node_modules\\querystring\\index.js",
      "name": "./~/querystring/index.js",
      "index": 15,
      "index2": 12,
      "size": 127,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\gitwip\\spscript\\lib\\queryString.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 6,
          "moduleIdentifier": "C:\\gitwip\\spscript\\lib\\queryString.js",
          "module": "./lib/queryString.js",
          "moduleName": "./lib/queryString.js",
          "type": "cjs require",
          "userRequest": "querystring",
          "loc": "3:9-31"
        }
      ],
      "source": "'use strict';\n\nexports.decode = exports.parse = require('./decode');\nexports.encode = exports.stringify = require('./encode');\n"
    },
    {
      "id": 22,
      "identifier": "C:\\gitwip\\spscript\\node_modules\\timers-browserify\\node_modules\\process\\browser.js",
      "name": "./~/timers-browserify/~/process/browser.js",
      "index": 3,
      "index2": 1,
      "size": 2056,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "C:\\gitwip\\spscript\\node_modules\\timers-browserify\\main.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 3,
          "moduleIdentifier": "C:\\gitwip\\spscript\\node_modules\\timers-browserify\\main.js",
          "module": "./~/timers-browserify/main.js",
          "moduleName": "./~/timers-browserify/main.js",
          "type": "cjs require",
          "userRequest": "process/browser.js",
          "loc": "1:15-44"
        }
      ],
      "source": "// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n"
    }
  ],
  "filteredModules": 0,
  "children": []
}
